"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@story-protocol";
exports.ids = ["vendor-chunks/@story-protocol"];
exports.modules = {

/***/ "(rsc)/./node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIRelationship: () => (/* binding */ AIRelationship),\n/* harmony export */   AccessPermission: () => (/* binding */ AccessPermission),\n/* harmony export */   DisputeClient: () => (/* binding */ DisputeClient),\n/* harmony export */   DisputeTargetTag: () => (/* binding */ DisputeTargetTag),\n/* harmony export */   GroupClient: () => (/* binding */ GroupClient),\n/* harmony export */   IPAccountClient: () => (/* binding */ IPAccountClient),\n/* harmony export */   IPAssetClient: () => (/* binding */ IPAssetClient),\n/* harmony export */   LicenseClient: () => (/* binding */ LicenseClient),\n/* harmony export */   NativeRoyaltyPolicy: () => (/* binding */ NativeRoyaltyPolicy),\n/* harmony export */   NftClient: () => (/* binding */ NftClient),\n/* harmony export */   PILFlavor: () => (/* binding */ PILFlavor),\n/* harmony export */   PIL_TYPE: () => (/* binding */ PIL_TYPE),\n/* harmony export */   PermissionClient: () => (/* binding */ PermissionClient),\n/* harmony export */   RevShareType: () => (/* binding */ RevShareType),\n/* harmony export */   RoyaltyClient: () => (/* binding */ RoyaltyClient),\n/* harmony export */   StoryClient: () => (/* binding */ StoryClient),\n/* harmony export */   StoryRelationship: () => (/* binding */ StoryRelationship),\n/* harmony export */   WIP_TOKEN_ADDRESS: () => (/* binding */ WIP_TOKEN_ADDRESS),\n/* harmony export */   WipClient: () => (/* binding */ WipClient),\n/* harmony export */   aeneid: () => (/* binding */ aeneid),\n/* harmony export */   convertCIDtoHashIPFS: () => (/* binding */ convertCIDtoHashIPFS),\n/* harmony export */   convertHashIPFStoCID: () => (/* binding */ convertHashIPFStoCID),\n/* harmony export */   getPermissionSignature: () => (/* binding */ getPermissionSignature),\n/* harmony export */   getSignature: () => (/* binding */ getSignature),\n/* harmony export */   mainnet: () => (/* binding */ mainnet),\n/* harmony export */   royaltyPolicyLapAddress: () => (/* binding */ royaltyPolicyLapAddress),\n/* harmony export */   royaltyPolicyLrpAddress: () => (/* binding */ royaltyPolicyLrpAddress),\n/* harmony export */   settleAssertion: () => (/* binding */ settleAssertion)\n/* harmony export */ });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"(rsc)/./node_modules/dotenv/lib/main.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/abi/decodeEventLog.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/unit/formatEther.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/constants/number.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/clients/transports/http.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/constants/bytes.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/hash/toFunctionSelector.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/constants/address.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/constants/abis.js\");\n/* harmony import */ var viem_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem/utils */ \"(rsc)/./node_modules/viem/_esm/utils/chain/defineChain.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"(rsc)/./node_modules/bs58/src/esm/index.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/bases/base58 */ \"(rsc)/./node_modules/multiformats/esm/src/bases/base58.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/cid */ \"(rsc)/./node_modules/multiformats/esm/src/cid.js\");\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! viem/accounts */ \"(rsc)/./node_modules/viem/_esm/accounts/privateKeyToAccount.js\");\n\n\n\n\n\n\n\n\nfunction _regeneratorDefine(e, r, n, t) {\n  var i = Object.defineProperty;\n  try {\n    i({}, \"\", {});\n  } catch (e) {\n    i = 0;\n  }\n  _regeneratorDefine = function (e, r, n, t) {\n    function o(r, n) {\n      _regeneratorDefine(e, r, function (e) {\n        return this._invoke(r, n, e);\n      });\n    }\n    r ? i ? i(e, r, {\n      value: n,\n      enumerable: !t,\n      configurable: !t,\n      writable: !t\n    }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2));\n  }, _regeneratorDefine(e, r, n, t);\n}\n\nfunction _regenerator() {\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */\n  var e,\n    t,\n    r = \"function\" == typeof Symbol ? Symbol : {},\n    n = r.iterator || \"@@iterator\",\n    o = r.toStringTag || \"@@toStringTag\";\n  function i(r, n, o, i) {\n    var c = n && n.prototype instanceof Generator ? n : Generator,\n      u = Object.create(c.prototype);\n    return _regeneratorDefine(u, \"_invoke\", function (r, n, o) {\n      var i,\n        c,\n        u,\n        f = 0,\n        p = o || [],\n        y = false,\n        G = {\n          p: 0,\n          n: 0,\n          v: e,\n          a: d,\n          f: d.bind(e, 4),\n          d: function (t, r) {\n            return i = t, c = 0, u = e, G.n = r, a;\n          }\n        };\n      function d(r, n) {\n        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {\n          var o,\n            i = p[t],\n            d = G.p,\n            l = i[2];\n          r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0));\n        }\n        if (o || r > 1) return a;\n        throw y = true, n;\n      }\n      return function (o, p, l) {\n        if (f > 1) throw TypeError(\"Generator is already running\");\n        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) {\n          i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u);\n          try {\n            if (f = 2, i) {\n              if (c || (o = \"next\"), t = i[o]) {\n                if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\");\n                if (!t.done) return t;\n                u = t.value, c < 2 && (c = 0);\n              } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1);\n              i = e;\n            } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;\n          } catch (t) {\n            i = e, c = 1, u = t;\n          } finally {\n            f = 1;\n          }\n        }\n        return {\n          value: t,\n          done: y\n        };\n      };\n    }(r, o, i), true), u;\n  }\n  var a = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  t = Object.getPrototypeOf;\n  var c = [][n] ? t(t([][n]())) : (_regeneratorDefine(t = {}, n, function () {\n      return this;\n    }), t),\n    u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);\n  function f(e) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e;\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine(u), _regeneratorDefine(u, o, \"Generator\"), _regeneratorDefine(u, n, function () {\n    return this;\n  }), _regeneratorDefine(u, \"toString\", function () {\n    return \"[object Generator]\";\n  }), (_regenerator = function () {\n    return {\n      w: i,\n      m: f\n    };\n  })();\n}\n\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\n\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r);\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (String )(t);\n}\n\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\n\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: true,\n    configurable: true,\n    writable: true\n  }) : e[r] = t, e;\n}\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), true).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || false, o.configurable = true, \"value\" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: false\n  }), e;\n}\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\n\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n      t && (r = t);\n      var n = 0,\n        F = function () {};\n      return {\n        s: F,\n        n: function () {\n          return n >= r.length ? {\n            done: true\n          } : {\n            done: false,\n            value: r[n++]\n          };\n        },\n        e: function (r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = true,\n    u = false;\n  return {\n    s: function () {\n      t = t.call(r);\n    },\n    n: function () {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function (r) {\n      u = true, o = r;\n    },\n    f: function () {\n      try {\n        a || null == t.return || t.return();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\n\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = true,\n      o = false;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = true, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\n\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\n\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\n\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\n\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\n\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\n\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\n\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: true,\n      configurable: true\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: false\n  }), e && _setPrototypeOf(t, e);\n}\n\n// AccessController\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a)\n */var accessControllerAbi=[{type:\"constructor\",inputs:[{name:\"ipAccountRegistry\",internalType:\"address\",type:\"address\"},{name:\"moduleRegistry\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"}],name:\"AccessController__BothCallerAndRecipientAreNotRegisteredModule\"},{type:\"error\",inputs:[],name:\"AccessController__CallerIsNotIPAccountOrOwner\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"}],name:\"AccessController__IPAccountIsNotValid\"},{type:\"error\",inputs:[],name:\"AccessController__IPAccountIsZeroAddress\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"AccessController__OwnerIsIPAccount\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"AccessController__PermissionDenied\"},{type:\"error\",inputs:[],name:\"AccessController__PermissionIsNotValid\"},{type:\"error\",inputs:[],name:\"AccessController__SignerIsZeroAddress\"},{type:\"error\",inputs:[],name:\"AccessController__ToAndFuncAreZeroAddressShouldCallSetAllPermissions\"},{type:\"error\",inputs:[],name:\"AccessController__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"AccessController__ZeroIPAccountRegistry\"},{type:\"error\",inputs:[],name:\"AccessController__ZeroModuleRegistry\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipAccountOwner\",internalType:\"address\",type:\"address\",indexed:false},{name:\"ipAccount\",internalType:\"address\",type:\"address\",indexed:true},{name:\"signer\",internalType:\"address\",type:\"address\",indexed:true},{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\",indexed:false},{name:\"permission\",internalType:\"uint8\",type:\"uint8\",indexed:false}],name:\"PermissionSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipAccountOwner\",internalType:\"address\",type:\"address\",indexed:false},{name:\"ipAccount\",internalType:\"address\",type:\"address\",indexed:true},{name:\"signer\",internalType:\"address\",type:\"address\",indexed:true},{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\",indexed:false},{name:\"permission\",internalType:\"uint8\",type:\"uint8\",indexed:false}],name:\"TransientPermissionSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MODULE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IModuleRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"checkPermission\",outputs:[],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"getPermanentPermission\",outputs:[{name:\"\",internalType:\"uint8\",type:\"uint8\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"getPermission\",outputs:[{name:\"\",internalType:\"uint8\",type:\"uint8\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"getTransientPermission\",outputs:[{name:\"\",internalType:\"uint8\",type:\"uint8\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"permission\",internalType:\"uint8\",type:\"uint8\"}],name:\"setAllPermissions\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"permission\",internalType:\"uint8\",type:\"uint8\"}],name:\"setAllTransientPermissions\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"permissions\",internalType:\"struct AccessPermission.Permission[]\",type:\"tuple[]\",components:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"},{name:\"permission\",internalType:\"uint8\",type:\"uint8\"}]}],name:\"setBatchPermissions\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"permissions\",internalType:\"struct AccessPermission.Permission[]\",type:\"tuple[]\",components:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"},{name:\"permission\",internalType:\"uint8\",type:\"uint8\"}]}],name:\"setBatchTransientPermissions\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"},{name:\"permission\",internalType:\"uint8\",type:\"uint8\"}],name:\"setPermission\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"func\",internalType:\"bytes4\",type:\"bytes4\"},{name:\"permission\",internalType:\"uint8\",type:\"uint8\"}],name:\"setTransientPermission\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a)\n */var accessControllerAddress={1315:\"0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a\",1514:\"0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a\"};// ArbitrationPolicyUMA\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936)\n */var arbitrationPolicyUmaAbi=[{type:\"constructor\",inputs:[{name:\"disputeModule\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__BondAboveMax\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__CannotCancel\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__CannotDisputeAssertionIfTagIsInherited\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__CurrencyNotWhitelisted\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__DisputeNotFound\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__IpOwnerTimePercentAboveMax\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__LivenessAboveMax\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__LivenessBelowMin\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__MaxBondBelowMinimumBond\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__MinLivenessAboveMax\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__NoCounterEvidence\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__NotDisputeModule\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__NotOOV3\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__OnlyDisputePolicyUMA\"},{type:\"error\",inputs:[{name:\"elapsedTime\",internalType:\"uint64\",type:\"uint64\"},{name:\"liveness\",internalType:\"uint64\",type:\"uint64\"},{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"ArbitrationPolicyUMA__OnlyTargetIpIdCanDisputeWithinTimeWindow\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__ZeroDisputeModule\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__ZeroMaxLiveness\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__ZeroMinLiveness\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__ZeroOOV3\"},{type:\"error\",inputs:[],name:\"ArbitrationPolicyUMA__ZeroRoyaltyModule\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"assertionId\",internalType:\"bytes32\",type:\"bytes32\",indexed:false},{name:\"counterEvidenceHash\",internalType:\"bytes32\",type:\"bytes32\",indexed:false}],name:\"AssertionDisputed\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"assertionId\",internalType:\"bytes32\",type:\"bytes32\",indexed:false},{name:\"caller\",internalType:\"address\",type:\"address\",indexed:false},{name:\"liveness\",internalType:\"uint64\",type:\"uint64\",indexed:false},{name:\"currency\",internalType:\"address\",type:\"address\",indexed:false},{name:\"bond\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"DisputeRaisedUMA\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"minLiveness\",internalType:\"uint64\",type:\"uint64\",indexed:false},{name:\"maxLiveness\",internalType:\"uint64\",type:\"uint64\",indexed:false},{name:\"ipOwnerTimePercent\",internalType:\"uint32\",type:\"uint32\",indexed:false}],name:\"LivenessSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"maxBond\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"MaxBondSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"oov3\",internalType:\"address\",type:\"address\",indexed:false}],name:\"OOV3Set\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"DISPUTE_MODULE\",outputs:[{name:\"\",internalType:\"contract IDisputeModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"assertionId\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"assertionDisputedCallback\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"assertionId\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"assertionIdToDisputeId\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"assertionId\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"assertedTruthfully\",internalType:\"bool\",type:\"bool\"}],name:\"assertionResolvedCallback\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"assertionId\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"counterEvidenceHash\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"disputeAssertion\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"}],name:\"disputeIdToAssertionId\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"ipOwnerTimePercent\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ipOwnerTimePercents\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"maxBonds\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"maxLiveness\",outputs:[{name:\"\",internalType:\"uint64\",type:\"uint64\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"minLiveness\",outputs:[{name:\"\",internalType:\"uint64\",type:\"uint64\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"onDisputeCancel\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"},{name:\"decision\",internalType:\"bool\",type:\"bool\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"onDisputeJudgement\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"targetIpId\",internalType:\"address\",type:\"address\"},{name:\"disputeEvidenceHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"targetTag\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"onRaiseDispute\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"onResolveDispute\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"oov3\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"minLiveness\",internalType:\"uint64\",type:\"uint64\"},{name:\"maxLiveness\",internalType:\"uint64\",type:\"uint64\"},{name:\"ipOwnerTimePercent\",internalType:\"uint32\",type:\"uint32\"}],name:\"setLiveness\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"maxBond\",internalType:\"uint256\",type:\"uint256\"}],name:\"setMaxBond\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"oov3\",internalType:\"address\",type:\"address\"}],name:\"setOOV3\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936)\n */var arbitrationPolicyUmaAddress={1315:\"0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936\",1514:\"0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936\"};// CoreMetadataModule\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16)\n */var coreMetadataModuleAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"ipAccountRegistry\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"}],name:\"AccessControlled__NotIpAccount\"},{type:\"error\",inputs:[],name:\"AccessControlled__ZeroAddress\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[],name:\"CoreMetadataModule__MetadataAlreadyFrozen\"},{type:\"error\",inputs:[],name:\"CoreMetadataModule__ZeroAccessManager\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:true}],name:\"MetadataFrozen\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"metadataURI\",internalType:\"string\",type:\"string\",indexed:false},{name:\"metadataHash\",internalType:\"bytes32\",type:\"bytes32\",indexed:false}],name:\"MetadataURISet\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"nftTokenURI\",internalType:\"string\",type:\"string\",indexed:false},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\",indexed:false}],name:\"NFTTokenURISet\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"freezeMetadata\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"isMetadataFrozen\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"pure\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"metadataURI\",internalType:\"string\",type:\"string\"},{name:\"metadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"setAll\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"metadataURI\",internalType:\"string\",type:\"string\"},{name:\"metadataHash\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"setMetadataURI\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"updateNftTokenURI\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16)\n */var coreMetadataModuleAddress={1315:\"0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16\",1514:\"0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16\"};// DerivativeWorkflows\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9e2d496f72C547C2C535B167e06ED8729B374a4f)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9e2d496f72C547C2C535B167e06ED8729B374a4f)\n */var derivativeWorkflowsAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"coreMetadataModule\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseToken\",internalType:\"address\",type:\"address\"},{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"pilTemplate\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"actualTokenOwner\",internalType:\"address\",type:\"address\"}],name:\"DerivativeWorkflows__CallerAndNotTokenOwner\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"}],name:\"DerivativeWorkflows__CallerNotSigner\"},{type:\"error\",inputs:[],name:\"DerivativeWorkflows__EmptyLicenseTokens\"},{type:\"error\",inputs:[],name:\"DerivativeWorkflows__ZeroAddressParam\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"LicensingHelper__ParentIpIdsAndLicenseTermsIdsMismatch\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"PermissionHelper__ModulesAndSelectorsMismatch\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"error\",inputs:[],name:\"Workflow__CallerNotAuthorizedToMint\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"CORE_METADATA_MODULE\",outputs:[{name:\"\",internalType:\"contract ICoreMetadataModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_TOKEN\",outputs:[{name:\"\",internalType:\"contract ILicenseToken\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"PIL_TEMPLATE\",outputs:[{name:\"\",internalType:\"contract IPILicenseTemplate\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"derivData\",internalType:\"struct WorkflowStructs.MakeDerivative\",type:\"tuple\",components:[{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}]},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIpAndMakeDerivative\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"licenseTokenIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIpAndMakeDerivativeWithLicenseTokens\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"data\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"multicall\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"uint256\",type:\"uint256\"},{name:\"\",internalType:\"bytes\",type:\"bytes\"}],name:\"onERC721Received\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivData\",internalType:\"struct WorkflowStructs.MakeDerivative\",type:\"tuple\",components:[{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}]},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"sigMetadataAndRegister\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIpAndMakeDerivative\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licenseTokenIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"sigMetadataAndRegister\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIpAndMakeDerivativeWithLicenseTokens\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9e2d496f72C547C2C535B167e06ED8729B374a4f)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9e2d496f72C547C2C535B167e06ED8729B374a4f)\n */var derivativeWorkflowsAddress={1315:\"0x9e2d496f72C547C2C535B167e06ED8729B374a4f\",1514:\"0x9e2d496f72C547C2C535B167e06ED8729B374a4f\"};// DisputeModule\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9b7A9c70AFF961C799110954fc06F3093aeb94C5)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9b7A9c70AFF961C799110954fc06F3093aeb94C5)\n */var disputeModuleAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"ipGraphAcl\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"}],name:\"AccessControlled__NotIpAccount\"},{type:\"error\",inputs:[],name:\"AccessControlled__ZeroAddress\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[],name:\"DisputeModule__CannotBlacklistBaseArbitrationPolicy\"},{type:\"error\",inputs:[],name:\"DisputeModule__DisputeAlreadyPropagated\"},{type:\"error\",inputs:[],name:\"DisputeModule__DisputeWithoutInfringementTag\"},{type:\"error\",inputs:[],name:\"DisputeModule__EvidenceHashAlreadyUsed\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotAbleToResolve\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotAllowedToWhitelist\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotArbitrationRelayer\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotDerivativeOrGroupIp\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotDisputeInitiator\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotInDisputeState\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotRegisteredIpId\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotWhitelistedArbitrationPolicy\"},{type:\"error\",inputs:[],name:\"DisputeModule__NotWhitelistedDisputeTag\"},{type:\"error\",inputs:[],name:\"DisputeModule__RelatedDisputeNotResolved\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroAccessController\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroArbitrationPolicy\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroArbitrationPolicyCooldown\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroDisputeEvidenceHash\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroDisputeTag\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroIPAssetRegistry\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroIPGraphACL\"},{type:\"error\",inputs:[],name:\"DisputeModule__ZeroLicenseRegistry\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"cooldown\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"ArbitrationPolicyCooldownUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\",indexed:false},{name:\"nextArbitrationUpdateTimestamp\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"ArbitrationPolicySet\"},{type:\"event\",anonymous:false,inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\",indexed:false},{name:\"allowed\",internalType:\"bool\",type:\"bool\",indexed:false}],name:\"ArbitrationPolicyWhitelistUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\",indexed:false},{name:\"arbitrationRelayer\",internalType:\"address\",type:\"address\",indexed:false}],name:\"ArbitrationRelayerUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\",indexed:false}],name:\"DefaultArbitrationPolicyUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"data\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"DisputeCancelled\"},{type:\"event\",anonymous:false,inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"decision\",internalType:\"bool\",type:\"bool\",indexed:false},{name:\"data\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"DisputeJudgementSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"targetIpId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"disputeInitiator\",internalType:\"address\",type:\"address\",indexed:false},{name:\"disputeTimestamp\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\",indexed:false},{name:\"disputeEvidenceHash\",internalType:\"bytes32\",type:\"bytes32\",indexed:false},{name:\"targetTag\",internalType:\"bytes32\",type:\"bytes32\",indexed:false},{name:\"data\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"DisputeRaised\"},{type:\"event\",anonymous:false,inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"data\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"DisputeResolved\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"infringingIpId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"ipIdToTag\",internalType:\"address\",type:\"address\",indexed:false},{name:\"infringerDisputeId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"tag\",internalType:\"bytes32\",type:\"bytes32\",indexed:false},{name:\"disputeTimestamp\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"IpTaggedOnRelatedIpInfringement\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"tag\",internalType:\"bytes32\",type:\"bytes32\",indexed:false},{name:\"allowed\",internalType:\"bool\",type:\"bool\",indexed:false}],name:\"TagWhitelistUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUP_IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IGroupIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IN_DISPUTE\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_GRAPH_ACL\",outputs:[{name:\"\",internalType:\"contract IPGraphACL\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"arbitrationPolicies\",outputs:[{name:\"policy\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"arbitrationPolicyCooldown\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\"}],name:\"arbitrationRelayer\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"baseArbitrationPolicy\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"cancelDispute\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"disputeCounter\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"}],name:\"disputes\",outputs:[{name:\"targetIpId\",internalType:\"address\",type:\"address\"},{name:\"disputeInitiator\",internalType:\"address\",type:\"address\"},{name:\"disputeTimestamp\",internalType:\"uint256\",type:\"uint256\"},{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\"},{name:\"disputeEvidenceHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"targetTag\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"currentTag\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"infringerDisputeId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"isIpTagged\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\"}],name:\"isWhitelistedArbitrationPolicy\",outputs:[{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tag\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"isWhitelistedDisputeTag\",outputs:[{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"data\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"multicall\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"nextArbitrationPolicies\",outputs:[{name:\"policy\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"nextArbitrationUpdateTimestamps\",outputs:[{name:\"timestamp\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"targetIpId\",internalType:\"address\",type:\"address\"},{name:\"disputeEvidenceHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"targetTag\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"raiseDispute\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"resolveDispute\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"nextArbitrationPolicy\",internalType:\"address\",type:\"address\"}],name:\"setArbitrationPolicy\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"cooldown\",internalType:\"uint256\",type:\"uint256\"}],name:\"setArbitrationPolicyCooldown\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\"},{name:\"arbPolicyRelayer\",internalType:\"address\",type:\"address\"}],name:\"setArbitrationRelayer\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\"}],name:\"setBaseArbitrationPolicy\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"disputeId\",internalType:\"uint256\",type:\"uint256\"},{name:\"decision\",internalType:\"bool\",type:\"bool\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"setDisputeJudgement\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipIdToTag\",internalType:\"address\",type:\"address\"},{name:\"infringerDisputeId\",internalType:\"uint256\",type:\"uint256\"}],name:\"tagIfRelatedIpInfringed\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"updateActiveArbitrationPolicy\",outputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"arbitrationPolicy\",internalType:\"address\",type:\"address\"},{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],name:\"whitelistArbitrationPolicy\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"tag\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],name:\"whitelistDisputeTag\",outputs:[],stateMutability:\"nonpayable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9b7A9c70AFF961C799110954fc06F3093aeb94C5)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9b7A9c70AFF961C799110954fc06F3093aeb94C5)\n */var disputeModuleAddress={1315:\"0x9b7A9c70AFF961C799110954fc06F3093aeb94C5\",1514:\"0x9b7A9c70AFF961C799110954fc06F3093aeb94C5\"};// ERC20\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E)\n */var erc20Abi=[{type:\"constructor\",inputs:[],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"},{name:\"allowance\",internalType:\"uint256\",type:\"uint256\"},{name:\"needed\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC20InsufficientAllowance\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"},{name:\"balance\",internalType:\"uint256\",type:\"uint256\"},{name:\"needed\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC20InsufficientBalance\"},{type:\"error\",inputs:[{name:\"approver\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidApprover\"},{type:\"error\",inputs:[{name:\"receiver\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidReceiver\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidSender\"},{type:\"error\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidSpender\"},{type:\"event\",anonymous:false,inputs:[{name:\"owner\",internalType:\"address\",type:\"address\",indexed:true},{name:\"spender\",internalType:\"address\",type:\"address\",indexed:true},{name:\"value\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Approval\"},{type:\"event\",anonymous:false,inputs:[{name:\"from\",internalType:\"address\",type:\"address\",indexed:true},{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"value\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Transfer\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"spender\",internalType:\"address\",type:\"address\"}],name:\"allowance\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"}],name:\"approve\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"account\",internalType:\"address\",type:\"address\"}],name:\"balanceOf\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"burn\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"decimals\",outputs:[{name:\"\",internalType:\"uint8\",type:\"uint8\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"mint\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"symbol\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"totalSupply\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"}],name:\"transfer\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"}],name:\"transferFrom\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E)\n */var erc20Address={1315:\"0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E\",1514:\"0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E\"};// GroupingModule\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac)\n */var groupingModuleAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseToken\",internalType:\"address\",type:\"address\"},{name:\"groupNFT\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"},{name:\"disputeModule\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"}],name:\"AccessControlled__NotIpAccount\"},{type:\"error\",inputs:[],name:\"AccessControlled__ZeroAddress\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__CannotAddDisputedIpToGroup\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"childGroupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__CannotAddGroupToGroup\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__DisputedGroupCannotAddIp\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__DisputedGroupCannotClaimReward\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__DisputedGroupCannotCollectRoyalties\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__GroupFrozenDueToAlreadyMintLicenseTokens\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__GroupFrozenDueToHasDerivativeIps\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__GroupIPHasNoLicenseTerms\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__GroupIPLicenseHasNotSpecifyRevenueToken\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"groupRewardPool\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__GroupRewardPoolNotWhitelisted\"},{type:\"error\",inputs:[{name:\"groupNFT\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__InvalidGroupNFT\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"maxAllowedRewardShare\",internalType:\"uint256\",type:\"uint256\"},{name:\"expectGroupRewardShare\",internalType:\"uint256\",type:\"uint256\"}],name:\"GroupingModule__IpExpectedShareExceedsMaxAllowedShare\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"maxAllowedRewardShare\",internalType:\"uint256\",type:\"uint256\"}],name:\"GroupingModule__MaxAllowedRewardShareExceeds100Percent\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"royaltyToken\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__RoyaltyTokenNotWhitelisted\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"groupCurrentToken\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"GroupingModule__TokenNotMatchGroupRevenueToken\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"totalGroupRewardShare\",internalType:\"uint256\",type:\"uint256\"},{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"expectGroupRewardShare\",internalType:\"uint256\",type:\"uint256\"}],name:\"GroupingModule__TotalGroupRewardShareExceeds100Percent\"},{type:\"error\",inputs:[],name:\"GroupingModule__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"GroupingModule__ZeroGroupNFT\"},{type:\"error\",inputs:[],name:\"GroupingModule__ZeroGroupRewardPool\"},{type:\"error\",inputs:[],name:\"GroupingModule__ZeroIpAssetRegistry\"},{type:\"error\",inputs:[],name:\"GroupingModule__ZeroLicenseRegistry\"},{type:\"error\",inputs:[],name:\"GroupingModule__ZeroLicenseToken\"},{type:\"error\",inputs:[],name:\"GroupingModule__ZeroRoyaltyModule\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\",indexed:false}],name:\"AddedIpToGroup\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"token\",internalType:\"address\",type:\"address\",indexed:true},{name:\"ipId\",internalType:\"address[]\",type:\"address[]\",indexed:false},{name:\"amount\",internalType:\"uint256[]\",type:\"uint256[]\",indexed:false}],name:\"ClaimedReward\"},{type:\"event\",anonymous:false,inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"token\",internalType:\"address\",type:\"address\",indexed:true},{name:\"pool\",internalType:\"address\",type:\"address\",indexed:true},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"CollectedRoyaltiesToGroupPool\"},{type:\"event\",anonymous:false,inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"groupPool\",internalType:\"address\",type:\"address\",indexed:true}],name:\"IPGroupRegistered\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\",indexed:false}],name:\"RemovedIpFromGroup\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"DISPUTE_MODULE\",outputs:[{name:\"\",internalType:\"contract IDisputeModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUP_IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IGroupIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUP_NFT\",outputs:[{name:\"\",internalType:\"contract IGroupNFT\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_TOKEN\",outputs:[{name:\"\",internalType:\"contract ILicenseToken\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupIpId\",internalType:\"address\",type:\"address\"},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"maxAllowedRewardShare\",internalType:\"uint256\",type:\"uint256\"}],name:\"addIp\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\"}],name:\"claimReward\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"collectRoyalties\",outputs:[{name:\"royalties\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\"}],name:\"getClaimableReward\",outputs:[{name:\"\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"pure\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupPool\",internalType:\"address\",type:\"address\"}],name:\"registerGroup\",outputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupIpId\",internalType:\"address\",type:\"address\"},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\"}],name:\"removeIp\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"rewardPool\",internalType:\"address\",type:\"address\"},{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],name:\"whitelistGroupRewardPool\",outputs:[],stateMutability:\"nonpayable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac)\n */var groupingModuleAddress={1315:\"0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac\",1514:\"0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac\"};// GroupingWorkflows\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd)\n */var groupingWorkflowsAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"coreMetadataModule\",internalType:\"address\",type:\"address\"},{name:\"groupingModule\",internalType:\"address\",type:\"address\"},{name:\"groupNft\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"pilTemplate\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"}],name:\"GroupingWorkflows__CallerNotSigner\"},{type:\"error\",inputs:[],name:\"GroupingWorkflows__NoLicenseData\"},{type:\"error\",inputs:[],name:\"GroupingWorkflows__ZeroAddressParam\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"PermissionHelper__ModulesAndSelectorsMismatch\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"error\",inputs:[],name:\"Workflow__CallerNotAuthorizedToMint\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"CORE_METADATA_MODULE\",outputs:[{name:\"\",internalType:\"contract ICoreMetadataModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUPING_MODULE\",outputs:[{name:\"\",internalType:\"contract IGroupingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUP_NFT\",outputs:[{name:\"\",internalType:\"contract GroupNFT\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"PIL_TEMPLATE\",outputs:[{name:\"\",internalType:\"contract IPILicenseTemplate\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract RoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupIpId\",internalType:\"address\",type:\"address\"},{name:\"currencyTokens\",internalType:\"address[]\",type:\"address[]\"},{name:\"memberIpIds\",internalType:\"address[]\",type:\"address[]\"}],name:\"collectRoyaltiesAndClaimReward\",outputs:[{name:\"collectedRoyalties\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"maxAllowedRewardShare\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensesData\",internalType:\"struct WorkflowStructs.LicenseData[]\",type:\"tuple[]\",components:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"sigAddToGroup\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIpAndAttachLicenseAndAddToGroup\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"data\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"multicall\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"uint256\",type:\"uint256\"},{name:\"\",internalType:\"bytes\",type:\"bytes\"}],name:\"onERC721Received\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupPool\",internalType:\"address\",type:\"address\"},{name:\"licenseData\",internalType:\"struct WorkflowStructs.LicenseData\",type:\"tuple\",components:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]}],name:\"registerGroupAndAttachLicense\",outputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupPool\",internalType:\"address\",type:\"address\"},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"maxAllowedRewardShare\",internalType:\"uint256\",type:\"uint256\"},{name:\"licenseData\",internalType:\"struct WorkflowStructs.LicenseData\",type:\"tuple\",components:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]}],name:\"registerGroupAndAttachLicenseAndAddIps\",outputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"maxAllowedRewardShare\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensesData\",internalType:\"struct WorkflowStructs.LicenseData[]\",type:\"tuple[]\",components:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"sigMetadataAndAttachAndConfig\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]},{name:\"sigAddToGroup\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIpAndAttachLicenseAndAddToGroup\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd)\n */var groupingWorkflowsAddress={1315:\"0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd\",1514:\"0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd\"};// IPAccountImpl\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x7343646585443F1c3F64E4F08b708788527e1C77)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x7343646585443F1c3F64E4F08b708788527e1C77)\n */var ipAccountImplAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"moduleRegistry\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[],name:\"FnSelectorNotRecognized\"},{type:\"error\",inputs:[],name:\"IPAccountStorage__InvalidBatchLengths\"},{type:\"error\",inputs:[{name:\"module\",internalType:\"address\",type:\"address\"}],name:\"IPAccountStorage__NotRegisteredModule\"},{type:\"error\",inputs:[],name:\"IPAccountStorage__ZeroIpAssetRegistry\"},{type:\"error\",inputs:[],name:\"IPAccountStorage__ZeroLicenseRegistry\"},{type:\"error\",inputs:[],name:\"IPAccountStorage__ZeroModuleRegistry\"},{type:\"error\",inputs:[],name:\"IPAccount__ExpiredSignature\"},{type:\"error\",inputs:[],name:\"IPAccount__InvalidCalldata\"},{type:\"error\",inputs:[],name:\"IPAccount__InvalidOperation\"},{type:\"error\",inputs:[],name:\"IPAccount__InvalidSignature\"},{type:\"error\",inputs:[],name:\"IPAccount__InvalidSigner\"},{type:\"error\",inputs:[],name:\"IPAccount__UUPSUpgradeDisabled\"},{type:\"error\",inputs:[],name:\"IPAccount__ZeroAccessController\"},{type:\"error\",inputs:[],name:\"OperationNotSupported\"},{type:\"error\",inputs:[],name:\"SelfOwnDetected\"},{type:\"error\",inputs:[],name:\"Unauthorized\"},{type:\"error\",inputs:[],name:\"UnauthorizedCallContext\"},{type:\"error\",inputs:[],name:\"UpgradeFailed\"},{type:\"event\",anonymous:false,inputs:[{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"value\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"data\",internalType:\"bytes\",type:\"bytes\",indexed:false},{name:\"nonce\",internalType:\"bytes32\",type:\"bytes32\",indexed:false}],name:\"Executed\"},{type:\"event\",anonymous:false,inputs:[{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"value\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"data\",internalType:\"bytes\",type:\"bytes\",indexed:false},{name:\"nonce\",internalType:\"bytes32\",type:\"bytes32\",indexed:false},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"signer\",internalType:\"address\",type:\"address\",indexed:true},{name:\"signature\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"ExecutedWithSig\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"fallback\",stateMutability:\"payable\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MODULE_REGISTRY\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"bytes32Data\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"bytesData\",outputs:[{name:\"\",internalType:\"bytes\",type:\"bytes\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"eip712Domain\",outputs:[{name:\"fields\",internalType:\"bytes1\",type:\"bytes1\"},{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"version\",internalType:\"string\",type:\"string\"},{name:\"chainId\",internalType:\"uint256\",type:\"uint256\"},{name:\"verifyingContract\",internalType:\"address\",type:\"address\"},{name:\"salt\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"extensions\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"},{name:\"operation\",internalType:\"uint8\",type:\"uint8\"}],name:\"execute\",outputs:[{name:\"result\",internalType:\"bytes\",type:\"bytes\"}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"execute\",outputs:[{name:\"result\",internalType:\"bytes\",type:\"bytes\"}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"calls\",internalType:\"struct ERC6551.Call[]\",type:\"tuple[]\",components:[{name:\"target\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}]},{name:\"operation\",internalType:\"uint8\",type:\"uint8\"}],name:\"executeBatch\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"},{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}],name:\"executeWithSig\",outputs:[{name:\"result\",internalType:\"bytes\",type:\"bytes\"}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"key\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"getBytes\",outputs:[{name:\"\",internalType:\"bytes\",type:\"bytes\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"namespace\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"key\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"getBytes\",outputs:[{name:\"\",internalType:\"bytes\",type:\"bytes\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"namespace\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"key\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"getBytes32\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"key\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"getBytes32\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"namespaces\",internalType:\"bytes32[]\",type:\"bytes32[]\"},{name:\"keys\",internalType:\"bytes32[]\",type:\"bytes32[]\"}],name:\"getBytes32Batch\",outputs:[{name:\"values\",internalType:\"bytes32[]\",type:\"bytes32[]\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"namespaces\",internalType:\"bytes32[]\",type:\"bytes32[]\"},{name:\"keys\",internalType:\"bytes32[]\",type:\"bytes32[]\"}],name:\"getBytesBatch\",outputs:[{name:\"values\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"hash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}],name:\"isValidSignature\",outputs:[{name:\"result\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"isValidSigner\",outputs:[{name:\"result\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"isValidSigner\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"owner\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"key\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"value\",internalType:\"bytes\",type:\"bytes\"}],name:\"setBytes\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"key\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"value\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"setBytes32\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"keys\",internalType:\"bytes32[]\",type:\"bytes32[]\"},{name:\"values\",internalType:\"bytes32[]\",type:\"bytes32[]\"}],name:\"setBytes32Batch\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"keys\",internalType:\"bytes32[]\",type:\"bytes32[]\"},{name:\"values\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"setBytesBatch\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"state\",outputs:[{name:\"result\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"token\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"},{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"receive\",stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x7343646585443F1c3F64E4F08b708788527e1C77)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x7343646585443F1c3F64E4F08b708788527e1C77)\n */var ipAccountImplAddress={1315:\"0x7343646585443F1c3F64E4F08b708788527e1C77\",1514:\"0x7343646585443F1c3F64E4F08b708788527e1C77\"};// IPAssetRegistry\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x77319B4031e6eF1250907aa00018B8B1c67a244b)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x77319B4031e6eF1250907aa00018B8B1c67a244b)\n */var ipAssetRegistryAbi=[{type:\"constructor\",inputs:[{name:\"erc6551Registry\",internalType:\"address\",type:\"address\"},{name:\"ipAccountImpl\",internalType:\"address\",type:\"address\"},{name:\"groupingModule\",internalType:\"address\",type:\"address\"},{name:\"ipAccountImplBeacon\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"GroupIPAssetRegistry__CallerIsNotGroupingModule\"},{type:\"error\",inputs:[{name:\"groupPool\",internalType:\"address\",type:\"address\"}],name:\"GroupIPAssetRegistry__GroupRewardPoolNotRegistered\"},{type:\"error\",inputs:[{name:\"groupSize\",internalType:\"uint256\",type:\"uint256\"},{name:\"limit\",internalType:\"uint256\",type:\"uint256\"}],name:\"GroupIPAssetRegistry__GroupSizeExceedsLimit\"},{type:\"error\",inputs:[{name:\"rewardPool\",internalType:\"address\",type:\"address\"}],name:\"GroupIPAssetRegistry__InvalidGroupRewardPool\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"GroupIPAssetRegistry__NotRegisteredGroupIP\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"GroupIPAssetRegistry__NotRegisteredIP\"},{type:\"error\",inputs:[{name:\"pageSize\",internalType:\"uint256\",type:\"uint256\"},{name:\"limit\",internalType:\"uint256\",type:\"uint256\"}],name:\"GroupIPAssetRegistry__PageSizeExceedsLimit\"},{type:\"error\",inputs:[],name:\"IPAccountRegistry_ZeroERC6551Registry\"},{type:\"error\",inputs:[],name:\"IPAccountRegistry_ZeroIpAccountImpl\"},{type:\"error\",inputs:[],name:\"IPAccountRegistry_ZeroIpAccountImplBeacon\"},{type:\"error\",inputs:[{name:\"contractAddress\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"IPAssetRegistry__InvalidToken\"},{type:\"error\",inputs:[{name:\"contractAddress\",internalType:\"address\",type:\"address\"}],name:\"IPAssetRegistry__UnsupportedIERC721\"},{type:\"error\",inputs:[{name:\"contractAddress\",internalType:\"address\",type:\"address\"}],name:\"IPAssetRegistry__UnsupportedIERC721Metadata\"},{type:\"error\",inputs:[],name:\"IPAssetRegistry__ZeroAccessManager\"},{type:\"error\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"}],name:\"IPAssetRegistry__ZeroAddress\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"error\",inputs:[{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"length\",internalType:\"uint256\",type:\"uint256\"}],name:\"StringsInsufficientHexLength\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:true},{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true},{name:\"chainId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"tokenContract\",internalType:\"address\",type:\"address\",indexed:false},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"IPAccountRegistered\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"chainId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"tokenContract\",internalType:\"address\",type:\"address\",indexed:true},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"name\",internalType:\"string\",type:\"string\",indexed:false},{name:\"uri\",internalType:\"string\",type:\"string\",indexed:false},{name:\"registrationDate\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"IPRegistered\"},{type:\"event\",anonymous:false,inputs:[{name:\"payer\",internalType:\"address\",type:\"address\",indexed:true},{name:\"treasury\",internalType:\"address\",type:\"address\",indexed:true},{name:\"feeToken\",internalType:\"address\",type:\"address\",indexed:true},{name:\"amount\",internalType:\"uint96\",type:\"uint96\",indexed:false}],name:\"IPRegistrationFeePaid\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"treasury\",internalType:\"address\",type:\"address\",indexed:true},{name:\"feeToken\",internalType:\"address\",type:\"address\",indexed:true},{name:\"feeAmount\",internalType:\"uint96\",type:\"uint96\",indexed:false}],name:\"RegistrationFeeSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ERC6551_PUBLIC_REGISTRY\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUPING_MODULE\",outputs:[{name:\"\",internalType:\"contract IGroupingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ACCOUNT_IMPL\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ACCOUNT_IMPL_UPGRADEABLE_BEACON\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ACCOUNT_SALT\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MAX_GROUP_SIZE\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\"}],name:\"addGroupMember\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"containsIp\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getFeeAmount\",outputs:[{name:\"\",internalType:\"uint96\",type:\"uint96\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getFeeToken\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"startIndex\",internalType:\"uint256\",type:\"uint256\"},{name:\"size\",internalType:\"uint256\",type:\"uint256\"}],name:\"getGroupMembers\",outputs:[{name:\"results\",internalType:\"address[]\",type:\"address[]\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"getGroupRewardPool\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getIPAccountImpl\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getTreasury\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"chainId\",internalType:\"uint256\",type:\"uint256\"},{name:\"tokenContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ipAccount\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"chainId\",internalType:\"uint256\",type:\"uint256\"},{name:\"tokenContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ipId\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"id\",internalType:\"address\",type:\"address\"}],name:\"isRegistered\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"isRegisteredGroup\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"rewardPool\",internalType:\"address\",type:\"address\"}],name:\"isWhitelistedGroupRewardPool\",outputs:[{name:\"isWhitelisted\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"chainid\",internalType:\"uint256\",type:\"uint256\"},{name:\"tokenContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"register\",outputs:[{name:\"id\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupNft\",internalType:\"address\",type:\"address\"},{name:\"groupNftId\",internalType:\"uint256\",type:\"uint256\"},{name:\"rewardPool\",internalType:\"address\",type:\"address\"},{name:\"registerFeePayer\",internalType:\"address\",type:\"address\"}],name:\"registerGroup\",outputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"ipIds\",internalType:\"address[]\",type:\"address[]\"}],name:\"removeGroupMember\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"treasury\",internalType:\"address\",type:\"address\"},{name:\"feeToken\",internalType:\"address\",type:\"address\"},{name:\"feeAmount\",internalType:\"uint96\",type:\"uint96\"}],name:\"setRegistrationFee\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"totalMembers\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"totalSupply\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newIpAccountImpl\",internalType:\"address\",type:\"address\"}],name:\"upgradeIPAccountImpl\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"rewardPool\",internalType:\"address\",type:\"address\"},{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],name:\"whitelistGroupRewardPool\",outputs:[],stateMutability:\"nonpayable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x77319B4031e6eF1250907aa00018B8B1c67a244b)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x77319B4031e6eF1250907aa00018B8B1c67a244b)\n */var ipAssetRegistryAddress={1315:\"0x77319B4031e6eF1250907aa00018B8B1c67a244b\",1514:\"0x77319B4031e6eF1250907aa00018B8B1c67a244b\"};// IpRoyaltyVaultImpl\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x73e2D097F71e5103824abB6562362106A8955AEc)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x63cC7611316880213f3A4Ba9bD72b0EaA2010298)\n */var ipRoyaltyVaultImplAbi=[{type:\"constructor\",inputs:[{name:\"disputeModule\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"groupingModule\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"},{name:\"allowance\",internalType:\"uint256\",type:\"uint256\"},{name:\"needed\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC20InsufficientAllowance\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"},{name:\"balance\",internalType:\"uint256\",type:\"uint256\"},{name:\"needed\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC20InsufficientBalance\"},{type:\"error\",inputs:[{name:\"approver\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidApprover\"},{type:\"error\",inputs:[{name:\"receiver\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidReceiver\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidSender\"},{type:\"error\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidSpender\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__EnforcedPause\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__GroupPoolMustClaimViaGroupingModule\"},{type:\"error\",inputs:[{name:\"vault\",internalType:\"address\",type:\"address\"},{name:\"account\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"IpRoyaltyVault__InsufficientBalance\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__InvalidTargetIpId\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__NegativeValueUnsafeCastingToUint256\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__NoClaimableTokens\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__NotAllowedToAddTokenToVault\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__NotWhitelistedRoyaltyToken\"},{type:\"error\",inputs:[{name:\"vault\",internalType:\"address\",type:\"address\"},{name:\"from\",internalType:\"address\",type:\"address\"}],name:\"IpRoyaltyVault__SameFromToAddress\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__VaultDoesNotBelongToAnAncestor\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__VaultsMustClaimAsSelf\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__ZeroAmount\"},{type:\"error\",inputs:[{name:\"vault\",internalType:\"address\",type:\"address\"},{name:\"account\",internalType:\"address\",type:\"address\"}],name:\"IpRoyaltyVault__ZeroBalance\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__ZeroDisputeModule\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__ZeroGroupingModule\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__ZeroIpAssetRegistry\"},{type:\"error\",inputs:[],name:\"IpRoyaltyVault__ZeroRoyaltyModule\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"event\",anonymous:false,inputs:[{name:\"owner\",internalType:\"address\",type:\"address\",indexed:true},{name:\"spender\",internalType:\"address\",type:\"address\",indexed:true},{name:\"value\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Approval\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"claimer\",internalType:\"address\",type:\"address\",indexed:false},{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"revenueDebt\",internalType:\"int256\",type:\"int256\",indexed:false}],name:\"RevenueDebtUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"RevenueTokenAddedToVault\"},{type:\"event\",anonymous:false,inputs:[{name:\"claimer\",internalType:\"address\",type:\"address\",indexed:false},{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"RevenueTokenClaimed\"},{type:\"event\",anonymous:false,inputs:[{name:\"from\",internalType:\"address\",type:\"address\",indexed:true},{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"value\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Transfer\"},{type:\"function\",inputs:[],name:\"DISPUTE_MODULE\",outputs:[{name:\"\",internalType:\"contract IDisputeModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUPING_MODULE\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IGroupIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"spender\",internalType:\"address\",type:\"address\"}],name:\"allowance\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"}],name:\"approve\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"account\",internalType:\"address\",type:\"address\"}],name:\"balanceOf\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenList\",internalType:\"address[]\",type:\"address[]\"},{name:\"targetIpId\",internalType:\"address\",type:\"address\"}],name:\"claimByTokenBatchAsSelf\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"claimer\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"claimRevenueOnBehalf\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"claimer\",internalType:\"address\",type:\"address\"},{name:\"tokenList\",internalType:\"address[]\",type:\"address[]\"}],name:\"claimRevenueOnBehalfByTokenBatch\",outputs:[{name:\"\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"claimer\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"claimableRevenue\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"claimer\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"claimerRevenueDebt\",outputs:[{name:\"\",internalType:\"int256\",type:\"int256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"decimals\",outputs:[{name:\"\",internalType:\"uint8\",type:\"uint8\"}],stateMutability:\"pure\"},{type:\"function\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"symbol\",internalType:\"string\",type:\"string\"},{name:\"supply\",internalType:\"uint32\",type:\"uint32\"},{name:\"ipIdAddress\",internalType:\"address\",type:\"address\"},{name:\"rtReceiver\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"ipId\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"symbol\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"tokens\",outputs:[{name:\"\",internalType:\"address[]\",type:\"address[]\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"totalSupply\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"}],name:\"transfer\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"}],name:\"transferFrom\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"updateVaultBalance\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"vaultAccBalances\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x73e2D097F71e5103824abB6562362106A8955AEc)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x63cC7611316880213f3A4Ba9bD72b0EaA2010298)\n */var ipRoyaltyVaultImplAddress={1315:\"0x73e2D097F71e5103824abB6562362106A8955AEc\",1514:\"0x63cC7611316880213f3A4Ba9bD72b0EaA2010298\"};// LicenseAttachmentWorkflows\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8)\n */var licenseAttachmentWorkflowsAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"coreMetadataModule\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"pilTemplate\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"}],name:\"LicenseAttachmentWorkflows__CallerNotSigner\"},{type:\"error\",inputs:[],name:\"LicenseAttachmentWorkflows__NoLicenseTermsData\"},{type:\"error\",inputs:[],name:\"LicenseAttachmentWorkflows__ZeroAddressParam\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"PermissionHelper__ModulesAndSelectorsMismatch\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"error\",inputs:[],name:\"Workflow__CallerNotAuthorizedToMint\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"CORE_METADATA_MODULE\",outputs:[{name:\"\",internalType:\"contract ICoreMetadataModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"PIL_TEMPLATE\",outputs:[{name:\"\",internalType:\"contract IPILicenseTemplate\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIpAndAttachDefaultTerms\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"licenseTermsData\",internalType:\"struct WorkflowStructs.LicenseTermsData[]\",type:\"tuple[]\",components:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIpAndAttachPILTerms\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"data\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"multicall\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"uint256\",type:\"uint256\"},{name:\"\",internalType:\"bytes\",type:\"bytes\"}],name:\"onERC721Received\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"sigMetadataAndDefaultTerms\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIpAndAttachDefaultTerms\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"licenseTermsData\",internalType:\"struct WorkflowStructs.LicenseTermsData[]\",type:\"tuple[]\",components:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]},{name:\"sigMetadataAndAttachAndConfig\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIpAndAttachPILTerms\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsData\",internalType:\"struct WorkflowStructs.LicenseTermsData[]\",type:\"tuple[]\",components:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]},{name:\"sigAttachAndConfig\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerPILTermsAndAttach\",outputs:[{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8)\n */var licenseAttachmentWorkflowsAddress={1315:\"0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8\",1514:\"0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8\"};// LicenseRegistry\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x529a750E02d8E2f15649c13D69a465286a780e24)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x529a750E02d8E2f15649c13D69a465286a780e24)\n */var licenseRegistryAbi=[{type:\"constructor\",inputs:[{name:\"groupIpAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"disputeModule\",internalType:\"address\",type:\"address\"},{name:\"ipGraphAcl\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"}],name:\"LicenseRegistry__AddParentIpToIPGraphFailed\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__CallFailed\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__CallerNotLicensingModule\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__CannotAddIpWithExpirationToGroup\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__DerivativeAlreadyRegistered\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__DerivativeIpAlreadyHasChild\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__DerivativeIpAlreadyHasLicense\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__DerivativeIsParent\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"parentIpId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__DuplicateParentIp\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__EmptyGroupCannotMintLicenseToken\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__GroupCannotHasParentIp\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__GroupIpAlreadyHasLicenseTerms\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"ipCommercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"groupCommercialRevShare\",internalType:\"uint32\",type:\"uint32\"}],name:\"LicenseRegistry__GroupIpCommercialRevShareConfigMustNotLessThanIp\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__GroupMustBeSoleParent\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"index\",internalType:\"uint256\",type:\"uint256\"},{name:\"length\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__IndexOutOfBounds\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"},{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"groupRewardPool\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__IpExpectGroupRewardPoolNotMatch\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__IpExpectGroupRewardPoolNotSet\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__IpExpired\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__IpHasNoGroupLicenseTerms\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__IpLicenseDisabled\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"groupHookData\",internalType:\"bytes\",type:\"bytes\"}],name:\"LicenseRegistry__IpLicensingHookDataNotMatchWithGroup\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"groupLicensingHook\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__IpLicensingHookNotMatchWithGroup\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"groupMintingFee\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__IpMintingFeeNotMatchWithGroup\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__LicenseTermsAlreadyAttached\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__LicenseTermsCannotAttachToGroupIp\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__LicenseTermsNotExists\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__LicensorIpHasNoLicenseTerms\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__NotLicenseTemplate\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__ParentIpExpired\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__ParentIpHasNoLicenseTerms\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__ParentIpIsEmptyGroup\"},{type:\"error\",inputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__ParentIpNotRegistered\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__ParentIpTagged\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__ParentIpUnmatchedLicenseTemplate\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"ancestors\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxAncestors\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__TooManyAncestors\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"parents\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxParents\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseRegistry__TooManyParents\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"newLicenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__UnmatchedLicenseTemplate\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__UnregisteredLicenseTemplate\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__ZeroDisputeModule\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__ZeroGroupIpRegistry\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__ZeroIPGraphACL\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__ZeroLicenseTemplate\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__ZeroLicensingModule\"},{type:\"error\",inputs:[],name:\"LicensingModule__DerivativesCannotAddLicenseTerms\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__LicenseTermsNotFound\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__CallFailed\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:false},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"DefaultLicenseTermsSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"expireTime\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"ExpirationTimeSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:true}],name:\"LicenseTemplateRegistered\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}],indexed:false}],name:\"LicensingConfigSetForLicense\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"DISPUTE_MODULE\",outputs:[{name:\"\",internalType:\"contract IDisputeModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"EXPIRATION_TIME\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUP_IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IGroupIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_GRAPH\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_GRAPH_ACL\",outputs:[{name:\"\",internalType:\"contract IPGraphACL\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MAX_ANCESTORS\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MAX_PARENTS\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"attachLicenseTermsToIp\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"exists\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"getAncestorsCount\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"index\",internalType:\"uint256\",type:\"uint256\"}],name:\"getAttachedLicenseTerms\",outputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"getAttachedLicenseTermsCount\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getDefaultLicenseTerms\",outputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"},{name:\"index\",internalType:\"uint256\",type:\"uint256\"}],name:\"getDerivativeIp\",outputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"}],name:\"getDerivativeIpCount\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"getExpireTime\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getLicensingConfig\",outputs:[{name:\"\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"index\",internalType:\"uint256\",type:\"uint256\"}],name:\"getParentIp\",outputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"getParentIpCount\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"parentIpId\",internalType:\"address\",type:\"address\"}],name:\"getParentLicenseTerms\",outputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getRoyaltyPercent\",outputs:[{name:\"royaltyPercent\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"}],name:\"hasDerivativeIps\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"hasIpAttachedLicenseTerms\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"initializeLicenseTemplate\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"isDefaultLicense\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"isDerivativeIp\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"isExpiredNow\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"},{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"isParentIp\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"isRegisteredLicenseTemplate\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"isUsingLicenseToken\",internalType:\"bool\",type:\"bool\"}],name:\"registerDerivativeIp\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"registerLicenseTemplate\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newLicenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"newLicenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"setDefaultLicenseTerms\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}],name:\"setLicensingConfigForLicense\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"groupRewardPool\",internalType:\"address\",type:\"address\"},{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"groupLicenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"groupLicenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"verifyGroupAddIp\",outputs:[{name:\"ipLicensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"isMintedByIpOwner\",internalType:\"bool\",type:\"bool\"}],name:\"verifyMintLicenseToken\",outputs:[{name:\"\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}],stateMutability:\"view\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x529a750E02d8E2f15649c13D69a465286a780e24)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x529a750E02d8E2f15649c13D69a465286a780e24)\n */var licenseRegistryAddress={1315:\"0x529a750E02d8E2f15649c13D69a465286a780e24\",1514:\"0x529a750E02d8E2f15649c13D69a465286a780e24\"};// LicenseToken\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC)\n */var licenseTokenAbi=[{type:\"constructor\",inputs:[{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"disputeModule\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"ERC721EnumerableForbiddenBatchMint\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"ERC721IncorrectOwner\"},{type:\"error\",inputs:[{name:\"operator\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC721InsufficientApproval\"},{type:\"error\",inputs:[{name:\"approver\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidApprover\"},{type:\"error\",inputs:[{name:\"operator\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidOperator\"},{type:\"error\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidOwner\"},{type:\"error\",inputs:[{name:\"receiver\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidReceiver\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidSender\"},{type:\"error\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC721NonexistentToken\"},{type:\"error\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"index\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC721OutOfBoundsIndex\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"anotherLicenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"LicenseToken__AllLicenseTokensMustFromSameLicenseTemplate\"},{type:\"error\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"childIpIp\",internalType:\"address\",type:\"address\"},{name:\"actualTokenOwner\",internalType:\"address\",type:\"address\"}],name:\"LicenseToken__CallerAndChildIPNotTokenOwner\"},{type:\"error\",inputs:[],name:\"LicenseToken__CallerNotLicensingModule\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"LicenseToken__ChildIPAlreadyHasBeenMintedLicenseTokens\"},{type:\"error\",inputs:[{name:\"commercialRevenueShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseToken__CommercialRevenueShareExceedMaxRevenueShare\"},{type:\"error\",inputs:[{name:\"invalidRoyaltyPercent\",internalType:\"uint32\",type:\"uint32\"},{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseToken__InvalidRoyaltyPercent\"},{type:\"error\",inputs:[],name:\"LicenseToken__NotTransferable\"},{type:\"error\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicenseToken__RevokedLicense\"},{type:\"error\",inputs:[],name:\"LicenseToken__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"length\",internalType:\"uint256\",type:\"uint256\"}],name:\"StringsInsufficientHexLength\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"owner\",internalType:\"address\",type:\"address\",indexed:true},{name:\"approved\",internalType:\"address\",type:\"address\",indexed:true},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:true}],name:\"Approval\"},{type:\"event\",anonymous:false,inputs:[{name:\"owner\",internalType:\"address\",type:\"address\",indexed:true},{name:\"operator\",internalType:\"address\",type:\"address\",indexed:true},{name:\"approved\",internalType:\"bool\",type:\"bool\",indexed:false}],name:\"ApprovalForAll\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"_fromTokenId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"_toTokenId\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"BatchMetadataUpdate\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"minter\",internalType:\"address\",type:\"address\",indexed:true},{name:\"receiver\",internalType:\"address\",type:\"address\",indexed:true},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:true}],name:\"LicenseTokenMinted\"},{type:\"event\",anonymous:false,inputs:[{name:\"from\",internalType:\"address\",type:\"address\",indexed:true},{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:true}],name:\"Transfer\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"DISPUTE_MODULE\",outputs:[{name:\"\",internalType:\"contract IDisputeModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MAX_COMMERCIAL_REVENUE_SHARE\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"approve\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"balanceOf\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"holder\",internalType:\"address\",type:\"address\"},{name:\"tokenIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],name:\"burnLicenseTokens\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getApproved\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getLicenseTemplate\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getLicenseTermsId\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getLicenseTokenMetadata\",outputs:[{name:\"\",internalType:\"struct ILicenseToken.LicenseTokenMetadata\",type:\"tuple\",components:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"}]}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getLicensorIpId\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"}],name:\"getTotalTokensByLicensor\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"},{name:\"imageUrl\",internalType:\"string\",type:\"string\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"operator\",internalType:\"address\",type:\"address\"}],name:\"isApprovedForAll\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"isLicenseTokenRevoked\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"},{name:\"minter\",internalType:\"address\",type:\"address\"},{name:\"receiver\",internalType:\"address\",type:\"address\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}],name:\"mintLicenseTokens\",outputs:[{name:\"startLicenseTokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ownerOf\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"safeTransferFrom\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"safeTransferFrom\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"operator\",internalType:\"address\",type:\"address\"},{name:\"approved\",internalType:\"bool\",type:\"bool\"}],name:\"setApprovalForAll\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"url\",internalType:\"string\",type:\"string\"}],name:\"setLicensingImageUrl\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"symbol\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"index\",internalType:\"uint256\",type:\"uint256\"}],name:\"tokenByIndex\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"index\",internalType:\"uint256\",type:\"uint256\"}],name:\"tokenOfOwnerByIndex\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"id\",internalType:\"uint256\",type:\"uint256\"}],name:\"tokenURI\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"totalMintedTokens\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"totalSupply\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"transferFrom\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"tokenIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],name:\"validateLicenseTokensForDerivative\",outputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licensorIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"commercialRevShares\",internalType:\"uint32[]\",type:\"uint32[]\"}],stateMutability:\"view\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC)\n */var licenseTokenAddress={1315:\"0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC\",1514:\"0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC\"};// LicensingModule\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f)\n */var licensingModuleAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"ipAccountRegistry\",internalType:\"address\",type:\"address\"},{name:\"moduleRegistry\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"disputeModule\",internalType:\"address\",type:\"address\"},{name:\"licenseToken\",internalType:\"address\",type:\"address\"},{name:\"ipGraphAcl\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"}],name:\"AccessControlled__NotIpAccount\"},{type:\"error\",inputs:[],name:\"AccessControlled__ZeroAddress\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"LicenseRegistry__LicenseTemplateCannotBeZeroAddress\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"}],name:\"LicenseRegistry__UnregisteredLicenseTemplate\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"newRoyaltyPercent\",internalType:\"uint32\",type:\"uint32\"}],name:\"LicensingModule__CurrentLicenseNotAllowOverrideRoyaltyPercent\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__DerivativeAlreadyHasBeenMintedLicenseTokens\"},{type:\"error\",inputs:[],name:\"LicensingModule__DisputedIpId\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"revenueShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}],name:\"LicensingModule__ExceedMaxRevenueShare\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__GroupIpCannotChangeHookData\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__GroupIpCannotChangeIsSet\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__GroupIpCannotChangeLicensingHook\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__GroupIpCannotChangeMintingFee\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"newRoyaltyPercent\",internalType:\"uint32\",type:\"uint32\"},{name:\"oldRoyaltyPercent\",internalType:\"uint32\",type:\"uint32\"}],name:\"LicensingModule__GroupIpCannotDecreaseRoyalty\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__GroupIpCannotSetExpectGroupRewardPool\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__InvalidLicenseTermsId\"},{type:\"error\",inputs:[{name:\"hook\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__InvalidLicensingHook\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensorIpId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__LicenseDenyMintLicenseToken\"},{type:\"error\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__LicenseDisabled\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__LicenseNotCompatibleForDerivative\"},{type:\"error\",inputs:[{name:\"ipLength\",internalType:\"uint256\",type:\"uint256\"},{name:\"licenseTermsLength\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__LicenseTermsLengthMismatch\"},{type:\"error\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTokenIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],name:\"LicensingModule__LicenseTokenNotCompatibleForDerivative\"},{type:\"error\",inputs:[{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingConfigMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licenseTermsMintingFee\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__LicensingConfigMintingFeeBelowLicenseTerms\"},{type:\"error\",inputs:[{name:\"licensingHookMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licenseTermsMintingFee\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__LicensingHookMintingFeeBelowLicenseTerms\"},{type:\"error\",inputs:[],name:\"LicensingModule__LicensorIpNotRegistered\"},{type:\"error\",inputs:[],name:\"LicensingModule__MintAmountZero\"},{type:\"error\",inputs:[{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxMintingFee\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__MintingFeeExceedMaxMintingFee\"},{type:\"error\",inputs:[],name:\"LicensingModule__MintingFeeRequiresRoyaltyPolicy\"},{type:\"error\",inputs:[],name:\"LicensingModule__NoLicenseToken\"},{type:\"error\",inputs:[],name:\"LicensingModule__NoParentIp\"},{type:\"error\",inputs:[],name:\"LicensingModule__ReceiverZeroAddress\"},{type:\"error\",inputs:[{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"anotherRoyaltyPolicy\",internalType:\"address\",type:\"address\"}],name:\"LicensingModule__RoyaltyPolicyMismatch\"},{type:\"error\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"ancestors\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxAncestors\",internalType:\"uint256\",type:\"uint256\"}],name:\"LicensingModule__TooManyAncestorsForMintingLicenseTokenAllowRegisterDerivative\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroDisputeModule\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroIPGraphACL\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroLicenseRegistry\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroLicenseTemplate\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroLicenseToken\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroModuleRegistry\"},{type:\"error\",inputs:[],name:\"LicensingModule__ZeroRoyaltyModule\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"caller\",internalType:\"address\",type:\"address\",indexed:true},{name:\"childIpId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTokenIds\",internalType:\"uint256[]\",type:\"uint256[]\",indexed:false},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\",indexed:false},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\",indexed:false},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:false}],name:\"DerivativeRegistered\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"caller\",internalType:\"address\",type:\"address\",indexed:true},{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:false},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"LicenseTermsAttached\"},{type:\"event\",anonymous:false,inputs:[{name:\"caller\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licensorIpId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:false},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"receiver\",internalType:\"address\",type:\"address\",indexed:false},{name:\"startLicenseTokenId\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"LicenseTokensMinted\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"DISPUTE_MODULE\",outputs:[{name:\"\",internalType:\"contract IDisputeModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_GRAPH_ACL\",outputs:[{name:\"\",internalType:\"contract IPGraphACL\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_NFT\",outputs:[{name:\"\",internalType:\"contract ILicenseToken\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MODULE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IModuleRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract RoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"attachDefaultLicenseTerms\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"attachLicenseTerms\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"},{name:\"receiver\",internalType:\"address\",type:\"address\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}],name:\"mintLicenseTokens\",outputs:[{name:\"startLicenseTokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"},{name:\"receiver\",internalType:\"address\",type:\"address\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"}],name:\"predictMintingLicenseFee\",outputs:[{name:\"currencyToken\",internalType:\"address\",type:\"address\"},{name:\"tokenAmount\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}],name:\"registerDerivative\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTokenIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"}],name:\"registerDerivativeWithLicenseTokens\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}],name:\"setLicensingConfig\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f)\n */var licensingModuleAddress={1315:\"0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f\",1514:\"0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f\"};// ModuleRegistry\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5)\n */var moduleRegistryAbi=[{type:\"constructor\",inputs:[],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__InterfaceIdZero\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleAddressNotContract\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleAddressZeroAddress\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleAlreadyRegistered\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleNotRegistered\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleTypeAlreadyRegistered\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleTypeEmptyString\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ModuleTypeNotRegistered\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__NameAlreadyRegistered\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__NameDoesNotMatch\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__NameEmptyString\"},{type:\"error\",inputs:[],name:\"ModuleRegistry__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"name\",internalType:\"string\",type:\"string\",indexed:false},{name:\"module\",internalType:\"address\",type:\"address\",indexed:true},{name:\"moduleTypeInterfaceId\",internalType:\"bytes4\",type:\"bytes4\",indexed:true},{name:\"moduleType\",internalType:\"string\",type:\"string\",indexed:false}],name:\"ModuleAdded\"},{type:\"event\",anonymous:false,inputs:[{name:\"name\",internalType:\"string\",type:\"string\",indexed:false},{name:\"module\",internalType:\"address\",type:\"address\",indexed:true}],name:\"ModuleRemoved\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"}],name:\"getModule\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"moduleAddress\",internalType:\"address\",type:\"address\"}],name:\"getModuleType\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"moduleType\",internalType:\"string\",type:\"string\"}],name:\"getModuleTypeInterfaceId\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"moduleAddress\",internalType:\"address\",type:\"address\"}],name:\"isRegistered\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"moduleAddress\",internalType:\"address\",type:\"address\"}],name:\"registerModule\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"moduleAddress\",internalType:\"address\",type:\"address\"},{name:\"moduleType\",internalType:\"string\",type:\"string\"}],name:\"registerModule\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"registerModuleType\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"}],name:\"removeModule\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"name\",internalType:\"string\",type:\"string\"}],name:\"removeModuleType\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5)\n */var moduleRegistryAddress={1315:\"0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5\",1514:\"0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5\"};// Multicall3\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xca11bde05977b3631167028862be2a173976ca11)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xca11bde05977b3631167028862be2a173976ca11)\n */var multicall3Abi=[{type:\"function\",inputs:[{name:\"calls\",internalType:\"struct Multicall3.Call[]\",type:\"tuple[]\",components:[{name:\"target\",internalType:\"address\",type:\"address\"},{name:\"callData\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"aggregate\",outputs:[{name:\"blockNumber\",internalType:\"uint256\",type:\"uint256\"},{name:\"returnData\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"calls\",internalType:\"struct Multicall3.Call3[]\",type:\"tuple[]\",components:[{name:\"target\",internalType:\"address\",type:\"address\"},{name:\"allowFailure\",internalType:\"bool\",type:\"bool\"},{name:\"callData\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"aggregate3\",outputs:[{name:\"returnData\",internalType:\"struct Multicall3.Result[]\",type:\"tuple[]\",components:[{name:\"success\",internalType:\"bool\",type:\"bool\"},{name:\"returnData\",internalType:\"bytes\",type:\"bytes\"}]}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"calls\",internalType:\"struct Multicall3.Call3Value[]\",type:\"tuple[]\",components:[{name:\"target\",internalType:\"address\",type:\"address\"},{name:\"allowFailure\",internalType:\"bool\",type:\"bool\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"callData\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"aggregate3Value\",outputs:[{name:\"returnData\",internalType:\"struct Multicall3.Result[]\",type:\"tuple[]\",components:[{name:\"success\",internalType:\"bool\",type:\"bool\"},{name:\"returnData\",internalType:\"bytes\",type:\"bytes\"}]}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"calls\",internalType:\"struct Multicall3.Call[]\",type:\"tuple[]\",components:[{name:\"target\",internalType:\"address\",type:\"address\"},{name:\"callData\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"blockAndAggregate\",outputs:[{name:\"blockNumber\",internalType:\"uint256\",type:\"uint256\"},{name:\"blockHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"returnData\",internalType:\"struct Multicall3.Result[]\",type:\"tuple[]\",components:[{name:\"success\",internalType:\"bool\",type:\"bool\"},{name:\"returnData\",internalType:\"bytes\",type:\"bytes\"}]}],stateMutability:\"payable\"},{type:\"function\",inputs:[],name:\"getBasefee\",outputs:[{name:\"basefee\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"blockNumber\",internalType:\"uint256\",type:\"uint256\"}],name:\"getBlockHash\",outputs:[{name:\"blockHash\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getBlockNumber\",outputs:[{name:\"blockNumber\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getChainId\",outputs:[{name:\"chainid\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getCurrentBlockCoinbase\",outputs:[{name:\"coinbase\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getCurrentBlockDifficulty\",outputs:[{name:\"difficulty\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getCurrentBlockGasLimit\",outputs:[{name:\"gaslimit\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getCurrentBlockTimestamp\",outputs:[{name:\"timestamp\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"addr\",internalType:\"address\",type:\"address\"}],name:\"getEthBalance\",outputs:[{name:\"balance\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getLastBlockHash\",outputs:[{name:\"blockHash\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"requireSuccess\",internalType:\"bool\",type:\"bool\"},{name:\"calls\",internalType:\"struct Multicall3.Call[]\",type:\"tuple[]\",components:[{name:\"target\",internalType:\"address\",type:\"address\"},{name:\"callData\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"tryAggregate\",outputs:[{name:\"returnData\",internalType:\"struct Multicall3.Result[]\",type:\"tuple[]\",components:[{name:\"success\",internalType:\"bool\",type:\"bool\"},{name:\"returnData\",internalType:\"bytes\",type:\"bytes\"}]}],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"requireSuccess\",internalType:\"bool\",type:\"bool\"},{name:\"calls\",internalType:\"struct Multicall3.Call[]\",type:\"tuple[]\",components:[{name:\"target\",internalType:\"address\",type:\"address\"},{name:\"callData\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"tryBlockAndAggregate\",outputs:[{name:\"blockNumber\",internalType:\"uint256\",type:\"uint256\"},{name:\"blockHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"returnData\",internalType:\"struct Multicall3.Result[]\",type:\"tuple[]\",components:[{name:\"success\",internalType:\"bool\",type:\"bool\"},{name:\"returnData\",internalType:\"bytes\",type:\"bytes\"}]}],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xca11bde05977b3631167028862be2a173976ca11)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xca11bde05977b3631167028862be2a173976ca11)\n */var multicall3Address={1315:\"0xcA11bde05977b3631167028862bE2a173976CA11\",1514:\"0xcA11bde05977b3631167028862bE2a173976CA11\"};// PILicenseTemplate\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316)\n */var piLicenseTemplateAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"ipAccountRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"},{name:\"moduleRegistry\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"}],name:\"AccessControlled__NotIpAccount\"},{type:\"error\",inputs:[],name:\"AccessControlled__ZeroAddress\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CommercialDisabled_CantAddAttribution\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CommercialDisabled_CantAddCommercializers\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CommercialDisabled_CantAddDerivativeRevCeiling\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CommercialDisabled_CantAddRevCeiling\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CommercialDisabled_CantAddRevShare\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CommercialDisabled_CantAddRoyaltyPolicy\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CommercialEnabled_RoyaltyPolicyRequired\"},{type:\"error\",inputs:[{name:\"checker\",internalType:\"address\",type:\"address\"}],name:\"PILicenseTemplate__CommercializerCheckerDoesNotSupportHook\"},{type:\"error\",inputs:[{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"}],name:\"PILicenseTemplate__CommercializerCheckerNotRegistered\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__CurrencyTokenNotWhitelisted\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__DerivativesDisabled_CantAddApproval\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__DerivativesDisabled_CantAddAttribution\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__DerivativesDisabled_CantAddDerivativeRevCeiling\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__DerivativesDisabled_CantAddReciprocal\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__MintingFeeRequiresRoyaltyPolicy\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__RoyaltyPolicyNotWhitelisted\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__RoyaltyPolicyRequiresCurrencyToken\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__ZeroLicenseRegistry\"},{type:\"error\",inputs:[],name:\"PILicenseTemplate__ZeroRoyaltyModule\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"caller\",internalType:\"address\",type:\"address\",indexed:true},{name:\"approved\",internalType:\"bool\",type:\"bool\",indexed:false}],name:\"DerivativeApproved\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTerms\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"LicenseTermsRegistered\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MODULE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IModuleRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"TERMS_RENDERER\",outputs:[{name:\"\",internalType:\"contract PILTermsRenderer\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"allowDerivativeRegistration\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"canAttachToGroupIp\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"newRoyaltyPercent\",internalType:\"uint32\",type:\"uint32\"}],name:\"canOverrideRoyaltyPercent\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"exists\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"start\",internalType:\"uint256\",type:\"uint256\"}],name:\"getEarlierExpireTime\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"start\",internalType:\"uint256\",type:\"uint256\"}],name:\"getExpireTime\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"selectedLicenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getLicenseTerms\",outputs:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]}],name:\"getLicenseTermsId\",outputs:[{name:\"selectedLicenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getLicenseTermsURI\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"getMetadataURI\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getRoyaltyPolicy\",outputs:[{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"royaltyPercent\",internalType:\"uint32\",type:\"uint32\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"},{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"metadataURI\",internalType:\"string\",type:\"string\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"childIpId\",internalType:\"address\",type:\"address\"}],name:\"isDerivativeApproved\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"isLicenseTransferable\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]}],name:\"registerLicenseTerms\",outputs:[{name:\"id\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"parentIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"approved\",internalType:\"bool\",type:\"bool\"}],name:\"setApproval\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"toJson\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"totalRegisteredLicenseTerms\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],name:\"verifyCompatibleLicenses\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensee\",internalType:\"address\",type:\"address\"},{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"uint256\",type:\"uint256\"}],name:\"verifyMintLicenseToken\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"parentIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensee\",internalType:\"address\",type:\"address\"}],name:\"verifyRegisterDerivative\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"verifyRegisterDerivativeForAllParents\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316)\n */var piLicenseTemplateAddress={1315:\"0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316\",1514:\"0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316\"};// RegistrationWorkflows\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424)\n */var registrationWorkflowsAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"coreMetadataModule\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"pilTemplate\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"}],name:\"RegistrationWorkflows__CallerNotSigner\"},{type:\"error\",inputs:[],name:\"RegistrationWorkflows__ZeroAddressParam\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"error\",inputs:[],name:\"Workflow__CallerNotAuthorizedToMint\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\",indexed:true}],name:\"CollectionCreated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"CORE_METADATA_MODULE\",outputs:[{name:\"\",internalType:\"contract ICoreMetadataModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"PIL_TEMPLATE\",outputs:[{name:\"\",internalType:\"contract IPILicenseTemplate\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spgNftInitParams\",internalType:\"struct ISPGNFT.InitParams\",type:\"tuple\",components:[{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"symbol\",internalType:\"string\",type:\"string\"},{name:\"baseURI\",internalType:\"string\",type:\"string\"},{name:\"contractURI\",internalType:\"string\",type:\"string\"},{name:\"maxSupply\",internalType:\"uint32\",type:\"uint32\"},{name:\"mintFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"mintFeeToken\",internalType:\"address\",type:\"address\"},{name:\"mintFeeRecipient\",internalType:\"address\",type:\"address\"},{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"mintOpen\",internalType:\"bool\",type:\"bool\"},{name:\"isPublicMinting\",internalType:\"bool\",type:\"bool\"}]}],name:\"createCollection\",outputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIp\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"data\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"multicall\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"uint256\",type:\"uint256\"},{name:\"\",internalType:\"bytes\",type:\"bytes\"}],name:\"onERC721Received\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"sigMetadata\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIp\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newNftContractBeacon\",internalType:\"address\",type:\"address\"}],name:\"setNftContractBeacon\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newNftContract\",internalType:\"address\",type:\"address\"}],name:\"upgradeCollections\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424)\n */var registrationWorkflowsAddress={1315:\"0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424\",1514:\"0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424\"};// RoyaltyModule\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086)\n */var royaltyModuleAbi=[{type:\"constructor\",inputs:[{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"disputeModule\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"ipGraphAcl\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__AboveAccumulatedRoyaltyPoliciesLimit\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__AboveMaxPercent\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__AboveMaxRts\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__CallFailed\"},{type:\"error\",inputs:[{name:\"groupId\",internalType:\"address\",type:\"address\"},{name:\"rewardPool\",internalType:\"address\",type:\"address\"}],name:\"RoyaltyModule__GroupRewardPoolNotWhitelisted\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__InvalidExternalRoyaltyPolicy\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__IpExpired\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__IpIsTagged\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__NoParentsOnLinking\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__NotAllowedCaller\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__NotWhitelistedOrRegisteredRoyaltyPolicy\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__NotWhitelistedRoyaltyToken\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__PaymentAmountIsTooLow\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__PolicyAlreadyRegisteredAsExternalRoyaltyPolicy\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__PolicyAlreadyWhitelistedOrRegistered\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__UnlinkableToParents\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroAccumulatedRoyaltyPoliciesLimit\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroAmount\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroDisputeModule\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroIpAssetRegistry\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroIpGraphAcl\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroLicenseRegistry\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroLicensingModule\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroParentIpId\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroReceiverVault\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroRoyaltyPolicy\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroRoyaltyToken\"},{type:\"error\",inputs:[],name:\"RoyaltyModule__ZeroTreasury\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"error\",inputs:[],name:\"VaultController__ZeroIpRoyaltyVaultBeacon\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"externalRoyaltyPolicy\",internalType:\"address\",type:\"address\",indexed:false}],name:\"ExternalRoyaltyPolicyRegistered\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"ipRoyaltyVault\",internalType:\"address\",type:\"address\",indexed:false}],name:\"IpRoyaltyVaultDeployed\"},{type:\"event\",anonymous:false,inputs:[{name:\"receiverIpId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"payerAddress\",internalType:\"address\",type:\"address\",indexed:false},{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"amountAfterFee\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"LicenseMintingFeePaid\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\",indexed:false},{name:\"licensePercent\",internalType:\"uint32\",type:\"uint32\",indexed:false},{name:\"externalData\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"LicensedWithRoyalty\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\",indexed:false},{name:\"licenseRoyaltyPolicies\",internalType:\"address[]\",type:\"address[]\",indexed:false},{name:\"licensesPercent\",internalType:\"uint32[]\",type:\"uint32[]\",indexed:false},{name:\"externalData\",internalType:\"bytes\",type:\"bytes\",indexed:false}],name:\"LinkedToParents\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"royaltyFeePercent\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"RoyaltyFeePercentSet\"},{type:\"event\",anonymous:false,inputs:[{name:\"accumulatedRoyaltyPoliciesLimit\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"RoyaltyLimitsUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"receiverIpId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"payerIpId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"sender\",internalType:\"address\",type:\"address\",indexed:false},{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"amountAfterFee\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"RoyaltyPaid\"},{type:\"event\",anonymous:false,inputs:[{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\",indexed:false},{name:\"allowed\",internalType:\"bool\",type:\"bool\",indexed:false}],name:\"RoyaltyPolicyWhitelistUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"allowed\",internalType:\"bool\",type:\"bool\",indexed:false}],name:\"RoyaltyTokenWhitelistUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"treasury\",internalType:\"address\",type:\"address\",indexed:false}],name:\"TreasurySet\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"DISPUTE_MODULE\",outputs:[{name:\"\",internalType:\"contract IDisputeModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IGroupIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_GRAPH\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_GRAPH_ACL\",outputs:[{name:\"\",internalType:\"contract IPGraphACL\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"MAX_PERCENT\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"accumulatedRoyaltyPolicies\",outputs:[{name:\"\",internalType:\"address[]\",type:\"address[]\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"globalRoyaltyStack\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"ancestorIpId\",internalType:\"address\",type:\"address\"}],name:\"hasAncestorIp\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"},{name:\"accumulatedRoyaltyPoliciesLimit\",internalType:\"uint256\",type:\"uint256\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"ipRoyaltyVaultBeacon\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"ipRoyaltyVaults\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipRoyaltyVault\",internalType:\"address\",type:\"address\"}],name:\"isIpRoyaltyVault\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"externalRoyaltyPolicy\",internalType:\"address\",type:\"address\"}],name:\"isRegisteredExternalRoyaltyPolicy\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"}],name:\"isWhitelistedRoyaltyPolicy\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"isWhitelistedRoyaltyToken\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"maxAccumulatedRoyaltyPolicies\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"maxAncestors\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"maxParents\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"maxPercent\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"pure\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"licensePercent\",internalType:\"uint32\",type:\"uint32\"},{name:\"externalData\",internalType:\"bytes\",type:\"bytes\"}],name:\"onLicenseMinting\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseRoyaltyPolicies\",internalType:\"address[]\",type:\"address[]\"},{name:\"licensesPercent\",internalType:\"uint32[]\",type:\"uint32[]\"},{name:\"externalData\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"}],name:\"onLinkToParents\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"receiverIpId\",internalType:\"address\",type:\"address\"},{name:\"payerAddress\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"payLicenseMintingFee\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"receiverIpId\",internalType:\"address\",type:\"address\"},{name:\"payerIpId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"payRoyaltyOnBehalf\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"externalRoyaltyPolicy\",internalType:\"address\",type:\"address\"}],name:\"registerExternalRoyaltyPolicy\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"royaltyFeePercent\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"beacon\",internalType:\"address\",type:\"address\"}],name:\"setIpRoyaltyVaultBeacon\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"royaltyFeePercent\",internalType:\"uint32\",type:\"uint32\"}],name:\"setRoyaltyFeePercent\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"accumulatedRoyaltyPoliciesLimit\",internalType:\"uint256\",type:\"uint256\"}],name:\"setRoyaltyLimits\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"treasury\",internalType:\"address\",type:\"address\"}],name:\"setTreasury\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"}],name:\"totalRevenueTokensAccounted\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"totalRevenueTokensReceived\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"treasury\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[{name:\"newVault\",internalType:\"address\",type:\"address\"}],name:\"upgradeVaults\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],name:\"whitelistRoyaltyPolicy\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"},{name:\"allowed\",internalType:\"bool\",type:\"bool\"}],name:\"whitelistRoyaltyToken\",outputs:[],stateMutability:\"nonpayable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086)\n */var royaltyModuleAddress={1315:\"0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086\",1514:\"0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086\"};/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E)\n */var royaltyPolicyLapAddress={1315:\"0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E\",1514:\"0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E\"};// RoyaltyPolicyLRP\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9156e603C949481883B1d3355c6f1132D191fC41)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9156e603C949481883B1d3355c6f1132D191fC41)\n */var royaltyPolicyLrpAbi=[{type:\"constructor\",inputs:[{name:\"royaltyModule\",internalType:\"address\",type:\"address\"},{name:\"royaltyPolicyLAP\",internalType:\"address\",type:\"address\"},{name:\"ipGraphAcl\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"EnforcedPause\"},{type:\"error\",inputs:[],name:\"ExpectedPause\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"ReentrancyGuardReentrantCall\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__AboveMaxPercent\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__CallFailed\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__NotRoyaltyModule\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__SameIpTransfer\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__ZeroAccessManager\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__ZeroClaimableRoyalty\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__ZeroIPGraphACL\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__ZeroRoyaltyModule\"},{type:\"error\",inputs:[],name:\"RoyaltyPolicyLRP__ZeroRoyaltyPolicyLAP\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Paused\"},{type:\"event\",anonymous:false,inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"ancestorIpId\",internalType:\"address\",type:\"address\",indexed:false},{name:\"token\",internalType:\"address\",type:\"address\",indexed:false},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"RevenueTransferredToVault\"},{type:\"event\",anonymous:false,inputs:[{name:\"account\",internalType:\"address\",type:\"address\",indexed:false}],name:\"Unpaused\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"IP_GRAPH\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_GRAPH_ACL\",outputs:[{name:\"\",internalType:\"contract IPGraphACL\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_POLICY_LAP\",outputs:[{name:\"\",internalType:\"contract IGraphAwareRoyaltyPolicy\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"__ProtocolPausable_init\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"ancestorIpId\",internalType:\"address\",type:\"address\"}],name:\"getPolicyRoyalty\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"}],name:\"getPolicyRoyaltyStack\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licensePercent\",internalType:\"uint32\",type:\"uint32\"}],name:\"getPolicyRtsRequiredToLink\",outputs:[{name:\"\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"ancestorIpId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"getTransferredTokens\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"isSupportGroup\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licensePercent\",internalType:\"uint32\",type:\"uint32\"},{name:\"\",internalType:\"bytes\",type:\"bytes\"}],name:\"onLicenseMinting\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseRoyaltyPolicies\",internalType:\"address[]\",type:\"address[]\"},{name:\"licensesPercent\",internalType:\"uint32[]\",type:\"uint32[]\"},{name:\"\",internalType:\"bytes\",type:\"bytes\"}],name:\"onLinkToParents\",outputs:[{name:\"newRoyaltyStackLRP\",internalType:\"uint32\",type:\"uint32\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"pause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"paused\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"ancestorIpId\",internalType:\"address\",type:\"address\"},{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"transferToVault\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"unpause\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9156e603C949481883B1d3355c6f1132D191fC41)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9156e603C949481883B1d3355c6f1132D191fC41)\n */var royaltyPolicyLrpAddress={1315:\"0x9156e603C949481883B1d3355c6f1132D191fC41\",1514:\"0x9156e603C949481883B1d3355c6f1132D191fC41\"};// RoyaltyTokenDistributionWorkflows\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xa38f42B8d33809917f23997B8423054aAB97322C)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xa38f42B8d33809917f23997B8423054aAB97322C)\n */var royaltyTokenDistributionWorkflowsAbi=[{type:\"constructor\",inputs:[{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"coreMetadataModule\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"licensingModule\",internalType:\"address\",type:\"address\"},{name:\"pilTemplate\",internalType:\"address\",type:\"address\"},{name:\"royaltyModule\",internalType:\"address\",type:\"address\"},{name:\"royaltyPolicyLRP\",internalType:\"address\",type:\"address\"},{name:\"wip\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"LicensingHelper__ParentIpIdsAndLicenseTermsIdsMismatch\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"PermissionHelper__ModulesAndSelectorsMismatch\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"signer\",internalType:\"address\",type:\"address\"}],name:\"RoyaltyTokenDistributionWorkflows__CallerNotSigner\"},{type:\"error\",inputs:[],name:\"RoyaltyTokenDistributionWorkflows__NoLicenseTermsData\"},{type:\"error\",inputs:[],name:\"RoyaltyTokenDistributionWorkflows__RoyaltyVaultNotDeployed\"},{type:\"error\",inputs:[{name:\"totalShares\",internalType:\"uint32\",type:\"uint32\"},{name:\"ipAccountBalance\",internalType:\"uint32\",type:\"uint32\"}],name:\"RoyaltyTokenDistributionWorkflows__TotalSharesExceedsIPAccountBalance\"},{type:\"error\",inputs:[],name:\"RoyaltyTokenDistributionWorkflows__ZeroAddressParam\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"error\",inputs:[],name:\"Workflow__CallerNotAuthorizedToMint\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"CORE_METADATA_MODULE\",outputs:[{name:\"\",internalType:\"contract ICoreMetadataModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSING_MODULE\",outputs:[{name:\"\",internalType:\"contract ILicensingModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"PIL_TEMPLATE\",outputs:[{name:\"\",internalType:\"contract IPILicenseTemplate\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_POLICY_LRP\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"WIP\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"royaltyShares\",internalType:\"struct WorkflowStructs.RoyaltyShare[]\",type:\"tuple[]\",components:[{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"percentage\",internalType:\"uint32\",type:\"uint32\"}]},{name:\"sigApproveRoyaltyTokens\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"distributeRoyaltyTokens\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"licenseTermsData\",internalType:\"struct WorkflowStructs.LicenseTermsData[]\",type:\"tuple[]\",components:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]},{name:\"royaltyShares\",internalType:\"struct WorkflowStructs.RoyaltyShare[]\",type:\"tuple[]\",components:[{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"percentage\",internalType:\"uint32\",type:\"uint32\"}]},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"derivData\",internalType:\"struct WorkflowStructs.MakeDerivative\",type:\"tuple\",components:[{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}]},{name:\"royaltyShares\",internalType:\"struct WorkflowStructs.RoyaltyShare[]\",type:\"tuple[]\",components:[{name:\"recipient\",internalType:\"address\",type:\"address\"},{name:\"percentage\",internalType:\"uint32\",type:\"uint32\"}]},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"data\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"multicall\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"address\",type:\"address\"},{name:\"\",internalType:\"uint256\",type:\"uint256\"},{name:\"\",internalType:\"bytes\",type:\"bytes\"}],name:\"onERC721Received\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"licenseTermsData\",internalType:\"struct WorkflowStructs.LicenseTermsData[]\",type:\"tuple[]\",components:[{name:\"terms\",internalType:\"struct PILTerms\",type:\"tuple\",components:[{name:\"transferable\",internalType:\"bool\",type:\"bool\"},{name:\"royaltyPolicy\",internalType:\"address\",type:\"address\"},{name:\"defaultMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"expiration\",internalType:\"uint256\",type:\"uint256\"},{name:\"commercialUse\",internalType:\"bool\",type:\"bool\"},{name:\"commercialAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"commercializerChecker\",internalType:\"address\",type:\"address\"},{name:\"commercializerCheckerData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"commercialRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"derivativesAllowed\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesAttribution\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesApproval\",internalType:\"bool\",type:\"bool\"},{name:\"derivativesReciprocal\",internalType:\"bool\",type:\"bool\"},{name:\"derivativeRevCeiling\",internalType:\"uint256\",type:\"uint256\"},{name:\"currency\",internalType:\"address\",type:\"address\"},{name:\"uri\",internalType:\"string\",type:\"string\"}]},{name:\"licensingConfig\",internalType:\"struct Licensing.LicensingConfig\",type:\"tuple\",components:[{name:\"isSet\",internalType:\"bool\",type:\"bool\"},{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"licensingHook\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"},{name:\"commercialRevShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"disabled\",internalType:\"bool\",type:\"bool\"},{name:\"expectMinimumGroupRewardShare\",internalType:\"uint32\",type:\"uint32\"},{name:\"expectGroupRewardPool\",internalType:\"address\",type:\"address\"}]}]},{name:\"sigMetadataAndAttachAndConfig\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIpAndAttachPILTermsAndDeployRoyaltyVault\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"ipRoyaltyVault\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"nftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"ipMetadata\",internalType:\"struct WorkflowStructs.IPMetadata\",type:\"tuple\",components:[{name:\"ipMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"ipMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}]},{name:\"derivData\",internalType:\"struct WorkflowStructs.MakeDerivative\",type:\"tuple\",components:[{name:\"parentIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsIds\",internalType:\"uint256[]\",type:\"uint256[]\"},{name:\"royaltyContext\",internalType:\"bytes\",type:\"bytes\"},{name:\"maxMintingFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"maxRts\",internalType:\"uint32\",type:\"uint32\"},{name:\"maxRevenueShare\",internalType:\"uint32\",type:\"uint32\"}]},{name:\"sigMetadataAndRegister\",internalType:\"struct WorkflowStructs.SignatureData\",type:\"tuple\",components:[{name:\"signer\",internalType:\"address\",type:\"address\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"signature\",internalType:\"bytes\",type:\"bytes\"}]}],name:\"registerIpAndMakeDerivativeAndDeployRoyaltyVault\",outputs:[{name:\"ipId\",internalType:\"address\",type:\"address\"},{name:\"ipRoyaltyVault\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xa38f42B8d33809917f23997B8423054aAB97322C)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xa38f42B8d33809917f23997B8423054aAB97322C)\n */var royaltyTokenDistributionWorkflowsAddress={1315:\"0xa38f42B8d33809917f23997B8423054aAB97322C\",1514:\"0xa38f42B8d33809917f23997B8423054aAB97322C\"};// RoyaltyWorkflows\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890)\n */var royaltyWorkflowsAbi=[{type:\"constructor\",inputs:[{name:\"royaltyModule\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"authority\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedInvalidAuthority\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"delay\",internalType:\"uint32\",type:\"uint32\"}],name:\"AccessManagedRequiredDelay\"},{type:\"error\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"}],name:\"AccessManagedUnauthorized\"},{type:\"error\",inputs:[{name:\"target\",internalType:\"address\",type:\"address\"}],name:\"AddressEmptyCode\"},{type:\"error\",inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\"}],name:\"ERC1967InvalidImplementation\"},{type:\"error\",inputs:[],name:\"ERC1967NonPayable\"},{type:\"error\",inputs:[],name:\"FailedCall\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"RoyaltyWorkflows__ZeroAddressParam\"},{type:\"error\",inputs:[],name:\"UUPSUnauthorizedCallContext\"},{type:\"error\",inputs:[{name:\"slot\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"UUPSUnsupportedProxiableUUID\"},{type:\"event\",anonymous:false,inputs:[{name:\"authority\",internalType:\"address\",type:\"address\",indexed:false}],name:\"AuthorityUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"implementation\",internalType:\"address\",type:\"address\",indexed:true}],name:\"Upgraded\"},{type:\"function\",inputs:[],name:\"ROYALTY_MODULE\",outputs:[{name:\"\",internalType:\"contract IRoyaltyModule\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"UPGRADE_INTERFACE_VERSION\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"authority\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"ancestorIpId\",internalType:\"address\",type:\"address\"},{name:\"claimer\",internalType:\"address\",type:\"address\"},{name:\"childIpIds\",internalType:\"address[]\",type:\"address[]\"},{name:\"royaltyPolicies\",internalType:\"address[]\",type:\"address[]\"},{name:\"currencyTokens\",internalType:\"address[]\",type:\"address[]\"}],name:\"claimAllRevenue\",outputs:[{name:\"amountsClaimed\",internalType:\"uint256[]\",type:\"uint256[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"accessManager\",internalType:\"address\",type:\"address\"}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"isConsumingScheduledOp\",outputs:[{name:\"\",internalType:\"bytes4\",type:\"bytes4\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"data\",internalType:\"bytes[]\",type:\"bytes[]\"}],name:\"multicall\",outputs:[{name:\"results\",internalType:\"bytes[]\",type:\"bytes[]\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"proxiableUUID\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"newAuthority\",internalType:\"address\",type:\"address\"}],name:\"setAuthority\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newImplementation\",internalType:\"address\",type:\"address\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"upgradeToAndCall\",outputs:[],stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890)\n */var royaltyWorkflowsAddress={1315:\"0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890\",1514:\"0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890\"};// SPGNFTImpl\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x5266215a00c31AaA2f2BB7b951Ea0028Ea8b4e37)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5)\n */var spgnftImplAbi=[{type:\"constructor\",inputs:[{name:\"derivativeWorkflows\",internalType:\"address\",type:\"address\"},{name:\"groupingWorkflows\",internalType:\"address\",type:\"address\"},{name:\"licenseAttachmentWorkflows\",internalType:\"address\",type:\"address\"},{name:\"registrationWorkflows\",internalType:\"address\",type:\"address\"},{name:\"royaltyTokenDistributionWorkflows\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[],name:\"AccessControlBadConfirmation\"},{type:\"error\",inputs:[{name:\"account\",internalType:\"address\",type:\"address\"},{name:\"neededRole\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"AccessControlUnauthorizedAccount\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"ERC721IncorrectOwner\"},{type:\"error\",inputs:[{name:\"operator\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC721InsufficientApproval\"},{type:\"error\",inputs:[{name:\"approver\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidApprover\"},{type:\"error\",inputs:[{name:\"operator\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidOperator\"},{type:\"error\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidOwner\"},{type:\"error\",inputs:[{name:\"receiver\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidReceiver\"},{type:\"error\",inputs:[{name:\"sender\",internalType:\"address\",type:\"address\"}],name:\"ERC721InvalidSender\"},{type:\"error\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ERC721NonexistentToken\"},{type:\"error\",inputs:[],name:\"InvalidInitialization\"},{type:\"error\",inputs:[],name:\"NotInitializing\"},{type:\"error\",inputs:[],name:\"SPGNFT__CallerNotFeeRecipientOrAdmin\"},{type:\"error\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"SPGNFT__CallerNotOwner\"},{type:\"error\",inputs:[],name:\"SPGNFT__CallerNotPeripheryContract\"},{type:\"error\",inputs:[{name:\"spgNftContract\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"SPGNFT__DuplicatedNFTMetadataHash\"},{type:\"error\",inputs:[],name:\"SPGNFT__MaxSupplyReached\"},{type:\"error\",inputs:[],name:\"SPGNFT__MintingClosed\"},{type:\"error\",inputs:[],name:\"SPGNFT__MintingDenied\"},{type:\"error\",inputs:[],name:\"SPGNFT__ZeroAddressParam\"},{type:\"error\",inputs:[],name:\"SPGNFT__ZeroMaxSupply\"},{type:\"error\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"SafeERC20FailedOperation\"},{type:\"event\",anonymous:false,inputs:[{name:\"owner\",internalType:\"address\",type:\"address\",indexed:true},{name:\"approved\",internalType:\"address\",type:\"address\",indexed:true},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:true}],name:\"Approval\"},{type:\"event\",anonymous:false,inputs:[{name:\"owner\",internalType:\"address\",type:\"address\",indexed:true},{name:\"operator\",internalType:\"address\",type:\"address\",indexed:true},{name:\"approved\",internalType:\"bool\",type:\"bool\",indexed:false}],name:\"ApprovalForAll\"},{type:\"event\",anonymous:false,inputs:[{name:\"_fromTokenId\",internalType:\"uint256\",type:\"uint256\",indexed:false},{name:\"_toTokenId\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"BatchMetadataUpdate\"},{type:\"event\",anonymous:false,inputs:[],name:\"ContractURIUpdated\"},{type:\"event\",anonymous:false,inputs:[{name:\"version\",internalType:\"uint64\",type:\"uint64\",indexed:false}],name:\"Initialized\"},{type:\"event\",anonymous:false,inputs:[{name:\"_tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"MetadataUpdate\"},{type:\"event\",anonymous:false,inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\",indexed:true},{name:\"previousAdminRole\",internalType:\"bytes32\",type:\"bytes32\",indexed:true},{name:\"newAdminRole\",internalType:\"bytes32\",type:\"bytes32\",indexed:true}],name:\"RoleAdminChanged\"},{type:\"event\",anonymous:false,inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\",indexed:true},{name:\"account\",internalType:\"address\",type:\"address\",indexed:true},{name:\"sender\",internalType:\"address\",type:\"address\",indexed:true}],name:\"RoleGranted\"},{type:\"event\",anonymous:false,inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\",indexed:true},{name:\"account\",internalType:\"address\",type:\"address\",indexed:true},{name:\"sender\",internalType:\"address\",type:\"address\",indexed:true}],name:\"RoleRevoked\"},{type:\"event\",anonymous:false,inputs:[{name:\"from\",internalType:\"address\",type:\"address\",indexed:true},{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\",indexed:true}],name:\"Transfer\"},{type:\"function\",inputs:[],name:\"DEFAULT_ADMIN_ROLE\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"DERIVATIVE_WORKFLOWS_ADDRESS\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"GROUPING_WORKFLOWS_ADDRESS\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_ATTACHMENT_WORKFLOWS_ADDRESS\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"REGISTRATION_WORKFLOWS_ADDRESS\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"ROYALTY_TOKEN_DISTRIBUTION_WORKFLOWS_ADDRESS\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"approve\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"balanceOf\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"baseURI\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"contractURI\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getApproved\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"getRoleAdmin\",outputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"getTokenIdByMetadataHash\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"account\",internalType:\"address\",type:\"address\"}],name:\"grantRole\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"account\",internalType:\"address\",type:\"address\"}],name:\"hasRole\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"initParams\",internalType:\"struct ISPGNFT.InitParams\",type:\"tuple\",components:[{name:\"name\",internalType:\"string\",type:\"string\"},{name:\"symbol\",internalType:\"string\",type:\"string\"},{name:\"baseURI\",internalType:\"string\",type:\"string\"},{name:\"contractURI\",internalType:\"string\",type:\"string\"},{name:\"maxSupply\",internalType:\"uint32\",type:\"uint32\"},{name:\"mintFee\",internalType:\"uint256\",type:\"uint256\"},{name:\"mintFeeToken\",internalType:\"address\",type:\"address\"},{name:\"mintFeeRecipient\",internalType:\"address\",type:\"address\"},{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"mintOpen\",internalType:\"bool\",type:\"bool\"},{name:\"isPublicMinting\",internalType:\"bool\",type:\"bool\"}]}],name:\"initialize\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"operator\",internalType:\"address\",type:\"address\"}],name:\"isApprovedForAll\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mint\",outputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"payer\",internalType:\"address\",type:\"address\"},{name:\"nftMetadataURI\",internalType:\"string\",type:\"string\"},{name:\"nftMetadataHash\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"allowDuplicates\",internalType:\"bool\",type:\"bool\"}],name:\"mintByPeriphery\",outputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"mintFee\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"mintFeeRecipient\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"mintFeeToken\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"mintOpen\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"ownerOf\",outputs:[{name:\"\",internalType:\"address\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"publicMinting\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"callerConfirmation\",internalType:\"address\",type:\"address\"}],name:\"renounceRole\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"role\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"account\",internalType:\"address\",type:\"address\"}],name:\"revokeRole\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"safeTransferFrom\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"data\",internalType:\"bytes\",type:\"bytes\"}],name:\"safeTransferFrom\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"operator\",internalType:\"address\",type:\"address\"},{name:\"approved\",internalType:\"bool\",type:\"bool\"}],name:\"setApprovalForAll\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"baseURI\",internalType:\"string\",type:\"string\"}],name:\"setBaseURI\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"contractURI\",internalType:\"string\",type:\"string\"}],name:\"setContractURI\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"fee\",internalType:\"uint256\",type:\"uint256\"}],name:\"setMintFee\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"newFeeRecipient\",internalType:\"address\",type:\"address\"}],name:\"setMintFeeRecipient\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"setMintFeeToken\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"mintOpen\",internalType:\"bool\",type:\"bool\"}],name:\"setMintOpen\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"isPublicMinting\",internalType:\"bool\",type:\"bool\"}],name:\"setPublicMinting\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"},{name:\"tokenUri\",internalType:\"string\",type:\"string\"}],name:\"setTokenURI\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"symbol\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"tokenURI\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"totalSupply\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"tokenId\",internalType:\"uint256\",type:\"uint256\"}],name:\"transferFrom\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"token\",internalType:\"address\",type:\"address\"}],name:\"withdrawToken\",outputs:[],stateMutability:\"nonpayable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x5266215a00c31AaA2f2BB7b951Ea0028Ea8b4e37)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5)\n */var spgnftImplAddress={1315:\"0x5266215a00c31AaA2f2BB7b951Ea0028Ea8b4e37\",1514:\"0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5\"};// TotalLicenseTokenLimitHook\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xaBAD364Bfa41230272b08f171E0Ca939bD600478)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xB72C9812114a0Fc74D49e01385bd266A75960Cda)\n */var totalLicenseTokenLimitHookAbi=[{type:\"constructor\",inputs:[{name:\"licenseRegistry\",internalType:\"address\",type:\"address\"},{name:\"licenseToken\",internalType:\"address\",type:\"address\"},{name:\"accessController\",internalType:\"address\",type:\"address\"},{name:\"ipAssetRegistry\",internalType:\"address\",type:\"address\"}],stateMutability:\"nonpayable\"},{type:\"error\",inputs:[{name:\"ipAccount\",internalType:\"address\",type:\"address\"}],name:\"AccessControlled__NotIpAccount\"},{type:\"error\",inputs:[],name:\"AccessControlled__ZeroAddress\"},{type:\"error\",inputs:[{name:\"totalSupply\",internalType:\"uint256\",type:\"uint256\"},{name:\"limit\",internalType:\"uint256\",type:\"uint256\"}],name:\"TotalLicenseTokenLimitHook_LimitLowerThanTotalSupply\"},{type:\"error\",inputs:[{name:\"totalSupply\",internalType:\"uint256\",type:\"uint256\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"},{name:\"limit\",internalType:\"uint256\",type:\"uint256\"}],name:\"TotalLicenseTokenLimitHook_TotalLicenseTokenLimitExceeded\"},{type:\"error\",inputs:[],name:\"TotalLicenseTokenLimitHook_ZeroLicenseRegistry\"},{type:\"error\",inputs:[],name:\"TotalLicenseTokenLimitHook_ZeroLicenseToken\"},{type:\"event\",anonymous:false,inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\",indexed:true},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\",indexed:true},{name:\"limit\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"SetTotalLicenseTokenLimit\"},{type:\"function\",inputs:[],name:\"ACCESS_CONTROLLER\",outputs:[{name:\"\",internalType:\"contract IAccessController\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"IP_ASSET_REGISTRY\",outputs:[{name:\"\",internalType:\"contract IIPAssetRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_REGISTRY\",outputs:[{name:\"\",internalType:\"contract ILicenseRegistry\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"LICENSE_TOKEN\",outputs:[{name:\"\",internalType:\"contract ILicenseToken\",type:\"address\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"},{name:\"receiver\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"}],name:\"beforeMintLicenseTokens\",outputs:[{name:\"totalMintingFee\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"childIpId\",internalType:\"address\",type:\"address\"},{name:\"parentIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"}],name:\"beforeRegisterDerivative\",outputs:[{name:\"mintingFee\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"caller\",internalType:\"address\",type:\"address\"},{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"},{name:\"receiver\",internalType:\"address\",type:\"address\"},{name:\"hookData\",internalType:\"bytes\",type:\"bytes\"}],name:\"calculateMintingFee\",outputs:[{name:\"totalMintingFee\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"}],name:\"getTotalLicenseTokenLimit\",outputs:[{name:\"limit\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"licensorIpId\",internalType:\"address\",type:\"address\"},{name:\"licenseTemplate\",internalType:\"address\",type:\"address\"},{name:\"licenseTermsId\",internalType:\"uint256\",type:\"uint256\"},{name:\"limit\",internalType:\"uint256\",type:\"uint256\"}],name:\"setTotalLicenseTokenLimit\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"interfaceId\",internalType:\"bytes4\",type:\"bytes4\"}],name:\"supportsInterface\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"totalLicenseTokenLimit\",outputs:[{name:\"\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0xaBAD364Bfa41230272b08f171E0Ca939bD600478)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0xB72C9812114a0Fc74D49e01385bd266A75960Cda)\n */var totalLicenseTokenLimitHookAddress={1315:\"0xaBAD364Bfa41230272b08f171E0Ca939bD600478\",1514:\"0xB72C9812114a0Fc74D49e01385bd266A75960Cda\"};// WrappedIP\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x1514000000000000000000000000000000000000)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x1514000000000000000000000000000000000000)\n */var wrappedIpAbi=[{type:\"error\",inputs:[],name:\"AllowanceOverflow\"},{type:\"error\",inputs:[],name:\"AllowanceUnderflow\"},{type:\"error\",inputs:[{name:\"receiver\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidReceiver\"},{type:\"error\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"}],name:\"ERC20InvalidSpender\"},{type:\"error\",inputs:[],name:\"IPTransferFailed\"},{type:\"error\",inputs:[],name:\"InsufficientAllowance\"},{type:\"error\",inputs:[],name:\"InsufficientBalance\"},{type:\"error\",inputs:[],name:\"InvalidPermit\"},{type:\"error\",inputs:[],name:\"Permit2AllowanceIsFixedAtInfinity\"},{type:\"error\",inputs:[],name:\"PermitExpired\"},{type:\"error\",inputs:[],name:\"TotalSupplyOverflow\"},{type:\"event\",anonymous:false,inputs:[{name:\"owner\",internalType:\"address\",type:\"address\",indexed:true},{name:\"spender\",internalType:\"address\",type:\"address\",indexed:true},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Approval\"},{type:\"event\",anonymous:false,inputs:[{name:\"from\",internalType:\"address\",type:\"address\",indexed:true},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Deposit\"},{type:\"event\",anonymous:false,inputs:[{name:\"from\",internalType:\"address\",type:\"address\",indexed:true},{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Transfer\"},{type:\"event\",anonymous:false,inputs:[{name:\"to\",internalType:\"address\",type:\"address\",indexed:true},{name:\"amount\",internalType:\"uint256\",type:\"uint256\",indexed:false}],name:\"Withdrawal\"},{type:\"function\",inputs:[],name:\"DOMAIN_SEPARATOR\",outputs:[{name:\"result\",internalType:\"bytes32\",type:\"bytes32\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"spender\",internalType:\"address\",type:\"address\"}],name:\"allowance\",outputs:[{name:\"result\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"spender\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"approve\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"balanceOf\",outputs:[{name:\"result\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"decimals\",outputs:[{name:\"\",internalType:\"uint8\",type:\"uint8\"}],stateMutability:\"view\"},{type:\"function\",inputs:[],name:\"deposit\",outputs:[],stateMutability:\"payable\"},{type:\"function\",inputs:[],name:\"name\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"pure\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"}],name:\"nonces\",outputs:[{name:\"result\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"owner\",internalType:\"address\",type:\"address\"},{name:\"spender\",internalType:\"address\",type:\"address\"},{name:\"value\",internalType:\"uint256\",type:\"uint256\"},{name:\"deadline\",internalType:\"uint256\",type:\"uint256\"},{name:\"v\",internalType:\"uint8\",type:\"uint8\"},{name:\"r\",internalType:\"bytes32\",type:\"bytes32\"},{name:\"s\",internalType:\"bytes32\",type:\"bytes32\"}],name:\"permit\",outputs:[],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[],name:\"symbol\",outputs:[{name:\"\",internalType:\"string\",type:\"string\"}],stateMutability:\"pure\"},{type:\"function\",inputs:[],name:\"totalSupply\",outputs:[{name:\"result\",internalType:\"uint256\",type:\"uint256\"}],stateMutability:\"view\"},{type:\"function\",inputs:[{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"transfer\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"from\",internalType:\"address\",type:\"address\"},{name:\"to\",internalType:\"address\",type:\"address\"},{name:\"amount\",internalType:\"uint256\",type:\"uint256\"}],name:\"transferFrom\",outputs:[{name:\"\",internalType:\"bool\",type:\"bool\"}],stateMutability:\"nonpayable\"},{type:\"function\",inputs:[{name:\"value\",internalType:\"uint256\",type:\"uint256\"}],name:\"withdraw\",outputs:[],stateMutability:\"nonpayable\"},{type:\"receive\",stateMutability:\"payable\"}];/**\n * - [__View Contract on Story Aeneid Story Aeneid Explorer__](https://aeneid.storyscan.xyz/address/0x1514000000000000000000000000000000000000)\n * - [__View Contract on Story Story Explorer__](https://storyscan.xyz/address/0x1514000000000000000000000000000000000000)\n */var wrappedIpAddress={1315:\"0x1514000000000000000000000000000000000000\",1514:\"0x1514000000000000000000000000000000000000\"};// SDK\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// COMMON =============================================================\nfunction getAddress(address,chainId){return address[chainId||0]||\"0x\";}// Contract AccessController =============================================================\n/**\n * AccessControllerPermissionSetEvent\n *\n * @param ipAccountOwner address\n * @param ipAccount address\n * @param signer address\n * @param to address\n * @param func bytes4\n * @param permission uint8\n *//**\n * AccessControllerSetAllPermissionsRequest\n *\n * @param ipAccount address\n * @param signer address\n * @param permission uint8\n *//**\n * AccessControllerSetBatchPermissionsRequest\n *\n * @param permissions tuple[]\n *//**\n * AccessControllerSetPermissionRequest\n *\n * @param ipAccount address\n * @param signer address\n * @param to address\n * @param func bytes4\n * @param permission uint8\n *//**\n * contract AccessController event\n */var AccessControllerEventClient=/*#__PURE__*/function(){function AccessControllerEventClient(rpcClient,address){var _rpcClient$chain;_classCallCheck(this,AccessControllerEventClient);this.address=address||getAddress(accessControllerAddress,(_rpcClient$chain=rpcClient.chain)===null||_rpcClient$chain===void 0?void 0:_rpcClient$chain.id);this.rpcClient=rpcClient;}/**\n   * event PermissionSet for contract AccessController\n   */return _createClass(AccessControllerEventClient,[{key:\"watchPermissionSetEvent\",value:function watchPermissionSetEvent(_onLogs){return this.rpcClient.watchContractEvent({abi:accessControllerAbi,address:this.address,eventName:\"PermissionSet\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event PermissionSet for contract AccessController\n   */},{key:\"parseTxPermissionSetEvent\",value:function parseTxPermissionSetEvent(txReceipt){var targetLogs=[];var _iterator=_createForOfIteratorHelper(txReceipt.logs),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var log=_step.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:accessControllerAbi,eventName:\"PermissionSet\",data:log.data,topics:log.topics});if(event.eventName===\"PermissionSet\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return targetLogs;}}]);}();/**\n * contract AccessController write method\n */var AccessControllerClient=/*#__PURE__*/function(_AccessControllerEven){function AccessControllerClient(rpcClient,wallet,address){var _this;_classCallCheck(this,AccessControllerClient);_this=_callSuper(this,AccessControllerClient,[rpcClient,address]);_this.wallet=wallet;return _this;}/**\n   * method setAllPermissions for contract AccessController\n   *\n   * @param request AccessControllerSetAllPermissionsRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(AccessControllerClient,_AccessControllerEven);return _createClass(AccessControllerClient,[{key:\"setAllPermissions\",value:(function(){var _setAllPermissions=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request){var _yield$this$rpcClient,call;return _regenerator().w(function(_context){while(1)switch(_context.n){case 0:_context.n=1;return this.rpcClient.simulateContract({abi:accessControllerAbi,address:this.address,functionName:\"setAllPermissions\",account:this.wallet.account,args:[request.ipAccount,request.signer,request.permission]});case 1:_yield$this$rpcClient=_context.v;call=_yield$this$rpcClient.request;_context.n=2;return this.wallet.writeContract(call);case 2:return _context.a(2,_context.v);}},_callee,this);}));function setAllPermissions(_x){return _setAllPermissions.apply(this,arguments);}return setAllPermissions;}()/**\n   * method setAllPermissions for contract AccessController with only encode\n   *\n   * @param request AccessControllerSetAllPermissionsRequest\n   * @return EncodedTxData\n   */)},{key:\"setAllPermissionsEncode\",value:function setAllPermissionsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:accessControllerAbi,functionName:\"setAllPermissions\",args:[request.ipAccount,request.signer,request.permission]})};}/**\n   * method setBatchPermissions for contract AccessController\n   *\n   * @param request AccessControllerSetBatchPermissionsRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setBatchPermissions\",value:(function(){var _setBatchPermissions=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request){var _yield$this$rpcClient2,call;return _regenerator().w(function(_context2){while(1)switch(_context2.n){case 0:_context2.n=1;return this.rpcClient.simulateContract({abi:accessControllerAbi,address:this.address,functionName:\"setBatchPermissions\",account:this.wallet.account,args:[request.permissions]});case 1:_yield$this$rpcClient2=_context2.v;call=_yield$this$rpcClient2.request;_context2.n=2;return this.wallet.writeContract(call);case 2:return _context2.a(2,_context2.v);}},_callee2,this);}));function setBatchPermissions(_x2){return _setBatchPermissions.apply(this,arguments);}return setBatchPermissions;}()/**\n   * method setBatchPermissions for contract AccessController with only encode\n   *\n   * @param request AccessControllerSetBatchPermissionsRequest\n   * @return EncodedTxData\n   */)},{key:\"setBatchPermissionsEncode\",value:function setBatchPermissionsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:accessControllerAbi,functionName:\"setBatchPermissions\",args:[request.permissions]})};}/**\n   * method setPermission for contract AccessController\n   *\n   * @param request AccessControllerSetPermissionRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setPermission\",value:(function(){var _setPermission=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(request){var _yield$this$rpcClient3,call;return _regenerator().w(function(_context3){while(1)switch(_context3.n){case 0:_context3.n=1;return this.rpcClient.simulateContract({abi:accessControllerAbi,address:this.address,functionName:\"setPermission\",account:this.wallet.account,args:[request.ipAccount,request.signer,request.to,request.func,request.permission]});case 1:_yield$this$rpcClient3=_context3.v;call=_yield$this$rpcClient3.request;_context3.n=2;return this.wallet.writeContract(call);case 2:return _context3.a(2,_context3.v);}},_callee3,this);}));function setPermission(_x3){return _setPermission.apply(this,arguments);}return setPermission;}()/**\n   * method setPermission for contract AccessController with only encode\n   *\n   * @param request AccessControllerSetPermissionRequest\n   * @return EncodedTxData\n   */)},{key:\"setPermissionEncode\",value:function setPermissionEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:accessControllerAbi,functionName:\"setPermission\",args:[request.ipAccount,request.signer,request.to,request.func,request.permission]})};}}]);}(AccessControllerEventClient);// Contract ArbitrationPolicyUMA =============================================================\n/**\n * ArbitrationPolicyUmaDisputeIdToAssertionIdRequest\n *\n * @param disputeId uint256\n *//**\n * ArbitrationPolicyUmaMaxBondsRequest\n *\n * @param token address\n *//**\n * ArbitrationPolicyUmaDisputeAssertionRequest\n *\n * @param assertionId bytes32\n * @param counterEvidenceHash bytes32\n *//**\n * contract ArbitrationPolicyUMA readonly method\n */var ArbitrationPolicyUmaReadOnlyClient=/*#__PURE__*/function(){function ArbitrationPolicyUmaReadOnlyClient(rpcClient,address){var _rpcClient$chain2;_classCallCheck(this,ArbitrationPolicyUmaReadOnlyClient);this.address=address||getAddress(arbitrationPolicyUmaAddress,(_rpcClient$chain2=rpcClient.chain)===null||_rpcClient$chain2===void 0?void 0:_rpcClient$chain2.id);this.rpcClient=rpcClient;}/**\n   * method disputeIdToAssertionId for contract ArbitrationPolicyUMA\n   *\n   * @param request ArbitrationPolicyUmaDisputeIdToAssertionIdRequest\n   * @return Promise<ArbitrationPolicyUmaDisputeIdToAssertionIdResponse>\n   */return _createClass(ArbitrationPolicyUmaReadOnlyClient,[{key:\"disputeIdToAssertionId\",value:(function(){var _disputeIdToAssertionId=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(request){return _regenerator().w(function(_context4){while(1)switch(_context4.n){case 0:_context4.n=1;return this.rpcClient.readContract({abi:arbitrationPolicyUmaAbi,address:this.address,functionName:\"disputeIdToAssertionId\",args:[request.disputeId]});case 1:return _context4.a(2,_context4.v);}},_callee4,this);}));function disputeIdToAssertionId(_x4){return _disputeIdToAssertionId.apply(this,arguments);}return disputeIdToAssertionId;}()/**\n   * method maxBonds for contract ArbitrationPolicyUMA\n   *\n   * @param request ArbitrationPolicyUmaMaxBondsRequest\n   * @return Promise<ArbitrationPolicyUmaMaxBondsResponse>\n   */)},{key:\"maxBonds\",value:(function(){var _maxBonds=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(request){return _regenerator().w(function(_context5){while(1)switch(_context5.n){case 0:_context5.n=1;return this.rpcClient.readContract({abi:arbitrationPolicyUmaAbi,address:this.address,functionName:\"maxBonds\",args:[request.token]});case 1:return _context5.a(2,_context5.v);}},_callee5,this);}));function maxBonds(_x5){return _maxBonds.apply(this,arguments);}return maxBonds;}()/**\n   * method maxLiveness for contract ArbitrationPolicyUMA\n   *\n   * @param request ArbitrationPolicyUmaMaxLivenessRequest\n   * @return Promise<ArbitrationPolicyUmaMaxLivenessResponse>\n   */)},{key:\"maxLiveness\",value:(function(){var _maxLiveness=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(){return _regenerator().w(function(_context6){while(1)switch(_context6.n){case 0:_context6.n=1;return this.rpcClient.readContract({abi:arbitrationPolicyUmaAbi,address:this.address,functionName:\"maxLiveness\"});case 1:return _context6.a(2,_context6.v);}},_callee6,this);}));function maxLiveness(){return _maxLiveness.apply(this,arguments);}return maxLiveness;}()/**\n   * method minLiveness for contract ArbitrationPolicyUMA\n   *\n   * @param request ArbitrationPolicyUmaMinLivenessRequest\n   * @return Promise<ArbitrationPolicyUmaMinLivenessResponse>\n   */)},{key:\"minLiveness\",value:(function(){var _minLiveness=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(){return _regenerator().w(function(_context7){while(1)switch(_context7.n){case 0:_context7.n=1;return this.rpcClient.readContract({abi:arbitrationPolicyUmaAbi,address:this.address,functionName:\"minLiveness\"});case 1:return _context7.a(2,_context7.v);}},_callee7,this);}));function minLiveness(){return _minLiveness.apply(this,arguments);}return minLiveness;}()/**\n   * method oov3 for contract ArbitrationPolicyUMA\n   *\n   * @param request ArbitrationPolicyUmaOov3Request\n   * @return Promise<ArbitrationPolicyUmaOov3Response>\n   */)},{key:\"oov3\",value:(function(){var _oov=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(){return _regenerator().w(function(_context8){while(1)switch(_context8.n){case 0:_context8.n=1;return this.rpcClient.readContract({abi:arbitrationPolicyUmaAbi,address:this.address,functionName:\"oov3\"});case 1:return _context8.a(2,_context8.v);}},_callee8,this);}));function oov3(){return _oov.apply(this,arguments);}return oov3;}())}]);}();/**\n * contract ArbitrationPolicyUMA write method\n */var ArbitrationPolicyUmaClient=/*#__PURE__*/function(_ArbitrationPolicyUma){function ArbitrationPolicyUmaClient(rpcClient,wallet,address){var _this2;_classCallCheck(this,ArbitrationPolicyUmaClient);_this2=_callSuper(this,ArbitrationPolicyUmaClient,[rpcClient,address]);_this2.wallet=wallet;return _this2;}/**\n   * method disputeAssertion for contract ArbitrationPolicyUMA\n   *\n   * @param request ArbitrationPolicyUmaDisputeAssertionRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(ArbitrationPolicyUmaClient,_ArbitrationPolicyUma);return _createClass(ArbitrationPolicyUmaClient,[{key:\"disputeAssertion\",value:(function(){var _disputeAssertion=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(request){var _yield$this$rpcClient4,call;return _regenerator().w(function(_context9){while(1)switch(_context9.n){case 0:_context9.n=1;return this.rpcClient.simulateContract({abi:arbitrationPolicyUmaAbi,address:this.address,functionName:\"disputeAssertion\",account:this.wallet.account,args:[request.assertionId,request.counterEvidenceHash]});case 1:_yield$this$rpcClient4=_context9.v;call=_yield$this$rpcClient4.request;_context9.n=2;return this.wallet.writeContract(call);case 2:return _context9.a(2,_context9.v);}},_callee9,this);}));function disputeAssertion(_x6){return _disputeAssertion.apply(this,arguments);}return disputeAssertion;}()/**\n   * method disputeAssertion for contract ArbitrationPolicyUMA with only encode\n   *\n   * @param request ArbitrationPolicyUmaDisputeAssertionRequest\n   * @return EncodedTxData\n   */)},{key:\"disputeAssertionEncode\",value:function disputeAssertionEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:arbitrationPolicyUmaAbi,functionName:\"disputeAssertion\",args:[request.assertionId,request.counterEvidenceHash]})};}}]);}(ArbitrationPolicyUmaReadOnlyClient);// Contract CoreMetadataModule =============================================================\n/**\n * CoreMetadataModuleAuthorityUpdatedEvent\n *\n * @param authority address\n *//**\n * CoreMetadataModuleInitializedEvent\n *\n * @param version uint64\n *//**\n * CoreMetadataModuleMetadataFrozenEvent\n *\n * @param ipId address\n *//**\n * CoreMetadataModuleMetadataUriSetEvent\n *\n * @param ipId address\n * @param metadataURI string\n * @param metadataHash bytes32\n *//**\n * CoreMetadataModuleNftTokenUriSetEvent\n *\n * @param ipId address\n * @param nftTokenURI string\n * @param nftMetadataHash bytes32\n *//**\n * CoreMetadataModuleUpgradedEvent\n *\n * @param implementation address\n *//**\n * CoreMetadataModuleIsMetadataFrozenRequest\n *\n * @param ipId address\n *//**\n * CoreMetadataModuleSupportsInterfaceRequest\n *\n * @param interfaceId bytes4\n *//**\n * CoreMetadataModuleFreezeMetadataRequest\n *\n * @param ipId address\n *//**\n * CoreMetadataModuleInitializeRequest\n *\n * @param accessManager address\n *//**\n * CoreMetadataModuleSetAllRequest\n *\n * @param ipId address\n * @param metadataURI string\n * @param metadataHash bytes32\n * @param nftMetadataHash bytes32\n *//**\n * CoreMetadataModuleSetAuthorityRequest\n *\n * @param newAuthority address\n *//**\n * CoreMetadataModuleSetMetadataUriRequest\n *\n * @param ipId address\n * @param metadataURI string\n * @param metadataHash bytes32\n *//**\n * CoreMetadataModuleUpdateNftTokenUriRequest\n *\n * @param ipId address\n * @param nftMetadataHash bytes32\n *//**\n * CoreMetadataModuleUpgradeToAndCallRequest\n *\n * @param newImplementation address\n * @param data bytes\n *//**\n * contract CoreMetadataModule event\n */var CoreMetadataModuleEventClient=/*#__PURE__*/function(){function CoreMetadataModuleEventClient(rpcClient,address){var _rpcClient$chain3;_classCallCheck(this,CoreMetadataModuleEventClient);this.address=address||getAddress(coreMetadataModuleAddress,(_rpcClient$chain3=rpcClient.chain)===null||_rpcClient$chain3===void 0?void 0:_rpcClient$chain3.id);this.rpcClient=rpcClient;}/**\n   * event AuthorityUpdated for contract CoreMetadataModule\n   */return _createClass(CoreMetadataModuleEventClient,[{key:\"watchAuthorityUpdatedEvent\",value:function watchAuthorityUpdatedEvent(_onLogs2){return this.rpcClient.watchContractEvent({abi:coreMetadataModuleAbi,address:this.address,eventName:\"AuthorityUpdated\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs2(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event AuthorityUpdated for contract CoreMetadataModule\n   */},{key:\"parseTxAuthorityUpdatedEvent\",value:function parseTxAuthorityUpdatedEvent(txReceipt){var targetLogs=[];var _iterator2=_createForOfIteratorHelper(txReceipt.logs),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var log=_step2.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:coreMetadataModuleAbi,eventName:\"AuthorityUpdated\",data:log.data,topics:log.topics});if(event.eventName===\"AuthorityUpdated\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return targetLogs;}/**\n   * event Initialized for contract CoreMetadataModule\n   */},{key:\"watchInitializedEvent\",value:function watchInitializedEvent(_onLogs3){return this.rpcClient.watchContractEvent({abi:coreMetadataModuleAbi,address:this.address,eventName:\"Initialized\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs3(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event Initialized for contract CoreMetadataModule\n   */},{key:\"parseTxInitializedEvent\",value:function parseTxInitializedEvent(txReceipt){var targetLogs=[];var _iterator3=_createForOfIteratorHelper(txReceipt.logs),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var log=_step3.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:coreMetadataModuleAbi,eventName:\"Initialized\",data:log.data,topics:log.topics});if(event.eventName===\"Initialized\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return targetLogs;}/**\n   * event MetadataFrozen for contract CoreMetadataModule\n   */},{key:\"watchMetadataFrozenEvent\",value:function watchMetadataFrozenEvent(_onLogs4){return this.rpcClient.watchContractEvent({abi:coreMetadataModuleAbi,address:this.address,eventName:\"MetadataFrozen\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs4(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event MetadataFrozen for contract CoreMetadataModule\n   */},{key:\"parseTxMetadataFrozenEvent\",value:function parseTxMetadataFrozenEvent(txReceipt){var targetLogs=[];var _iterator4=_createForOfIteratorHelper(txReceipt.logs),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var log=_step4.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:coreMetadataModuleAbi,eventName:\"MetadataFrozen\",data:log.data,topics:log.topics});if(event.eventName===\"MetadataFrozen\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}return targetLogs;}/**\n   * event MetadataURISet for contract CoreMetadataModule\n   */},{key:\"watchMetadataUriSetEvent\",value:function watchMetadataUriSetEvent(_onLogs5){return this.rpcClient.watchContractEvent({abi:coreMetadataModuleAbi,address:this.address,eventName:\"MetadataURISet\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs5(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event MetadataURISet for contract CoreMetadataModule\n   */},{key:\"parseTxMetadataUriSetEvent\",value:function parseTxMetadataUriSetEvent(txReceipt){var targetLogs=[];var _iterator5=_createForOfIteratorHelper(txReceipt.logs),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var log=_step5.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:coreMetadataModuleAbi,eventName:\"MetadataURISet\",data:log.data,topics:log.topics});if(event.eventName===\"MetadataURISet\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}return targetLogs;}/**\n   * event NFTTokenURISet for contract CoreMetadataModule\n   */},{key:\"watchNftTokenUriSetEvent\",value:function watchNftTokenUriSetEvent(_onLogs6){return this.rpcClient.watchContractEvent({abi:coreMetadataModuleAbi,address:this.address,eventName:\"NFTTokenURISet\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs6(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event NFTTokenURISet for contract CoreMetadataModule\n   */},{key:\"parseTxNftTokenUriSetEvent\",value:function parseTxNftTokenUriSetEvent(txReceipt){var targetLogs=[];var _iterator6=_createForOfIteratorHelper(txReceipt.logs),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var log=_step6.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:coreMetadataModuleAbi,eventName:\"NFTTokenURISet\",data:log.data,topics:log.topics});if(event.eventName===\"NFTTokenURISet\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return targetLogs;}/**\n   * event Upgraded for contract CoreMetadataModule\n   */},{key:\"watchUpgradedEvent\",value:function watchUpgradedEvent(_onLogs7){return this.rpcClient.watchContractEvent({abi:coreMetadataModuleAbi,address:this.address,eventName:\"Upgraded\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs7(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event Upgraded for contract CoreMetadataModule\n   */},{key:\"parseTxUpgradedEvent\",value:function parseTxUpgradedEvent(txReceipt){var targetLogs=[];var _iterator7=_createForOfIteratorHelper(txReceipt.logs),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var log=_step7.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:coreMetadataModuleAbi,eventName:\"Upgraded\",data:log.data,topics:log.topics});if(event.eventName===\"Upgraded\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}return targetLogs;}}]);}();/**\n * contract CoreMetadataModule readonly method\n */var CoreMetadataModuleReadOnlyClient=/*#__PURE__*/function(_CoreMetadataModuleEv){function CoreMetadataModuleReadOnlyClient(rpcClient,address){_classCallCheck(this,CoreMetadataModuleReadOnlyClient);return _callSuper(this,CoreMetadataModuleReadOnlyClient,[rpcClient,address]);}/**\n   * method ACCESS_CONTROLLER for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleAccessControllerRequest\n   * @return Promise<CoreMetadataModuleAccessControllerResponse>\n   */_inherits(CoreMetadataModuleReadOnlyClient,_CoreMetadataModuleEv);return _createClass(CoreMetadataModuleReadOnlyClient,[{key:\"accessController\",value:(function(){var _accessController=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0(){return _regenerator().w(function(_context0){while(1)switch(_context0.n){case 0:_context0.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"ACCESS_CONTROLLER\"});case 1:return _context0.a(2,_context0.v);}},_callee0,this);}));function accessController(){return _accessController.apply(this,arguments);}return accessController;}()/**\n   * method IP_ASSET_REGISTRY for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleIpAssetRegistryRequest\n   * @return Promise<CoreMetadataModuleIpAssetRegistryResponse>\n   */)},{key:\"ipAssetRegistry\",value:(function(){var _ipAssetRegistry=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(){return _regenerator().w(function(_context1){while(1)switch(_context1.n){case 0:_context1.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"IP_ASSET_REGISTRY\"});case 1:return _context1.a(2,_context1.v);}},_callee1,this);}));function ipAssetRegistry(){return _ipAssetRegistry.apply(this,arguments);}return ipAssetRegistry;}()/**\n   * method UPGRADE_INTERFACE_VERSION for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleUpgradeInterfaceVersionRequest\n   * @return Promise<CoreMetadataModuleUpgradeInterfaceVersionResponse>\n   */)},{key:\"upgradeInterfaceVersion\",value:(function(){var _upgradeInterfaceVersion=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10(){return _regenerator().w(function(_context10){while(1)switch(_context10.n){case 0:_context10.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"UPGRADE_INTERFACE_VERSION\"});case 1:return _context10.a(2,_context10.v);}},_callee10,this);}));function upgradeInterfaceVersion(){return _upgradeInterfaceVersion.apply(this,arguments);}return upgradeInterfaceVersion;}()/**\n   * method authority for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleAuthorityRequest\n   * @return Promise<CoreMetadataModuleAuthorityResponse>\n   */)},{key:\"authority\",value:(function(){var _authority=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11(){return _regenerator().w(function(_context11){while(1)switch(_context11.n){case 0:_context11.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"authority\"});case 1:return _context11.a(2,_context11.v);}},_callee11,this);}));function authority(){return _authority.apply(this,arguments);}return authority;}()/**\n   * method isConsumingScheduledOp for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleIsConsumingScheduledOpRequest\n   * @return Promise<CoreMetadataModuleIsConsumingScheduledOpResponse>\n   */)},{key:\"isConsumingScheduledOp\",value:(function(){var _isConsumingScheduledOp=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12(){return _regenerator().w(function(_context12){while(1)switch(_context12.n){case 0:_context12.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"isConsumingScheduledOp\"});case 1:return _context12.a(2,_context12.v);}},_callee12,this);}));function isConsumingScheduledOp(){return _isConsumingScheduledOp.apply(this,arguments);}return isConsumingScheduledOp;}()/**\n   * method isMetadataFrozen for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleIsMetadataFrozenRequest\n   * @return Promise<CoreMetadataModuleIsMetadataFrozenResponse>\n   */)},{key:\"isMetadataFrozen\",value:(function(){var _isMetadataFrozen=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13(request){return _regenerator().w(function(_context13){while(1)switch(_context13.n){case 0:_context13.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"isMetadataFrozen\",args:[request.ipId]});case 1:return _context13.a(2,_context13.v);}},_callee13,this);}));function isMetadataFrozen(_x7){return _isMetadataFrozen.apply(this,arguments);}return isMetadataFrozen;}()/**\n   * method name for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleNameRequest\n   * @return Promise<CoreMetadataModuleNameResponse>\n   */)},{key:\"name\",value:(function(){var _name=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14(){return _regenerator().w(function(_context14){while(1)switch(_context14.n){case 0:_context14.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"name\"});case 1:return _context14.a(2,_context14.v);}},_callee14,this);}));function name(){return _name.apply(this,arguments);}return name;}()/**\n   * method proxiableUUID for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleProxiableUuidRequest\n   * @return Promise<CoreMetadataModuleProxiableUuidResponse>\n   */)},{key:\"proxiableUuid\",value:(function(){var _proxiableUuid=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15(){return _regenerator().w(function(_context15){while(1)switch(_context15.n){case 0:_context15.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"proxiableUUID\"});case 1:return _context15.a(2,_context15.v);}},_callee15,this);}));function proxiableUuid(){return _proxiableUuid.apply(this,arguments);}return proxiableUuid;}()/**\n   * method supportsInterface for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleSupportsInterfaceRequest\n   * @return Promise<CoreMetadataModuleSupportsInterfaceResponse>\n   */)},{key:\"supportsInterface\",value:(function(){var _supportsInterface=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16(request){return _regenerator().w(function(_context16){while(1)switch(_context16.n){case 0:_context16.n=1;return this.rpcClient.readContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"supportsInterface\",args:[request.interfaceId]});case 1:return _context16.a(2,_context16.v);}},_callee16,this);}));function supportsInterface(_x8){return _supportsInterface.apply(this,arguments);}return supportsInterface;}())}]);}(CoreMetadataModuleEventClient);/**\n * contract CoreMetadataModule write method\n */var CoreMetadataModuleClient=/*#__PURE__*/function(_CoreMetadataModuleRe){function CoreMetadataModuleClient(rpcClient,wallet,address){var _this3;_classCallCheck(this,CoreMetadataModuleClient);_this3=_callSuper(this,CoreMetadataModuleClient,[rpcClient,address]);_this3.wallet=wallet;return _this3;}/**\n   * method freezeMetadata for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleFreezeMetadataRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(CoreMetadataModuleClient,_CoreMetadataModuleRe);return _createClass(CoreMetadataModuleClient,[{key:\"freezeMetadata\",value:(function(){var _freezeMetadata=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee17(request){var _yield$this$rpcClient5,call;return _regenerator().w(function(_context17){while(1)switch(_context17.n){case 0:_context17.n=1;return this.rpcClient.simulateContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"freezeMetadata\",account:this.wallet.account,args:[request.ipId]});case 1:_yield$this$rpcClient5=_context17.v;call=_yield$this$rpcClient5.request;_context17.n=2;return this.wallet.writeContract(call);case 2:return _context17.a(2,_context17.v);}},_callee17,this);}));function freezeMetadata(_x9){return _freezeMetadata.apply(this,arguments);}return freezeMetadata;}()/**\n   * method freezeMetadata for contract CoreMetadataModule with only encode\n   *\n   * @param request CoreMetadataModuleFreezeMetadataRequest\n   * @return EncodedTxData\n   */)},{key:\"freezeMetadataEncode\",value:function freezeMetadataEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:coreMetadataModuleAbi,functionName:\"freezeMetadata\",args:[request.ipId]})};}/**\n   * method initialize for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleInitializeRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"initialize\",value:(function(){var _initialize=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee18(request){var _yield$this$rpcClient6,call;return _regenerator().w(function(_context18){while(1)switch(_context18.n){case 0:_context18.n=1;return this.rpcClient.simulateContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"initialize\",account:this.wallet.account,args:[request.accessManager]});case 1:_yield$this$rpcClient6=_context18.v;call=_yield$this$rpcClient6.request;_context18.n=2;return this.wallet.writeContract(call);case 2:return _context18.a(2,_context18.v);}},_callee18,this);}));function initialize(_x0){return _initialize.apply(this,arguments);}return initialize;}()/**\n   * method initialize for contract CoreMetadataModule with only encode\n   *\n   * @param request CoreMetadataModuleInitializeRequest\n   * @return EncodedTxData\n   */)},{key:\"initializeEncode\",value:function initializeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:coreMetadataModuleAbi,functionName:\"initialize\",args:[request.accessManager]})};}/**\n   * method setAll for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleSetAllRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setAll\",value:(function(){var _setAll=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee19(request){var _yield$this$rpcClient7,call;return _regenerator().w(function(_context19){while(1)switch(_context19.n){case 0:_context19.n=1;return this.rpcClient.simulateContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"setAll\",account:this.wallet.account,args:[request.ipId,request.metadataURI,request.metadataHash,request.nftMetadataHash]});case 1:_yield$this$rpcClient7=_context19.v;call=_yield$this$rpcClient7.request;_context19.n=2;return this.wallet.writeContract(call);case 2:return _context19.a(2,_context19.v);}},_callee19,this);}));function setAll(_x1){return _setAll.apply(this,arguments);}return setAll;}()/**\n   * method setAll for contract CoreMetadataModule with only encode\n   *\n   * @param request CoreMetadataModuleSetAllRequest\n   * @return EncodedTxData\n   */)},{key:\"setAllEncode\",value:function setAllEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:coreMetadataModuleAbi,functionName:\"setAll\",args:[request.ipId,request.metadataURI,request.metadataHash,request.nftMetadataHash]})};}/**\n   * method setAuthority for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleSetAuthorityRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setAuthority\",value:(function(){var _setAuthority=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee20(request){var _yield$this$rpcClient8,call;return _regenerator().w(function(_context20){while(1)switch(_context20.n){case 0:_context20.n=1;return this.rpcClient.simulateContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"setAuthority\",account:this.wallet.account,args:[request.newAuthority]});case 1:_yield$this$rpcClient8=_context20.v;call=_yield$this$rpcClient8.request;_context20.n=2;return this.wallet.writeContract(call);case 2:return _context20.a(2,_context20.v);}},_callee20,this);}));function setAuthority(_x10){return _setAuthority.apply(this,arguments);}return setAuthority;}()/**\n   * method setAuthority for contract CoreMetadataModule with only encode\n   *\n   * @param request CoreMetadataModuleSetAuthorityRequest\n   * @return EncodedTxData\n   */)},{key:\"setAuthorityEncode\",value:function setAuthorityEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:coreMetadataModuleAbi,functionName:\"setAuthority\",args:[request.newAuthority]})};}/**\n   * method setMetadataURI for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleSetMetadataUriRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setMetadataUri\",value:(function(){var _setMetadataUri=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee21(request){var _yield$this$rpcClient9,call;return _regenerator().w(function(_context21){while(1)switch(_context21.n){case 0:_context21.n=1;return this.rpcClient.simulateContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"setMetadataURI\",account:this.wallet.account,args:[request.ipId,request.metadataURI,request.metadataHash]});case 1:_yield$this$rpcClient9=_context21.v;call=_yield$this$rpcClient9.request;_context21.n=2;return this.wallet.writeContract(call);case 2:return _context21.a(2,_context21.v);}},_callee21,this);}));function setMetadataUri(_x11){return _setMetadataUri.apply(this,arguments);}return setMetadataUri;}()/**\n   * method setMetadataURI for contract CoreMetadataModule with only encode\n   *\n   * @param request CoreMetadataModuleSetMetadataUriRequest\n   * @return EncodedTxData\n   */)},{key:\"setMetadataUriEncode\",value:function setMetadataUriEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:coreMetadataModuleAbi,functionName:\"setMetadataURI\",args:[request.ipId,request.metadataURI,request.metadataHash]})};}/**\n   * method updateNftTokenURI for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleUpdateNftTokenUriRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"updateNftTokenUri\",value:(function(){var _updateNftTokenUri=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee22(request){var _yield$this$rpcClient0,call;return _regenerator().w(function(_context22){while(1)switch(_context22.n){case 0:_context22.n=1;return this.rpcClient.simulateContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"updateNftTokenURI\",account:this.wallet.account,args:[request.ipId,request.nftMetadataHash]});case 1:_yield$this$rpcClient0=_context22.v;call=_yield$this$rpcClient0.request;_context22.n=2;return this.wallet.writeContract(call);case 2:return _context22.a(2,_context22.v);}},_callee22,this);}));function updateNftTokenUri(_x12){return _updateNftTokenUri.apply(this,arguments);}return updateNftTokenUri;}()/**\n   * method updateNftTokenURI for contract CoreMetadataModule with only encode\n   *\n   * @param request CoreMetadataModuleUpdateNftTokenUriRequest\n   * @return EncodedTxData\n   */)},{key:\"updateNftTokenUriEncode\",value:function updateNftTokenUriEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:coreMetadataModuleAbi,functionName:\"updateNftTokenURI\",args:[request.ipId,request.nftMetadataHash]})};}/**\n   * method upgradeToAndCall for contract CoreMetadataModule\n   *\n   * @param request CoreMetadataModuleUpgradeToAndCallRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"upgradeToAndCall\",value:(function(){var _upgradeToAndCall=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee23(request){var _yield$this$rpcClient1,call;return _regenerator().w(function(_context23){while(1)switch(_context23.n){case 0:_context23.n=1;return this.rpcClient.simulateContract({abi:coreMetadataModuleAbi,address:this.address,functionName:\"upgradeToAndCall\",account:this.wallet.account,args:[request.newImplementation,request.data]});case 1:_yield$this$rpcClient1=_context23.v;call=_yield$this$rpcClient1.request;_context23.n=2;return this.wallet.writeContract(call);case 2:return _context23.a(2,_context23.v);}},_callee23,this);}));function upgradeToAndCall(_x13){return _upgradeToAndCall.apply(this,arguments);}return upgradeToAndCall;}()/**\n   * method upgradeToAndCall for contract CoreMetadataModule with only encode\n   *\n   * @param request CoreMetadataModuleUpgradeToAndCallRequest\n   * @return EncodedTxData\n   */)},{key:\"upgradeToAndCallEncode\",value:function upgradeToAndCallEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:coreMetadataModuleAbi,functionName:\"upgradeToAndCall\",args:[request.newImplementation,request.data]})};}}]);}(CoreMetadataModuleReadOnlyClient);// Contract DerivativeWorkflows =============================================================\n/**\n * DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest\n *\n * @param spgNftContract address\n * @param derivData tuple\n * @param ipMetadata tuple\n * @param recipient address\n * @param allowDuplicates bool\n *//**\n * DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest\n *\n * @param spgNftContract address\n * @param licenseTokenIds uint256[]\n * @param royaltyContext bytes\n * @param maxRts uint32\n * @param ipMetadata tuple\n * @param recipient address\n * @param allowDuplicates bool\n *//**\n * DerivativeWorkflowsMulticallRequest\n *\n * @param data bytes[]\n *//**\n * DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest\n *\n * @param nftContract address\n * @param tokenId uint256\n * @param derivData tuple\n * @param ipMetadata tuple\n * @param sigMetadataAndRegister tuple\n *//**\n * DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest\n *\n * @param nftContract address\n * @param tokenId uint256\n * @param licenseTokenIds uint256[]\n * @param royaltyContext bytes\n * @param maxRts uint32\n * @param ipMetadata tuple\n * @param sigMetadataAndRegister tuple\n *//**\n * contract DerivativeWorkflows write method\n */var DerivativeWorkflowsClient=/*#__PURE__*/function(){function DerivativeWorkflowsClient(rpcClient,wallet,address){var _rpcClient$chain4;_classCallCheck(this,DerivativeWorkflowsClient);this.address=address||getAddress(derivativeWorkflowsAddress,(_rpcClient$chain4=rpcClient.chain)===null||_rpcClient$chain4===void 0?void 0:_rpcClient$chain4.id);this.rpcClient=rpcClient;this.wallet=wallet;}/**\n   * method mintAndRegisterIpAndMakeDerivative for contract DerivativeWorkflows\n   *\n   * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest\n   * @return Promise<WriteContractReturnType>\n   */return _createClass(DerivativeWorkflowsClient,[{key:\"mintAndRegisterIpAndMakeDerivative\",value:(function(){var _mintAndRegisterIpAndMakeDerivative=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee24(request){var _yield$this$rpcClient10,call;return _regenerator().w(function(_context24){while(1)switch(_context24.n){case 0:_context24.n=1;return this.rpcClient.simulateContract({abi:derivativeWorkflowsAbi,address:this.address,functionName:\"mintAndRegisterIpAndMakeDerivative\",account:this.wallet.account,args:[request.spgNftContract,request.derivData,request.ipMetadata,request.recipient,request.allowDuplicates]});case 1:_yield$this$rpcClient10=_context24.v;call=_yield$this$rpcClient10.request;_context24.n=2;return this.wallet.writeContract(call);case 2:return _context24.a(2,_context24.v);}},_callee24,this);}));function mintAndRegisterIpAndMakeDerivative(_x14){return _mintAndRegisterIpAndMakeDerivative.apply(this,arguments);}return mintAndRegisterIpAndMakeDerivative;}()/**\n   * method mintAndRegisterIpAndMakeDerivative for contract DerivativeWorkflows with only encode\n   *\n   * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest\n   * @return EncodedTxData\n   */)},{key:\"mintAndRegisterIpAndMakeDerivativeEncode\",value:function mintAndRegisterIpAndMakeDerivativeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:derivativeWorkflowsAbi,functionName:\"mintAndRegisterIpAndMakeDerivative\",args:[request.spgNftContract,request.derivData,request.ipMetadata,request.recipient,request.allowDuplicates]})};}/**\n   * method mintAndRegisterIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows\n   *\n   * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"mintAndRegisterIpAndMakeDerivativeWithLicenseTokens\",value:(function(){var _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee25(request){var _yield$this$rpcClient11,call;return _regenerator().w(function(_context25){while(1)switch(_context25.n){case 0:_context25.n=1;return this.rpcClient.simulateContract({abi:derivativeWorkflowsAbi,address:this.address,functionName:\"mintAndRegisterIpAndMakeDerivativeWithLicenseTokens\",account:this.wallet.account,args:[request.spgNftContract,request.licenseTokenIds,request.royaltyContext,request.maxRts,request.ipMetadata,request.recipient,request.allowDuplicates]});case 1:_yield$this$rpcClient11=_context25.v;call=_yield$this$rpcClient11.request;_context25.n=2;return this.wallet.writeContract(call);case 2:return _context25.a(2,_context25.v);}},_callee25,this);}));function mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(_x15){return _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens.apply(this,arguments);}return mintAndRegisterIpAndMakeDerivativeWithLicenseTokens;}()/**\n   * method mintAndRegisterIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows with only encode\n   *\n   * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest\n   * @return EncodedTxData\n   */)},{key:\"mintAndRegisterIpAndMakeDerivativeWithLicenseTokensEncode\",value:function mintAndRegisterIpAndMakeDerivativeWithLicenseTokensEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:derivativeWorkflowsAbi,functionName:\"mintAndRegisterIpAndMakeDerivativeWithLicenseTokens\",args:[request.spgNftContract,request.licenseTokenIds,request.royaltyContext,request.maxRts,request.ipMetadata,request.recipient,request.allowDuplicates]})};}/**\n   * method multicall for contract DerivativeWorkflows\n   *\n   * @param request DerivativeWorkflowsMulticallRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"multicall\",value:(function(){var _multicall=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee26(request){var _yield$this$rpcClient12,call;return _regenerator().w(function(_context26){while(1)switch(_context26.n){case 0:_context26.n=1;return this.rpcClient.simulateContract({abi:derivativeWorkflowsAbi,address:this.address,functionName:\"multicall\",account:this.wallet.account,args:[request.data]});case 1:_yield$this$rpcClient12=_context26.v;call=_yield$this$rpcClient12.request;_context26.n=2;return this.wallet.writeContract(call);case 2:return _context26.a(2,_context26.v);}},_callee26,this);}));function multicall(_x16){return _multicall.apply(this,arguments);}return multicall;}()/**\n   * method multicall for contract DerivativeWorkflows with only encode\n   *\n   * @param request DerivativeWorkflowsMulticallRequest\n   * @return EncodedTxData\n   */)},{key:\"multicallEncode\",value:function multicallEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:derivativeWorkflowsAbi,functionName:\"multicall\",args:[request.data]})};}/**\n   * method registerIpAndMakeDerivative for contract DerivativeWorkflows\n   *\n   * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerIpAndMakeDerivative\",value:(function(){var _registerIpAndMakeDerivative=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee27(request){var _yield$this$rpcClient13,call;return _regenerator().w(function(_context27){while(1)switch(_context27.n){case 0:_context27.n=1;return this.rpcClient.simulateContract({abi:derivativeWorkflowsAbi,address:this.address,functionName:\"registerIpAndMakeDerivative\",account:this.wallet.account,args:[request.nftContract,request.tokenId,request.derivData,request.ipMetadata,request.sigMetadataAndRegister]});case 1:_yield$this$rpcClient13=_context27.v;call=_yield$this$rpcClient13.request;_context27.n=2;return this.wallet.writeContract(call);case 2:return _context27.a(2,_context27.v);}},_callee27,this);}));function registerIpAndMakeDerivative(_x17){return _registerIpAndMakeDerivative.apply(this,arguments);}return registerIpAndMakeDerivative;}()/**\n   * method registerIpAndMakeDerivative for contract DerivativeWorkflows with only encode\n   *\n   * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest\n   * @return EncodedTxData\n   */)},{key:\"registerIpAndMakeDerivativeEncode\",value:function registerIpAndMakeDerivativeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:derivativeWorkflowsAbi,functionName:\"registerIpAndMakeDerivative\",args:[request.nftContract,request.tokenId,request.derivData,request.ipMetadata,request.sigMetadataAndRegister]})};}/**\n   * method registerIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows\n   *\n   * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerIpAndMakeDerivativeWithLicenseTokens\",value:(function(){var _registerIpAndMakeDerivativeWithLicenseTokens=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee28(request){var _yield$this$rpcClient14,call;return _regenerator().w(function(_context28){while(1)switch(_context28.n){case 0:_context28.n=1;return this.rpcClient.simulateContract({abi:derivativeWorkflowsAbi,address:this.address,functionName:\"registerIpAndMakeDerivativeWithLicenseTokens\",account:this.wallet.account,args:[request.nftContract,request.tokenId,request.licenseTokenIds,request.royaltyContext,request.maxRts,request.ipMetadata,request.sigMetadataAndRegister]});case 1:_yield$this$rpcClient14=_context28.v;call=_yield$this$rpcClient14.request;_context28.n=2;return this.wallet.writeContract(call);case 2:return _context28.a(2,_context28.v);}},_callee28,this);}));function registerIpAndMakeDerivativeWithLicenseTokens(_x18){return _registerIpAndMakeDerivativeWithLicenseTokens.apply(this,arguments);}return registerIpAndMakeDerivativeWithLicenseTokens;}()/**\n   * method registerIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows with only encode\n   *\n   * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest\n   * @return EncodedTxData\n   */)},{key:\"registerIpAndMakeDerivativeWithLicenseTokensEncode\",value:function registerIpAndMakeDerivativeWithLicenseTokensEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:derivativeWorkflowsAbi,functionName:\"registerIpAndMakeDerivativeWithLicenseTokens\",args:[request.nftContract,request.tokenId,request.licenseTokenIds,request.royaltyContext,request.maxRts,request.ipMetadata,request.sigMetadataAndRegister]})};}}]);}();// Contract DisputeModule =============================================================\n/**\n * DisputeModuleDisputeCancelledEvent\n *\n * @param disputeId uint256\n * @param data bytes\n *//**\n * DisputeModuleDisputeRaisedEvent\n *\n * @param disputeId uint256\n * @param targetIpId address\n * @param disputeInitiator address\n * @param disputeTimestamp uint256\n * @param arbitrationPolicy address\n * @param disputeEvidenceHash bytes32\n * @param targetTag bytes32\n * @param data bytes\n *//**\n * DisputeModuleDisputeResolvedEvent\n *\n * @param disputeId uint256\n * @param data bytes\n *//**\n * DisputeModuleIsWhitelistedDisputeTagRequest\n *\n * @param tag bytes32\n *//**\n * DisputeModuleIsWhitelistedDisputeTagResponse\n *\n * @param allowed bool\n *//**\n * DisputeModuleCancelDisputeRequest\n *\n * @param disputeId uint256\n * @param data bytes\n *//**\n * DisputeModuleRaiseDisputeRequest\n *\n * @param targetIpId address\n * @param disputeEvidenceHash bytes32\n * @param targetTag bytes32\n * @param data bytes\n *//**\n * DisputeModuleResolveDisputeRequest\n *\n * @param disputeId uint256\n * @param data bytes\n *//**\n * DisputeModuleTagIfRelatedIpInfringedRequest\n *\n * @param ipIdToTag address\n * @param infringerDisputeId uint256\n *//**\n * contract DisputeModule event\n */var DisputeModuleEventClient=/*#__PURE__*/function(){function DisputeModuleEventClient(rpcClient,address){var _rpcClient$chain5;_classCallCheck(this,DisputeModuleEventClient);this.address=address||getAddress(disputeModuleAddress,(_rpcClient$chain5=rpcClient.chain)===null||_rpcClient$chain5===void 0?void 0:_rpcClient$chain5.id);this.rpcClient=rpcClient;}/**\n   * event DisputeCancelled for contract DisputeModule\n   */return _createClass(DisputeModuleEventClient,[{key:\"watchDisputeCancelledEvent\",value:function watchDisputeCancelledEvent(_onLogs8){return this.rpcClient.watchContractEvent({abi:disputeModuleAbi,address:this.address,eventName:\"DisputeCancelled\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs8(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event DisputeCancelled for contract DisputeModule\n   */},{key:\"parseTxDisputeCancelledEvent\",value:function parseTxDisputeCancelledEvent(txReceipt){var targetLogs=[];var _iterator8=_createForOfIteratorHelper(txReceipt.logs),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var log=_step8.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:disputeModuleAbi,eventName:\"DisputeCancelled\",data:log.data,topics:log.topics});if(event.eventName===\"DisputeCancelled\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}return targetLogs;}/**\n   * event DisputeRaised for contract DisputeModule\n   */},{key:\"watchDisputeRaisedEvent\",value:function watchDisputeRaisedEvent(_onLogs9){return this.rpcClient.watchContractEvent({abi:disputeModuleAbi,address:this.address,eventName:\"DisputeRaised\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs9(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event DisputeRaised for contract DisputeModule\n   */},{key:\"parseTxDisputeRaisedEvent\",value:function parseTxDisputeRaisedEvent(txReceipt){var targetLogs=[];var _iterator9=_createForOfIteratorHelper(txReceipt.logs),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var log=_step9.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:disputeModuleAbi,eventName:\"DisputeRaised\",data:log.data,topics:log.topics});if(event.eventName===\"DisputeRaised\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}return targetLogs;}/**\n   * event DisputeResolved for contract DisputeModule\n   */},{key:\"watchDisputeResolvedEvent\",value:function watchDisputeResolvedEvent(_onLogs0){return this.rpcClient.watchContractEvent({abi:disputeModuleAbi,address:this.address,eventName:\"DisputeResolved\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs0(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event DisputeResolved for contract DisputeModule\n   */},{key:\"parseTxDisputeResolvedEvent\",value:function parseTxDisputeResolvedEvent(txReceipt){var targetLogs=[];var _iterator0=_createForOfIteratorHelper(txReceipt.logs),_step0;try{for(_iterator0.s();!(_step0=_iterator0.n()).done;){var log=_step0.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:disputeModuleAbi,eventName:\"DisputeResolved\",data:log.data,topics:log.topics});if(event.eventName===\"DisputeResolved\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator0.e(err);}finally{_iterator0.f();}return targetLogs;}}]);}();/**\n * contract DisputeModule readonly method\n */var DisputeModuleReadOnlyClient=/*#__PURE__*/function(_DisputeModuleEventCl){function DisputeModuleReadOnlyClient(rpcClient,address){_classCallCheck(this,DisputeModuleReadOnlyClient);return _callSuper(this,DisputeModuleReadOnlyClient,[rpcClient,address]);}/**\n   * method isWhitelistedDisputeTag for contract DisputeModule\n   *\n   * @param request DisputeModuleIsWhitelistedDisputeTagRequest\n   * @return Promise<DisputeModuleIsWhitelistedDisputeTagResponse>\n   */_inherits(DisputeModuleReadOnlyClient,_DisputeModuleEventCl);return _createClass(DisputeModuleReadOnlyClient,[{key:\"isWhitelistedDisputeTag\",value:(function(){var _isWhitelistedDisputeTag=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee29(request){var result;return _regenerator().w(function(_context29){while(1)switch(_context29.n){case 0:_context29.n=1;return this.rpcClient.readContract({abi:disputeModuleAbi,address:this.address,functionName:\"isWhitelistedDisputeTag\",args:[request.tag]});case 1:result=_context29.v;return _context29.a(2,{allowed:result});}},_callee29,this);}));function isWhitelistedDisputeTag(_x19){return _isWhitelistedDisputeTag.apply(this,arguments);}return isWhitelistedDisputeTag;}())}]);}(DisputeModuleEventClient);/**\n * contract DisputeModule write method\n */var DisputeModuleClient=/*#__PURE__*/function(_DisputeModuleReadOnl){function DisputeModuleClient(rpcClient,wallet,address){var _this4;_classCallCheck(this,DisputeModuleClient);_this4=_callSuper(this,DisputeModuleClient,[rpcClient,address]);_this4.wallet=wallet;return _this4;}/**\n   * method cancelDispute for contract DisputeModule\n   *\n   * @param request DisputeModuleCancelDisputeRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(DisputeModuleClient,_DisputeModuleReadOnl);return _createClass(DisputeModuleClient,[{key:\"cancelDispute\",value:(function(){var _cancelDispute=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee30(request){var _yield$this$rpcClient15,call;return _regenerator().w(function(_context30){while(1)switch(_context30.n){case 0:_context30.n=1;return this.rpcClient.simulateContract({abi:disputeModuleAbi,address:this.address,functionName:\"cancelDispute\",account:this.wallet.account,args:[request.disputeId,request.data]});case 1:_yield$this$rpcClient15=_context30.v;call=_yield$this$rpcClient15.request;_context30.n=2;return this.wallet.writeContract(call);case 2:return _context30.a(2,_context30.v);}},_callee30,this);}));function cancelDispute(_x20){return _cancelDispute.apply(this,arguments);}return cancelDispute;}()/**\n   * method cancelDispute for contract DisputeModule with only encode\n   *\n   * @param request DisputeModuleCancelDisputeRequest\n   * @return EncodedTxData\n   */)},{key:\"cancelDisputeEncode\",value:function cancelDisputeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:disputeModuleAbi,functionName:\"cancelDispute\",args:[request.disputeId,request.data]})};}/**\n   * method raiseDispute for contract DisputeModule\n   *\n   * @param request DisputeModuleRaiseDisputeRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"raiseDispute\",value:(function(){var _raiseDispute=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee31(request){var _yield$this$rpcClient16,call;return _regenerator().w(function(_context31){while(1)switch(_context31.n){case 0:_context31.n=1;return this.rpcClient.simulateContract({abi:disputeModuleAbi,address:this.address,functionName:\"raiseDispute\",account:this.wallet.account,args:[request.targetIpId,request.disputeEvidenceHash,request.targetTag,request.data]});case 1:_yield$this$rpcClient16=_context31.v;call=_yield$this$rpcClient16.request;_context31.n=2;return this.wallet.writeContract(call);case 2:return _context31.a(2,_context31.v);}},_callee31,this);}));function raiseDispute(_x21){return _raiseDispute.apply(this,arguments);}return raiseDispute;}()/**\n   * method raiseDispute for contract DisputeModule with only encode\n   *\n   * @param request DisputeModuleRaiseDisputeRequest\n   * @return EncodedTxData\n   */)},{key:\"raiseDisputeEncode\",value:function raiseDisputeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:disputeModuleAbi,functionName:\"raiseDispute\",args:[request.targetIpId,request.disputeEvidenceHash,request.targetTag,request.data]})};}/**\n   * method resolveDispute for contract DisputeModule\n   *\n   * @param request DisputeModuleResolveDisputeRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"resolveDispute\",value:(function(){var _resolveDispute=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee32(request){var _yield$this$rpcClient17,call;return _regenerator().w(function(_context32){while(1)switch(_context32.n){case 0:_context32.n=1;return this.rpcClient.simulateContract({abi:disputeModuleAbi,address:this.address,functionName:\"resolveDispute\",account:this.wallet.account,args:[request.disputeId,request.data]});case 1:_yield$this$rpcClient17=_context32.v;call=_yield$this$rpcClient17.request;_context32.n=2;return this.wallet.writeContract(call);case 2:return _context32.a(2,_context32.v);}},_callee32,this);}));function resolveDispute(_x22){return _resolveDispute.apply(this,arguments);}return resolveDispute;}()/**\n   * method resolveDispute for contract DisputeModule with only encode\n   *\n   * @param request DisputeModuleResolveDisputeRequest\n   * @return EncodedTxData\n   */)},{key:\"resolveDisputeEncode\",value:function resolveDisputeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:disputeModuleAbi,functionName:\"resolveDispute\",args:[request.disputeId,request.data]})};}/**\n   * method tagIfRelatedIpInfringed for contract DisputeModule\n   *\n   * @param request DisputeModuleTagIfRelatedIpInfringedRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"tagIfRelatedIpInfringed\",value:(function(){var _tagIfRelatedIpInfringed=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee33(request){var _yield$this$rpcClient18,call;return _regenerator().w(function(_context33){while(1)switch(_context33.n){case 0:_context33.n=1;return this.rpcClient.simulateContract({abi:disputeModuleAbi,address:this.address,functionName:\"tagIfRelatedIpInfringed\",account:this.wallet.account,args:[request.ipIdToTag,request.infringerDisputeId]});case 1:_yield$this$rpcClient18=_context33.v;call=_yield$this$rpcClient18.request;_context33.n=2;return this.wallet.writeContract(call);case 2:return _context33.a(2,_context33.v);}},_callee33,this);}));function tagIfRelatedIpInfringed(_x23){return _tagIfRelatedIpInfringed.apply(this,arguments);}return tagIfRelatedIpInfringed;}()/**\n   * method tagIfRelatedIpInfringed for contract DisputeModule with only encode\n   *\n   * @param request DisputeModuleTagIfRelatedIpInfringedRequest\n   * @return EncodedTxData\n   */)},{key:\"tagIfRelatedIpInfringedEncode\",value:function tagIfRelatedIpInfringedEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:disputeModuleAbi,functionName:\"tagIfRelatedIpInfringed\",args:[request.ipIdToTag,request.infringerDisputeId]})};}}]);}(DisputeModuleReadOnlyClient);// Contract ERC20 =============================================================\n/**\n * Erc20AllowanceRequest\n *\n * @param owner address\n * @param spender address\n *//**\n * Erc20BalanceOfRequest\n *\n * @param account address\n *//**\n * Erc20ApproveRequest\n *\n * @param spender address\n * @param value uint256\n *//**\n * Erc20MintRequest\n *\n * @param to address\n * @param amount uint256\n *//**\n * Erc20TransferRequest\n *\n * @param to address\n * @param value uint256\n *//**\n * Erc20TransferFromRequest\n *\n * @param from address\n * @param to address\n * @param value uint256\n *//**\n * contract ERC20 readonly method\n */var Erc20ReadOnlyClient=/*#__PURE__*/function(){function Erc20ReadOnlyClient(rpcClient,address){var _rpcClient$chain6;_classCallCheck(this,Erc20ReadOnlyClient);this.address=address||getAddress(erc20Address,(_rpcClient$chain6=rpcClient.chain)===null||_rpcClient$chain6===void 0?void 0:_rpcClient$chain6.id);this.rpcClient=rpcClient;}/**\n   * method allowance for contract ERC20\n   *\n   * @param request Erc20AllowanceRequest\n   * @return Promise<Erc20AllowanceResponse>\n   */return _createClass(Erc20ReadOnlyClient,[{key:\"allowance\",value:(function(){var _allowance=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee34(request){return _regenerator().w(function(_context34){while(1)switch(_context34.n){case 0:_context34.n=1;return this.rpcClient.readContract({abi:erc20Abi,address:this.address,functionName:\"allowance\",args:[request.owner,request.spender]});case 1:return _context34.a(2,_context34.v);}},_callee34,this);}));function allowance(_x24){return _allowance.apply(this,arguments);}return allowance;}()/**\n   * method balanceOf for contract ERC20\n   *\n   * @param request Erc20BalanceOfRequest\n   * @return Promise<Erc20BalanceOfResponse>\n   */)},{key:\"balanceOf\",value:(function(){var _balanceOf=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee35(request){return _regenerator().w(function(_context35){while(1)switch(_context35.n){case 0:_context35.n=1;return this.rpcClient.readContract({abi:erc20Abi,address:this.address,functionName:\"balanceOf\",args:[request.account]});case 1:return _context35.a(2,_context35.v);}},_callee35,this);}));function balanceOf(_x25){return _balanceOf.apply(this,arguments);}return balanceOf;}())}]);}();/**\n * contract ERC20 write method\n */var Erc20Client=/*#__PURE__*/function(_Erc20ReadOnlyClient){function Erc20Client(rpcClient,wallet,address){var _this5;_classCallCheck(this,Erc20Client);_this5=_callSuper(this,Erc20Client,[rpcClient,address]);_this5.wallet=wallet;return _this5;}/**\n   * method approve for contract ERC20\n   *\n   * @param request Erc20ApproveRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(Erc20Client,_Erc20ReadOnlyClient);return _createClass(Erc20Client,[{key:\"approve\",value:(function(){var _approve=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee36(request){var _yield$this$rpcClient19,call;return _regenerator().w(function(_context36){while(1)switch(_context36.n){case 0:_context36.n=1;return this.rpcClient.simulateContract({abi:erc20Abi,address:this.address,functionName:\"approve\",account:this.wallet.account,args:[request.spender,request.value]});case 1:_yield$this$rpcClient19=_context36.v;call=_yield$this$rpcClient19.request;_context36.n=2;return this.wallet.writeContract(call);case 2:return _context36.a(2,_context36.v);}},_callee36,this);}));function approve(_x26){return _approve.apply(this,arguments);}return approve;}()/**\n   * method approve for contract ERC20 with only encode\n   *\n   * @param request Erc20ApproveRequest\n   * @return EncodedTxData\n   */)},{key:\"approveEncode\",value:function approveEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:erc20Abi,functionName:\"approve\",args:[request.spender,request.value]})};}/**\n   * method mint for contract ERC20\n   *\n   * @param request Erc20MintRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"mint\",value:(function(){var _mint=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee37(request){var _yield$this$rpcClient20,call;return _regenerator().w(function(_context37){while(1)switch(_context37.n){case 0:_context37.n=1;return this.rpcClient.simulateContract({abi:erc20Abi,address:this.address,functionName:\"mint\",account:this.wallet.account,args:[request.to,request.amount]});case 1:_yield$this$rpcClient20=_context37.v;call=_yield$this$rpcClient20.request;_context37.n=2;return this.wallet.writeContract(call);case 2:return _context37.a(2,_context37.v);}},_callee37,this);}));function mint(_x27){return _mint.apply(this,arguments);}return mint;}()/**\n   * method mint for contract ERC20 with only encode\n   *\n   * @param request Erc20MintRequest\n   * @return EncodedTxData\n   */)},{key:\"mintEncode\",value:function mintEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:erc20Abi,functionName:\"mint\",args:[request.to,request.amount]})};}/**\n   * method transfer for contract ERC20\n   *\n   * @param request Erc20TransferRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"transfer\",value:(function(){var _transfer=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee38(request){var _yield$this$rpcClient21,call;return _regenerator().w(function(_context38){while(1)switch(_context38.n){case 0:_context38.n=1;return this.rpcClient.simulateContract({abi:erc20Abi,address:this.address,functionName:\"transfer\",account:this.wallet.account,args:[request.to,request.value]});case 1:_yield$this$rpcClient21=_context38.v;call=_yield$this$rpcClient21.request;_context38.n=2;return this.wallet.writeContract(call);case 2:return _context38.a(2,_context38.v);}},_callee38,this);}));function transfer(_x28){return _transfer.apply(this,arguments);}return transfer;}()/**\n   * method transfer for contract ERC20 with only encode\n   *\n   * @param request Erc20TransferRequest\n   * @return EncodedTxData\n   */)},{key:\"transferEncode\",value:function transferEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:erc20Abi,functionName:\"transfer\",args:[request.to,request.value]})};}/**\n   * method transferFrom for contract ERC20\n   *\n   * @param request Erc20TransferFromRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"transferFrom\",value:(function(){var _transferFrom=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee39(request){var _yield$this$rpcClient22,call;return _regenerator().w(function(_context39){while(1)switch(_context39.n){case 0:_context39.n=1;return this.rpcClient.simulateContract({abi:erc20Abi,address:this.address,functionName:\"transferFrom\",account:this.wallet.account,args:[request.from,request.to,request.value]});case 1:_yield$this$rpcClient22=_context39.v;call=_yield$this$rpcClient22.request;_context39.n=2;return this.wallet.writeContract(call);case 2:return _context39.a(2,_context39.v);}},_callee39,this);}));function transferFrom(_x29){return _transferFrom.apply(this,arguments);}return transferFrom;}()/**\n   * method transferFrom for contract ERC20 with only encode\n   *\n   * @param request Erc20TransferFromRequest\n   * @return EncodedTxData\n   */)},{key:\"transferFromEncode\",value:function transferFromEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:erc20Abi,functionName:\"transferFrom\",args:[request.from,request.to,request.value]})};}}]);}(Erc20ReadOnlyClient);// Contract EvenSplitGroupPool =============================================================\n/**\n * GroupingModuleClaimedRewardEvent\n *\n * @param groupId address\n * @param token address\n * @param ipId address[]\n * @param amount uint256[]\n *//**\n * GroupingModuleCollectedRoyaltiesToGroupPoolEvent\n *\n * @param groupId address\n * @param token address\n * @param pool address\n * @param amount uint256\n *//**\n * GroupingModuleIpGroupRegisteredEvent\n *\n * @param groupId address\n * @param groupPool address\n *//**\n * GroupingModuleGetClaimableRewardRequest\n *\n * @param groupId address\n * @param token address\n * @param ipIds address[]\n *//**\n * GroupingModuleAddIpRequest\n *\n * @param groupIpId address\n * @param ipIds address[]\n * @param maxAllowedRewardShare uint256\n *//**\n * GroupingModuleClaimRewardRequest\n *\n * @param groupId address\n * @param token address\n * @param ipIds address[]\n *//**\n * GroupingModuleCollectRoyaltiesRequest\n *\n * @param groupId address\n * @param token address\n *//**\n * GroupingModuleRegisterGroupRequest\n *\n * @param groupPool address\n *//**\n * GroupingModuleRemoveIpRequest\n *\n * @param groupIpId address\n * @param ipIds address[]\n *//**\n * contract GroupingModule event\n */var GroupingModuleEventClient=/*#__PURE__*/function(){function GroupingModuleEventClient(rpcClient,address){var _rpcClient$chain8;_classCallCheck(this,GroupingModuleEventClient);this.address=address||getAddress(groupingModuleAddress,(_rpcClient$chain8=rpcClient.chain)===null||_rpcClient$chain8===void 0?void 0:_rpcClient$chain8.id);this.rpcClient=rpcClient;}/**\n   * event ClaimedReward for contract GroupingModule\n   */return _createClass(GroupingModuleEventClient,[{key:\"watchClaimedRewardEvent\",value:function watchClaimedRewardEvent(_onLogs14){return this.rpcClient.watchContractEvent({abi:groupingModuleAbi,address:this.address,eventName:\"ClaimedReward\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs14(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event ClaimedReward for contract GroupingModule\n   */},{key:\"parseTxClaimedRewardEvent\",value:function parseTxClaimedRewardEvent(txReceipt){var targetLogs=[];var _iterator14=_createForOfIteratorHelper(txReceipt.logs),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var log=_step14.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:groupingModuleAbi,eventName:\"ClaimedReward\",data:log.data,topics:log.topics});if(event.eventName===\"ClaimedReward\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}return targetLogs;}/**\n   * event CollectedRoyaltiesToGroupPool for contract GroupingModule\n   */},{key:\"watchCollectedRoyaltiesToGroupPoolEvent\",value:function watchCollectedRoyaltiesToGroupPoolEvent(_onLogs15){return this.rpcClient.watchContractEvent({abi:groupingModuleAbi,address:this.address,eventName:\"CollectedRoyaltiesToGroupPool\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs15(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event CollectedRoyaltiesToGroupPool for contract GroupingModule\n   */},{key:\"parseTxCollectedRoyaltiesToGroupPoolEvent\",value:function parseTxCollectedRoyaltiesToGroupPoolEvent(txReceipt){var targetLogs=[];var _iterator15=_createForOfIteratorHelper(txReceipt.logs),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var log=_step15.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:groupingModuleAbi,eventName:\"CollectedRoyaltiesToGroupPool\",data:log.data,topics:log.topics});if(event.eventName===\"CollectedRoyaltiesToGroupPool\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}return targetLogs;}/**\n   * event IPGroupRegistered for contract GroupingModule\n   */},{key:\"watchIpGroupRegisteredEvent\",value:function watchIpGroupRegisteredEvent(_onLogs16){return this.rpcClient.watchContractEvent({abi:groupingModuleAbi,address:this.address,eventName:\"IPGroupRegistered\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs16(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event IPGroupRegistered for contract GroupingModule\n   */},{key:\"parseTxIpGroupRegisteredEvent\",value:function parseTxIpGroupRegisteredEvent(txReceipt){var targetLogs=[];var _iterator16=_createForOfIteratorHelper(txReceipt.logs),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var log=_step16.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:groupingModuleAbi,eventName:\"IPGroupRegistered\",data:log.data,topics:log.topics});if(event.eventName===\"IPGroupRegistered\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}return targetLogs;}}]);}();/**\n * contract GroupingModule readonly method\n */var GroupingModuleReadOnlyClient=/*#__PURE__*/function(_GroupingModuleEventC){function GroupingModuleReadOnlyClient(rpcClient,address){_classCallCheck(this,GroupingModuleReadOnlyClient);return _callSuper(this,GroupingModuleReadOnlyClient,[rpcClient,address]);}/**\n   * method getClaimableReward for contract GroupingModule\n   *\n   * @param request GroupingModuleGetClaimableRewardRequest\n   * @return Promise<GroupingModuleGetClaimableRewardResponse>\n   */_inherits(GroupingModuleReadOnlyClient,_GroupingModuleEventC);return _createClass(GroupingModuleReadOnlyClient,[{key:\"getClaimableReward\",value:(function(){var _getClaimableReward=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee66(request){return _regenerator().w(function(_context66){while(1)switch(_context66.n){case 0:_context66.n=1;return this.rpcClient.readContract({abi:groupingModuleAbi,address:this.address,functionName:\"getClaimableReward\",args:[request.groupId,request.token,request.ipIds]});case 1:return _context66.a(2,_context66.v);}},_callee66,this);}));function getClaimableReward(_x45){return _getClaimableReward.apply(this,arguments);}return getClaimableReward;}())}]);}(GroupingModuleEventClient);/**\n * contract GroupingModule write method\n */var GroupingModuleClient=/*#__PURE__*/function(_GroupingModuleReadOn){function GroupingModuleClient(rpcClient,wallet,address){var _this7;_classCallCheck(this,GroupingModuleClient);_this7=_callSuper(this,GroupingModuleClient,[rpcClient,address]);_this7.wallet=wallet;return _this7;}/**\n   * method addIp for contract GroupingModule\n   *\n   * @param request GroupingModuleAddIpRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(GroupingModuleClient,_GroupingModuleReadOn);return _createClass(GroupingModuleClient,[{key:\"addIp\",value:(function(){var _addIp2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee67(request){var _yield$this$rpcClient33,call;return _regenerator().w(function(_context67){while(1)switch(_context67.n){case 0:_context67.n=1;return this.rpcClient.simulateContract({abi:groupingModuleAbi,address:this.address,functionName:\"addIp\",account:this.wallet.account,args:[request.groupIpId,request.ipIds,request.maxAllowedRewardShare]});case 1:_yield$this$rpcClient33=_context67.v;call=_yield$this$rpcClient33.request;_context67.n=2;return this.wallet.writeContract(call);case 2:return _context67.a(2,_context67.v);}},_callee67,this);}));function addIp(_x46){return _addIp2.apply(this,arguments);}return addIp;}()/**\n   * method addIp for contract GroupingModule with only encode\n   *\n   * @param request GroupingModuleAddIpRequest\n   * @return EncodedTxData\n   */)},{key:\"addIpEncode\",value:function addIpEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingModuleAbi,functionName:\"addIp\",args:[request.groupIpId,request.ipIds,request.maxAllowedRewardShare]})};}/**\n   * method claimReward for contract GroupingModule\n   *\n   * @param request GroupingModuleClaimRewardRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"claimReward\",value:(function(){var _claimReward=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee68(request){var _yield$this$rpcClient34,call;return _regenerator().w(function(_context68){while(1)switch(_context68.n){case 0:_context68.n=1;return this.rpcClient.simulateContract({abi:groupingModuleAbi,address:this.address,functionName:\"claimReward\",account:this.wallet.account,args:[request.groupId,request.token,request.ipIds]});case 1:_yield$this$rpcClient34=_context68.v;call=_yield$this$rpcClient34.request;_context68.n=2;return this.wallet.writeContract(call);case 2:return _context68.a(2,_context68.v);}},_callee68,this);}));function claimReward(_x47){return _claimReward.apply(this,arguments);}return claimReward;}()/**\n   * method claimReward for contract GroupingModule with only encode\n   *\n   * @param request GroupingModuleClaimRewardRequest\n   * @return EncodedTxData\n   */)},{key:\"claimRewardEncode\",value:function claimRewardEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingModuleAbi,functionName:\"claimReward\",args:[request.groupId,request.token,request.ipIds]})};}/**\n   * method collectRoyalties for contract GroupingModule\n   *\n   * @param request GroupingModuleCollectRoyaltiesRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"collectRoyalties\",value:(function(){var _collectRoyalties=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee69(request){var _yield$this$rpcClient35,call;return _regenerator().w(function(_context69){while(1)switch(_context69.n){case 0:_context69.n=1;return this.rpcClient.simulateContract({abi:groupingModuleAbi,address:this.address,functionName:\"collectRoyalties\",account:this.wallet.account,args:[request.groupId,request.token]});case 1:_yield$this$rpcClient35=_context69.v;call=_yield$this$rpcClient35.request;_context69.n=2;return this.wallet.writeContract(call);case 2:return _context69.a(2,_context69.v);}},_callee69,this);}));function collectRoyalties(_x48){return _collectRoyalties.apply(this,arguments);}return collectRoyalties;}()/**\n   * method collectRoyalties for contract GroupingModule with only encode\n   *\n   * @param request GroupingModuleCollectRoyaltiesRequest\n   * @return EncodedTxData\n   */)},{key:\"collectRoyaltiesEncode\",value:function collectRoyaltiesEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingModuleAbi,functionName:\"collectRoyalties\",args:[request.groupId,request.token]})};}/**\n   * method registerGroup for contract GroupingModule\n   *\n   * @param request GroupingModuleRegisterGroupRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerGroup\",value:(function(){var _registerGroup=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee70(request){var _yield$this$rpcClient36,call;return _regenerator().w(function(_context70){while(1)switch(_context70.n){case 0:_context70.n=1;return this.rpcClient.simulateContract({abi:groupingModuleAbi,address:this.address,functionName:\"registerGroup\",account:this.wallet.account,args:[request.groupPool]});case 1:_yield$this$rpcClient36=_context70.v;call=_yield$this$rpcClient36.request;_context70.n=2;return this.wallet.writeContract(call);case 2:return _context70.a(2,_context70.v);}},_callee70,this);}));function registerGroup(_x49){return _registerGroup.apply(this,arguments);}return registerGroup;}()/**\n   * method registerGroup for contract GroupingModule with only encode\n   *\n   * @param request GroupingModuleRegisterGroupRequest\n   * @return EncodedTxData\n   */)},{key:\"registerGroupEncode\",value:function registerGroupEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingModuleAbi,functionName:\"registerGroup\",args:[request.groupPool]})};}/**\n   * method removeIp for contract GroupingModule\n   *\n   * @param request GroupingModuleRemoveIpRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"removeIp\",value:(function(){var _removeIp2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee71(request){var _yield$this$rpcClient37,call;return _regenerator().w(function(_context71){while(1)switch(_context71.n){case 0:_context71.n=1;return this.rpcClient.simulateContract({abi:groupingModuleAbi,address:this.address,functionName:\"removeIp\",account:this.wallet.account,args:[request.groupIpId,request.ipIds]});case 1:_yield$this$rpcClient37=_context71.v;call=_yield$this$rpcClient37.request;_context71.n=2;return this.wallet.writeContract(call);case 2:return _context71.a(2,_context71.v);}},_callee71,this);}));function removeIp(_x50){return _removeIp2.apply(this,arguments);}return removeIp;}()/**\n   * method removeIp for contract GroupingModule with only encode\n   *\n   * @param request GroupingModuleRemoveIpRequest\n   * @return EncodedTxData\n   */)},{key:\"removeIpEncode\",value:function removeIpEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingModuleAbi,functionName:\"removeIp\",args:[request.groupIpId,request.ipIds]})};}}]);}(GroupingModuleReadOnlyClient);// Contract GroupingWorkflows =============================================================\n/**\n * GroupingWorkflowsCollectRoyaltiesAndClaimRewardRequest\n *\n * @param groupIpId address\n * @param currencyTokens address[]\n * @param memberIpIds address[]\n *//**\n * GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest\n *\n * @param spgNftContract address\n * @param groupId address\n * @param recipient address\n * @param maxAllowedRewardShare uint256\n * @param licensesData tuple[]\n * @param ipMetadata tuple\n * @param sigAddToGroup tuple\n * @param allowDuplicates bool\n *//**\n * GroupingWorkflowsRegisterGroupAndAttachLicenseRequest\n *\n * @param groupPool address\n * @param licenseData tuple\n *//**\n * GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest\n *\n * @param groupPool address\n * @param ipIds address[]\n * @param maxAllowedRewardShare uint256\n * @param licenseData tuple\n *//**\n * GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest\n *\n * @param nftContract address\n * @param tokenId uint256\n * @param groupId address\n * @param maxAllowedRewardShare uint256\n * @param licensesData tuple[]\n * @param ipMetadata tuple\n * @param sigMetadataAndAttachAndConfig tuple\n * @param sigAddToGroup tuple\n *//**\n * contract GroupingWorkflows write method\n */var GroupingWorkflowsClient=/*#__PURE__*/function(){function GroupingWorkflowsClient(rpcClient,wallet,address){var _rpcClient$chain9;_classCallCheck(this,GroupingWorkflowsClient);this.address=address||getAddress(groupingWorkflowsAddress,(_rpcClient$chain9=rpcClient.chain)===null||_rpcClient$chain9===void 0?void 0:_rpcClient$chain9.id);this.rpcClient=rpcClient;this.wallet=wallet;}/**\n   * method collectRoyaltiesAndClaimReward for contract GroupingWorkflows\n   *\n   * @param request GroupingWorkflowsCollectRoyaltiesAndClaimRewardRequest\n   * @return Promise<WriteContractReturnType>\n   */return _createClass(GroupingWorkflowsClient,[{key:\"collectRoyaltiesAndClaimReward\",value:(function(){var _collectRoyaltiesAndClaimReward=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee72(request){var _yield$this$rpcClient38,call;return _regenerator().w(function(_context72){while(1)switch(_context72.n){case 0:_context72.n=1;return this.rpcClient.simulateContract({abi:groupingWorkflowsAbi,address:this.address,functionName:\"collectRoyaltiesAndClaimReward\",account:this.wallet.account,args:[request.groupIpId,request.currencyTokens,request.memberIpIds]});case 1:_yield$this$rpcClient38=_context72.v;call=_yield$this$rpcClient38.request;_context72.n=2;return this.wallet.writeContract(call);case 2:return _context72.a(2,_context72.v);}},_callee72,this);}));function collectRoyaltiesAndClaimReward(_x51){return _collectRoyaltiesAndClaimReward.apply(this,arguments);}return collectRoyaltiesAndClaimReward;}()/**\n   * method collectRoyaltiesAndClaimReward for contract GroupingWorkflows with only encode\n   *\n   * @param request GroupingWorkflowsCollectRoyaltiesAndClaimRewardRequest\n   * @return EncodedTxData\n   */)},{key:\"collectRoyaltiesAndClaimRewardEncode\",value:function collectRoyaltiesAndClaimRewardEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingWorkflowsAbi,functionName:\"collectRoyaltiesAndClaimReward\",args:[request.groupIpId,request.currencyTokens,request.memberIpIds]})};}/**\n   * method mintAndRegisterIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows\n   *\n   * @param request GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"mintAndRegisterIpAndAttachLicenseAndAddToGroup\",value:(function(){var _mintAndRegisterIpAndAttachLicenseAndAddToGroup=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee73(request){var _yield$this$rpcClient39,call;return _regenerator().w(function(_context73){while(1)switch(_context73.n){case 0:_context73.n=1;return this.rpcClient.simulateContract({abi:groupingWorkflowsAbi,address:this.address,functionName:\"mintAndRegisterIpAndAttachLicenseAndAddToGroup\",account:this.wallet.account,args:[request.spgNftContract,request.groupId,request.recipient,request.maxAllowedRewardShare,request.licensesData,request.ipMetadata,request.sigAddToGroup,request.allowDuplicates]});case 1:_yield$this$rpcClient39=_context73.v;call=_yield$this$rpcClient39.request;_context73.n=2;return this.wallet.writeContract(call);case 2:return _context73.a(2,_context73.v);}},_callee73,this);}));function mintAndRegisterIpAndAttachLicenseAndAddToGroup(_x52){return _mintAndRegisterIpAndAttachLicenseAndAddToGroup.apply(this,arguments);}return mintAndRegisterIpAndAttachLicenseAndAddToGroup;}()/**\n   * method mintAndRegisterIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows with only encode\n   *\n   * @param request GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest\n   * @return EncodedTxData\n   */)},{key:\"mintAndRegisterIpAndAttachLicenseAndAddToGroupEncode\",value:function mintAndRegisterIpAndAttachLicenseAndAddToGroupEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingWorkflowsAbi,functionName:\"mintAndRegisterIpAndAttachLicenseAndAddToGroup\",args:[request.spgNftContract,request.groupId,request.recipient,request.maxAllowedRewardShare,request.licensesData,request.ipMetadata,request.sigAddToGroup,request.allowDuplicates]})};}/**\n   * method registerGroupAndAttachLicense for contract GroupingWorkflows\n   *\n   * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerGroupAndAttachLicense\",value:(function(){var _registerGroupAndAttachLicense=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee74(request){var _yield$this$rpcClient40,call;return _regenerator().w(function(_context74){while(1)switch(_context74.n){case 0:_context74.n=1;return this.rpcClient.simulateContract({abi:groupingWorkflowsAbi,address:this.address,functionName:\"registerGroupAndAttachLicense\",account:this.wallet.account,args:[request.groupPool,request.licenseData]});case 1:_yield$this$rpcClient40=_context74.v;call=_yield$this$rpcClient40.request;_context74.n=2;return this.wallet.writeContract(call);case 2:return _context74.a(2,_context74.v);}},_callee74,this);}));function registerGroupAndAttachLicense(_x53){return _registerGroupAndAttachLicense.apply(this,arguments);}return registerGroupAndAttachLicense;}()/**\n   * method registerGroupAndAttachLicense for contract GroupingWorkflows with only encode\n   *\n   * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseRequest\n   * @return EncodedTxData\n   */)},{key:\"registerGroupAndAttachLicenseEncode\",value:function registerGroupAndAttachLicenseEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingWorkflowsAbi,functionName:\"registerGroupAndAttachLicense\",args:[request.groupPool,request.licenseData]})};}/**\n   * method registerGroupAndAttachLicenseAndAddIps for contract GroupingWorkflows\n   *\n   * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerGroupAndAttachLicenseAndAddIps\",value:(function(){var _registerGroupAndAttachLicenseAndAddIps=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee75(request){var _yield$this$rpcClient41,call;return _regenerator().w(function(_context75){while(1)switch(_context75.n){case 0:_context75.n=1;return this.rpcClient.simulateContract({abi:groupingWorkflowsAbi,address:this.address,functionName:\"registerGroupAndAttachLicenseAndAddIps\",account:this.wallet.account,args:[request.groupPool,request.ipIds,request.maxAllowedRewardShare,request.licenseData]});case 1:_yield$this$rpcClient41=_context75.v;call=_yield$this$rpcClient41.request;_context75.n=2;return this.wallet.writeContract(call);case 2:return _context75.a(2,_context75.v);}},_callee75,this);}));function registerGroupAndAttachLicenseAndAddIps(_x54){return _registerGroupAndAttachLicenseAndAddIps.apply(this,arguments);}return registerGroupAndAttachLicenseAndAddIps;}()/**\n   * method registerGroupAndAttachLicenseAndAddIps for contract GroupingWorkflows with only encode\n   *\n   * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest\n   * @return EncodedTxData\n   */)},{key:\"registerGroupAndAttachLicenseAndAddIpsEncode\",value:function registerGroupAndAttachLicenseAndAddIpsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingWorkflowsAbi,functionName:\"registerGroupAndAttachLicenseAndAddIps\",args:[request.groupPool,request.ipIds,request.maxAllowedRewardShare,request.licenseData]})};}/**\n   * method registerIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows\n   *\n   * @param request GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerIpAndAttachLicenseAndAddToGroup\",value:(function(){var _registerIpAndAttachLicenseAndAddToGroup=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee76(request){var _yield$this$rpcClient42,call;return _regenerator().w(function(_context76){while(1)switch(_context76.n){case 0:_context76.n=1;return this.rpcClient.simulateContract({abi:groupingWorkflowsAbi,address:this.address,functionName:\"registerIpAndAttachLicenseAndAddToGroup\",account:this.wallet.account,args:[request.nftContract,request.tokenId,request.groupId,request.maxAllowedRewardShare,request.licensesData,request.ipMetadata,request.sigMetadataAndAttachAndConfig,request.sigAddToGroup]});case 1:_yield$this$rpcClient42=_context76.v;call=_yield$this$rpcClient42.request;_context76.n=2;return this.wallet.writeContract(call);case 2:return _context76.a(2,_context76.v);}},_callee76,this);}));function registerIpAndAttachLicenseAndAddToGroup(_x55){return _registerIpAndAttachLicenseAndAddToGroup.apply(this,arguments);}return registerIpAndAttachLicenseAndAddToGroup;}()/**\n   * method registerIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows with only encode\n   *\n   * @param request GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest\n   * @return EncodedTxData\n   */)},{key:\"registerIpAndAttachLicenseAndAddToGroupEncode\",value:function registerIpAndAttachLicenseAndAddToGroupEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:groupingWorkflowsAbi,functionName:\"registerIpAndAttachLicenseAndAddToGroup\",args:[request.nftContract,request.tokenId,request.groupId,request.maxAllowedRewardShare,request.licensesData,request.ipMetadata,request.sigMetadataAndAttachAndConfig,request.sigAddToGroup]})};}}]);}();// Contract IPAccountImpl =============================================================\n/**\n * IpAccountImplStateResponse\n *\n * @param result bytes32\n *//**\n * IpAccountImplTokenResponse\n *\n * @param 0 uint256\n * @param 1 address\n * @param 2 uint256\n *//**\n * IpAccountImplExecuteRequest\n *\n * @param to address\n * @param value uint256\n * @param data bytes\n * @param operation uint8\n *//**\n * IpAccountImplExecute2Request\n *\n * @param to address\n * @param value uint256\n * @param data bytes\n *//**\n * IpAccountImplExecuteBatchRequest\n *\n * @param calls tuple[]\n * @param operation uint8\n *//**\n * IpAccountImplExecuteWithSigRequest\n *\n * @param to address\n * @param value uint256\n * @param data bytes\n * @param signer address\n * @param deadline uint256\n * @param signature bytes\n *//**\n * contract IPAccountImpl readonly method\n */var IpAccountImplReadOnlyClient=/*#__PURE__*/function(){function IpAccountImplReadOnlyClient(rpcClient,address){var _rpcClient$chain0;_classCallCheck(this,IpAccountImplReadOnlyClient);this.address=address||getAddress(ipAccountImplAddress,(_rpcClient$chain0=rpcClient.chain)===null||_rpcClient$chain0===void 0?void 0:_rpcClient$chain0.id);this.rpcClient=rpcClient;}/**\n   * method owner for contract IPAccountImpl\n   *\n   * @param request IpAccountImplOwnerRequest\n   * @return Promise<IpAccountImplOwnerResponse>\n   */return _createClass(IpAccountImplReadOnlyClient,[{key:\"owner\",value:(function(){var _owner=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee77(){return _regenerator().w(function(_context77){while(1)switch(_context77.n){case 0:_context77.n=1;return this.rpcClient.readContract({abi:ipAccountImplAbi,address:this.address,functionName:\"owner\"});case 1:return _context77.a(2,_context77.v);}},_callee77,this);}));function owner(){return _owner.apply(this,arguments);}return owner;}()/**\n   * method state for contract IPAccountImpl\n   *\n   * @param request IpAccountImplStateRequest\n   * @return Promise<IpAccountImplStateResponse>\n   */)},{key:\"state\",value:(function(){var _state=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee78(){var result;return _regenerator().w(function(_context78){while(1)switch(_context78.n){case 0:_context78.n=1;return this.rpcClient.readContract({abi:ipAccountImplAbi,address:this.address,functionName:\"state\"});case 1:result=_context78.v;return _context78.a(2,{result:result});}},_callee78,this);}));function state(){return _state.apply(this,arguments);}return state;}()/**\n   * method token for contract IPAccountImpl\n   *\n   * @param request IpAccountImplTokenRequest\n   * @return Promise<IpAccountImplTokenResponse>\n   */)},{key:\"token\",value:(function(){var _token=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee79(){return _regenerator().w(function(_context79){while(1)switch(_context79.n){case 0:_context79.n=1;return this.rpcClient.readContract({abi:ipAccountImplAbi,address:this.address,functionName:\"token\"});case 1:return _context79.a(2,_context79.v);}},_callee79,this);}));function token(){return _token.apply(this,arguments);}return token;}())}]);}();/**\n * contract IPAccountImpl write method\n */var IpAccountImplClient=/*#__PURE__*/function(_IpAccountImplReadOnl){function IpAccountImplClient(rpcClient,wallet,address){var _this8;_classCallCheck(this,IpAccountImplClient);_this8=_callSuper(this,IpAccountImplClient,[rpcClient,address]);_this8.wallet=wallet;return _this8;}/**\n   * method execute for contract IPAccountImpl\n   *\n   * @param request IpAccountImplExecuteRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(IpAccountImplClient,_IpAccountImplReadOnl);return _createClass(IpAccountImplClient,[{key:\"execute\",value:(function(){var _execute=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee80(request){var _yield$this$rpcClient43,call;return _regenerator().w(function(_context80){while(1)switch(_context80.n){case 0:_context80.n=1;return this.rpcClient.simulateContract({abi:ipAccountImplAbi,address:this.address,functionName:\"execute\",account:this.wallet.account,args:[request.to,request.value,request.data,request.operation]});case 1:_yield$this$rpcClient43=_context80.v;call=_yield$this$rpcClient43.request;_context80.n=2;return this.wallet.writeContract(call);case 2:return _context80.a(2,_context80.v);}},_callee80,this);}));function execute(_x56){return _execute.apply(this,arguments);}return execute;}()/**\n   * method execute for contract IPAccountImpl with only encode\n   *\n   * @param request IpAccountImplExecuteRequest\n   * @return EncodedTxData\n   */)},{key:\"executeEncode\",value:function executeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:ipAccountImplAbi,functionName:\"execute\",args:[request.to,request.value,request.data,request.operation]})};}/**\n   * method execute for contract IPAccountImpl\n   *\n   * @param request IpAccountImplExecute2Request\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"execute2\",value:(function(){var _execute2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee81(request){var _yield$this$rpcClient44,call;return _regenerator().w(function(_context81){while(1)switch(_context81.n){case 0:_context81.n=1;return this.rpcClient.simulateContract({abi:ipAccountImplAbi,address:this.address,functionName:\"execute\",account:this.wallet.account,args:[request.to,request.value,request.data]});case 1:_yield$this$rpcClient44=_context81.v;call=_yield$this$rpcClient44.request;_context81.n=2;return this.wallet.writeContract(call);case 2:return _context81.a(2,_context81.v);}},_callee81,this);}));function execute2(_x57){return _execute2.apply(this,arguments);}return execute2;}()/**\n   * method execute for contract IPAccountImpl with only encode\n   *\n   * @param request IpAccountImplExecute2Request\n   * @return EncodedTxData\n   */)},{key:\"execute2Encode\",value:function execute2Encode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:ipAccountImplAbi,functionName:\"execute\",args:[request.to,request.value,request.data]})};}/**\n   * method executeBatch for contract IPAccountImpl\n   *\n   * @param request IpAccountImplExecuteBatchRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"executeBatch\",value:(function(){var _executeBatch=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee82(request){var _yield$this$rpcClient45,call;return _regenerator().w(function(_context82){while(1)switch(_context82.n){case 0:_context82.n=1;return this.rpcClient.simulateContract({abi:ipAccountImplAbi,address:this.address,functionName:\"executeBatch\",account:this.wallet.account,args:[request.calls,request.operation]});case 1:_yield$this$rpcClient45=_context82.v;call=_yield$this$rpcClient45.request;_context82.n=2;return this.wallet.writeContract(call);case 2:return _context82.a(2,_context82.v);}},_callee82,this);}));function executeBatch(_x58){return _executeBatch.apply(this,arguments);}return executeBatch;}()/**\n   * method executeBatch for contract IPAccountImpl with only encode\n   *\n   * @param request IpAccountImplExecuteBatchRequest\n   * @return EncodedTxData\n   */)},{key:\"executeBatchEncode\",value:function executeBatchEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:ipAccountImplAbi,functionName:\"executeBatch\",args:[request.calls,request.operation]})};}/**\n   * method executeWithSig for contract IPAccountImpl\n   *\n   * @param request IpAccountImplExecuteWithSigRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"executeWithSig\",value:(function(){var _executeWithSig=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee83(request){var _yield$this$rpcClient46,call;return _regenerator().w(function(_context83){while(1)switch(_context83.n){case 0:_context83.n=1;return this.rpcClient.simulateContract({abi:ipAccountImplAbi,address:this.address,functionName:\"executeWithSig\",account:this.wallet.account,args:[request.to,request.value,request.data,request.signer,request.deadline,request.signature]});case 1:_yield$this$rpcClient46=_context83.v;call=_yield$this$rpcClient46.request;_context83.n=2;return this.wallet.writeContract(call);case 2:return _context83.a(2,_context83.v);}},_callee83,this);}));function executeWithSig(_x59){return _executeWithSig.apply(this,arguments);}return executeWithSig;}()/**\n   * method executeWithSig for contract IPAccountImpl with only encode\n   *\n   * @param request IpAccountImplExecuteWithSigRequest\n   * @return EncodedTxData\n   */)},{key:\"executeWithSigEncode\",value:function executeWithSigEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:ipAccountImplAbi,functionName:\"executeWithSig\",args:[request.to,request.value,request.data,request.signer,request.deadline,request.signature]})};}}]);}(IpAccountImplReadOnlyClient);// Contract IPAssetRegistry =============================================================\n/**\n * IpAssetRegistryIpAccountRegisteredEvent\n *\n * @param account address\n * @param implementation address\n * @param chainId uint256\n * @param tokenContract address\n * @param tokenId uint256\n *//**\n * IpAssetRegistryIpRegisteredEvent\n *\n * @param ipId address\n * @param chainId uint256\n * @param tokenContract address\n * @param tokenId uint256\n * @param name string\n * @param uri string\n * @param registrationDate uint256\n *//**\n * IpAssetRegistryIpIdRequest\n *\n * @param chainId uint256\n * @param tokenContract address\n * @param tokenId uint256\n *//**\n * IpAssetRegistryIsRegisteredRequest\n *\n * @param id address\n *//**\n * IpAssetRegistryRegisterRequest\n *\n * @param chainid uint256\n * @param tokenContract address\n * @param tokenId uint256\n *//**\n * contract IPAssetRegistry event\n */var IpAssetRegistryEventClient=/*#__PURE__*/function(){function IpAssetRegistryEventClient(rpcClient,address){var _rpcClient$chain1;_classCallCheck(this,IpAssetRegistryEventClient);this.address=address||getAddress(ipAssetRegistryAddress,(_rpcClient$chain1=rpcClient.chain)===null||_rpcClient$chain1===void 0?void 0:_rpcClient$chain1.id);this.rpcClient=rpcClient;}/**\n   * event IPAccountRegistered for contract IPAssetRegistry\n   */return _createClass(IpAssetRegistryEventClient,[{key:\"watchIpAccountRegisteredEvent\",value:function watchIpAccountRegisteredEvent(_onLogs17){return this.rpcClient.watchContractEvent({abi:ipAssetRegistryAbi,address:this.address,eventName:\"IPAccountRegistered\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs17(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event IPAccountRegistered for contract IPAssetRegistry\n   */},{key:\"parseTxIpAccountRegisteredEvent\",value:function parseTxIpAccountRegisteredEvent(txReceipt){var targetLogs=[];var _iterator17=_createForOfIteratorHelper(txReceipt.logs),_step17;try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var log=_step17.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:ipAssetRegistryAbi,eventName:\"IPAccountRegistered\",data:log.data,topics:log.topics});if(event.eventName===\"IPAccountRegistered\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator17.e(err);}finally{_iterator17.f();}return targetLogs;}/**\n   * event IPRegistered for contract IPAssetRegistry\n   */},{key:\"watchIpRegisteredEvent\",value:function watchIpRegisteredEvent(_onLogs18){return this.rpcClient.watchContractEvent({abi:ipAssetRegistryAbi,address:this.address,eventName:\"IPRegistered\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs18(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event IPRegistered for contract IPAssetRegistry\n   */},{key:\"parseTxIpRegisteredEvent\",value:function parseTxIpRegisteredEvent(txReceipt){var targetLogs=[];var _iterator18=_createForOfIteratorHelper(txReceipt.logs),_step18;try{for(_iterator18.s();!(_step18=_iterator18.n()).done;){var log=_step18.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:ipAssetRegistryAbi,eventName:\"IPRegistered\",data:log.data,topics:log.topics});if(event.eventName===\"IPRegistered\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator18.e(err);}finally{_iterator18.f();}return targetLogs;}}]);}();/**\n * contract IPAssetRegistry readonly method\n */var IpAssetRegistryReadOnlyClient=/*#__PURE__*/function(_IpAssetRegistryEvent){function IpAssetRegistryReadOnlyClient(rpcClient,address){_classCallCheck(this,IpAssetRegistryReadOnlyClient);return _callSuper(this,IpAssetRegistryReadOnlyClient,[rpcClient,address]);}/**\n   * method ipId for contract IPAssetRegistry\n   *\n   * @param request IpAssetRegistryIpIdRequest\n   * @return Promise<IpAssetRegistryIpIdResponse>\n   */_inherits(IpAssetRegistryReadOnlyClient,_IpAssetRegistryEvent);return _createClass(IpAssetRegistryReadOnlyClient,[{key:\"ipId\",value:(function(){var _ipId=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee84(request){return _regenerator().w(function(_context84){while(1)switch(_context84.n){case 0:_context84.n=1;return this.rpcClient.readContract({abi:ipAssetRegistryAbi,address:this.address,functionName:\"ipId\",args:[request.chainId,request.tokenContract,request.tokenId]});case 1:return _context84.a(2,_context84.v);}},_callee84,this);}));function ipId(_x60){return _ipId.apply(this,arguments);}return ipId;}()/**\n   * method isRegistered for contract IPAssetRegistry\n   *\n   * @param request IpAssetRegistryIsRegisteredRequest\n   * @return Promise<IpAssetRegistryIsRegisteredResponse>\n   */)},{key:\"isRegistered\",value:(function(){var _isRegistered=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee85(request){return _regenerator().w(function(_context85){while(1)switch(_context85.n){case 0:_context85.n=1;return this.rpcClient.readContract({abi:ipAssetRegistryAbi,address:this.address,functionName:\"isRegistered\",args:[request.id]});case 1:return _context85.a(2,_context85.v);}},_callee85,this);}));function isRegistered(_x61){return _isRegistered.apply(this,arguments);}return isRegistered;}())}]);}(IpAssetRegistryEventClient);/**\n * contract IPAssetRegistry write method\n */var IpAssetRegistryClient=/*#__PURE__*/function(_IpAssetRegistryReadO){function IpAssetRegistryClient(rpcClient,wallet,address){var _this9;_classCallCheck(this,IpAssetRegistryClient);_this9=_callSuper(this,IpAssetRegistryClient,[rpcClient,address]);_this9.wallet=wallet;return _this9;}/**\n   * method register for contract IPAssetRegistry\n   *\n   * @param request IpAssetRegistryRegisterRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(IpAssetRegistryClient,_IpAssetRegistryReadO);return _createClass(IpAssetRegistryClient,[{key:\"register\",value:(function(){var _register=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee86(request){var _yield$this$rpcClient47,call;return _regenerator().w(function(_context86){while(1)switch(_context86.n){case 0:_context86.n=1;return this.rpcClient.simulateContract({abi:ipAssetRegistryAbi,address:this.address,functionName:\"register\",account:this.wallet.account,args:[request.chainid,request.tokenContract,request.tokenId]});case 1:_yield$this$rpcClient47=_context86.v;call=_yield$this$rpcClient47.request;_context86.n=2;return this.wallet.writeContract(call);case 2:return _context86.a(2,_context86.v);}},_callee86,this);}));function register(_x62){return _register.apply(this,arguments);}return register;}()/**\n   * method register for contract IPAssetRegistry with only encode\n   *\n   * @param request IpAssetRegistryRegisterRequest\n   * @return EncodedTxData\n   */)},{key:\"registerEncode\",value:function registerEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:ipAssetRegistryAbi,functionName:\"register\",args:[request.chainid,request.tokenContract,request.tokenId]})};}}]);}(IpAssetRegistryReadOnlyClient);// Contract IpRoyaltyVaultImpl =============================================================\n/**\n * IpRoyaltyVaultImplRevenueTokenClaimedEvent\n *\n * @param claimer address\n * @param token address\n * @param amount uint256\n *//**\n * IpRoyaltyVaultImplBalanceOfRequest\n *\n * @param account address\n *//**\n * IpRoyaltyVaultImplClaimableRevenueRequest\n *\n * @param claimer address\n * @param token address\n *//**\n * contract IpRoyaltyVaultImpl event\n */var IpRoyaltyVaultImplEventClient=/*#__PURE__*/function(){function IpRoyaltyVaultImplEventClient(rpcClient,address){var _rpcClient$chain10;_classCallCheck(this,IpRoyaltyVaultImplEventClient);this.address=address||getAddress(ipRoyaltyVaultImplAddress,(_rpcClient$chain10=rpcClient.chain)===null||_rpcClient$chain10===void 0?void 0:_rpcClient$chain10.id);this.rpcClient=rpcClient;}/**\n   * event RevenueTokenClaimed for contract IpRoyaltyVaultImpl\n   */return _createClass(IpRoyaltyVaultImplEventClient,[{key:\"watchRevenueTokenClaimedEvent\",value:function watchRevenueTokenClaimedEvent(_onLogs19){return this.rpcClient.watchContractEvent({abi:ipRoyaltyVaultImplAbi,address:this.address,eventName:\"RevenueTokenClaimed\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs19(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event RevenueTokenClaimed for contract IpRoyaltyVaultImpl\n   */},{key:\"parseTxRevenueTokenClaimedEvent\",value:function parseTxRevenueTokenClaimedEvent(txReceipt){var targetLogs=[];var _iterator19=_createForOfIteratorHelper(txReceipt.logs),_step19;try{for(_iterator19.s();!(_step19=_iterator19.n()).done;){var log=_step19.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:ipRoyaltyVaultImplAbi,eventName:\"RevenueTokenClaimed\",data:log.data,topics:log.topics});if(event.eventName===\"RevenueTokenClaimed\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator19.e(err);}finally{_iterator19.f();}return targetLogs;}}]);}();/**\n * contract IpRoyaltyVaultImpl readonly method\n */var IpRoyaltyVaultImplReadOnlyClient=/*#__PURE__*/function(_IpRoyaltyVaultImplEv){function IpRoyaltyVaultImplReadOnlyClient(rpcClient,address){_classCallCheck(this,IpRoyaltyVaultImplReadOnlyClient);return _callSuper(this,IpRoyaltyVaultImplReadOnlyClient,[rpcClient,address]);}/**\n   * method balanceOf for contract IpRoyaltyVaultImpl\n   *\n   * @param request IpRoyaltyVaultImplBalanceOfRequest\n   * @return Promise<IpRoyaltyVaultImplBalanceOfResponse>\n   */_inherits(IpRoyaltyVaultImplReadOnlyClient,_IpRoyaltyVaultImplEv);return _createClass(IpRoyaltyVaultImplReadOnlyClient,[{key:\"balanceOf\",value:(function(){var _balanceOf2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee87(request){return _regenerator().w(function(_context87){while(1)switch(_context87.n){case 0:_context87.n=1;return this.rpcClient.readContract({abi:ipRoyaltyVaultImplAbi,address:this.address,functionName:\"balanceOf\",args:[request.account]});case 1:return _context87.a(2,_context87.v);}},_callee87,this);}));function balanceOf(_x63){return _balanceOf2.apply(this,arguments);}return balanceOf;}()/**\n   * method claimableRevenue for contract IpRoyaltyVaultImpl\n   *\n   * @param request IpRoyaltyVaultImplClaimableRevenueRequest\n   * @return Promise<IpRoyaltyVaultImplClaimableRevenueResponse>\n   */)},{key:\"claimableRevenue\",value:(function(){var _claimableRevenue=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee88(request){return _regenerator().w(function(_context88){while(1)switch(_context88.n){case 0:_context88.n=1;return this.rpcClient.readContract({abi:ipRoyaltyVaultImplAbi,address:this.address,functionName:\"claimableRevenue\",args:[request.claimer,request.token]});case 1:return _context88.a(2,_context88.v);}},_callee88,this);}));function claimableRevenue(_x64){return _claimableRevenue.apply(this,arguments);}return claimableRevenue;}()/**\n   * method ipId for contract IpRoyaltyVaultImpl\n   *\n   * @param request IpRoyaltyVaultImplIpIdRequest\n   * @return Promise<IpRoyaltyVaultImplIpIdResponse>\n   */)},{key:\"ipId\",value:(function(){var _ipId2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee89(){return _regenerator().w(function(_context89){while(1)switch(_context89.n){case 0:_context89.n=1;return this.rpcClient.readContract({abi:ipRoyaltyVaultImplAbi,address:this.address,functionName:\"ipId\"});case 1:return _context89.a(2,_context89.v);}},_callee89,this);}));function ipId(){return _ipId2.apply(this,arguments);}return ipId;}())}]);}(IpRoyaltyVaultImplEventClient);// Contract LicenseAttachmentWorkflows =============================================================\n/**\n * LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest\n *\n * @param spgNftContract address\n * @param recipient address\n * @param ipMetadata tuple\n * @param licenseTermsData tuple[]\n * @param allowDuplicates bool\n *//**\n * LicenseAttachmentWorkflowsMulticallRequest\n *\n * @param data bytes[]\n *//**\n * LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest\n *\n * @param nftContract address\n * @param tokenId uint256\n * @param ipMetadata tuple\n * @param licenseTermsData tuple[]\n * @param sigMetadataAndAttachAndConfig tuple\n *//**\n * LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest\n *\n * @param ipId address\n * @param licenseTermsData tuple[]\n * @param sigAttachAndConfig tuple\n *//**\n * contract LicenseAttachmentWorkflows write method\n */var LicenseAttachmentWorkflowsClient=/*#__PURE__*/function(){function LicenseAttachmentWorkflowsClient(rpcClient,wallet,address){var _rpcClient$chain11;_classCallCheck(this,LicenseAttachmentWorkflowsClient);this.address=address||getAddress(licenseAttachmentWorkflowsAddress,(_rpcClient$chain11=rpcClient.chain)===null||_rpcClient$chain11===void 0?void 0:_rpcClient$chain11.id);this.rpcClient=rpcClient;this.wallet=wallet;}/**\n   * method mintAndRegisterIpAndAttachPILTerms for contract LicenseAttachmentWorkflows\n   *\n   * @param request LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest\n   * @return Promise<WriteContractReturnType>\n   */return _createClass(LicenseAttachmentWorkflowsClient,[{key:\"mintAndRegisterIpAndAttachPilTerms\",value:(function(){var _mintAndRegisterIpAndAttachPilTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee90(request){var _yield$this$rpcClient48,call;return _regenerator().w(function(_context90){while(1)switch(_context90.n){case 0:_context90.n=1;return this.rpcClient.simulateContract({abi:licenseAttachmentWorkflowsAbi,address:this.address,functionName:\"mintAndRegisterIpAndAttachPILTerms\",account:this.wallet.account,args:[request.spgNftContract,request.recipient,request.ipMetadata,request.licenseTermsData,request.allowDuplicates]});case 1:_yield$this$rpcClient48=_context90.v;call=_yield$this$rpcClient48.request;_context90.n=2;return this.wallet.writeContract(call);case 2:return _context90.a(2,_context90.v);}},_callee90,this);}));function mintAndRegisterIpAndAttachPilTerms(_x65){return _mintAndRegisterIpAndAttachPilTerms.apply(this,arguments);}return mintAndRegisterIpAndAttachPilTerms;}()/**\n   * method mintAndRegisterIpAndAttachPILTerms for contract LicenseAttachmentWorkflows with only encode\n   *\n   * @param request LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest\n   * @return EncodedTxData\n   */)},{key:\"mintAndRegisterIpAndAttachPilTermsEncode\",value:function mintAndRegisterIpAndAttachPilTermsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licenseAttachmentWorkflowsAbi,functionName:\"mintAndRegisterIpAndAttachPILTerms\",args:[request.spgNftContract,request.recipient,request.ipMetadata,request.licenseTermsData,request.allowDuplicates]})};}/**\n   * method multicall for contract LicenseAttachmentWorkflows\n   *\n   * @param request LicenseAttachmentWorkflowsMulticallRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"multicall\",value:(function(){var _multicall2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee91(request){var _yield$this$rpcClient49,call;return _regenerator().w(function(_context91){while(1)switch(_context91.n){case 0:_context91.n=1;return this.rpcClient.simulateContract({abi:licenseAttachmentWorkflowsAbi,address:this.address,functionName:\"multicall\",account:this.wallet.account,args:[request.data]});case 1:_yield$this$rpcClient49=_context91.v;call=_yield$this$rpcClient49.request;_context91.n=2;return this.wallet.writeContract(call);case 2:return _context91.a(2,_context91.v);}},_callee91,this);}));function multicall(_x66){return _multicall2.apply(this,arguments);}return multicall;}()/**\n   * method multicall for contract LicenseAttachmentWorkflows with only encode\n   *\n   * @param request LicenseAttachmentWorkflowsMulticallRequest\n   * @return EncodedTxData\n   */)},{key:\"multicallEncode\",value:function multicallEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licenseAttachmentWorkflowsAbi,functionName:\"multicall\",args:[request.data]})};}/**\n   * method registerIpAndAttachPILTerms for contract LicenseAttachmentWorkflows\n   *\n   * @param request LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerIpAndAttachPilTerms\",value:(function(){var _registerIpAndAttachPilTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee92(request){var _yield$this$rpcClient50,call;return _regenerator().w(function(_context92){while(1)switch(_context92.n){case 0:_context92.n=1;return this.rpcClient.simulateContract({abi:licenseAttachmentWorkflowsAbi,address:this.address,functionName:\"registerIpAndAttachPILTerms\",account:this.wallet.account,args:[request.nftContract,request.tokenId,request.ipMetadata,request.licenseTermsData,request.sigMetadataAndAttachAndConfig]});case 1:_yield$this$rpcClient50=_context92.v;call=_yield$this$rpcClient50.request;_context92.n=2;return this.wallet.writeContract(call);case 2:return _context92.a(2,_context92.v);}},_callee92,this);}));function registerIpAndAttachPilTerms(_x67){return _registerIpAndAttachPilTerms.apply(this,arguments);}return registerIpAndAttachPilTerms;}()/**\n   * method registerIpAndAttachPILTerms for contract LicenseAttachmentWorkflows with only encode\n   *\n   * @param request LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest\n   * @return EncodedTxData\n   */)},{key:\"registerIpAndAttachPilTermsEncode\",value:function registerIpAndAttachPilTermsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licenseAttachmentWorkflowsAbi,functionName:\"registerIpAndAttachPILTerms\",args:[request.nftContract,request.tokenId,request.ipMetadata,request.licenseTermsData,request.sigMetadataAndAttachAndConfig]})};}/**\n   * method registerPILTermsAndAttach for contract LicenseAttachmentWorkflows\n   *\n   * @param request LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerPilTermsAndAttach\",value:(function(){var _registerPilTermsAndAttach=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee93(request){var _yield$this$rpcClient51,call;return _regenerator().w(function(_context93){while(1)switch(_context93.n){case 0:_context93.n=1;return this.rpcClient.simulateContract({abi:licenseAttachmentWorkflowsAbi,address:this.address,functionName:\"registerPILTermsAndAttach\",account:this.wallet.account,args:[request.ipId,request.licenseTermsData,request.sigAttachAndConfig]});case 1:_yield$this$rpcClient51=_context93.v;call=_yield$this$rpcClient51.request;_context93.n=2;return this.wallet.writeContract(call);case 2:return _context93.a(2,_context93.v);}},_callee93,this);}));function registerPilTermsAndAttach(_x68){return _registerPilTermsAndAttach.apply(this,arguments);}return registerPilTermsAndAttach;}()/**\n   * method registerPILTermsAndAttach for contract LicenseAttachmentWorkflows with only encode\n   *\n   * @param request LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest\n   * @return EncodedTxData\n   */)},{key:\"registerPilTermsAndAttachEncode\",value:function registerPilTermsAndAttachEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licenseAttachmentWorkflowsAbi,functionName:\"registerPILTermsAndAttach\",args:[request.ipId,request.licenseTermsData,request.sigAttachAndConfig]})};}}]);}();// Contract LicenseRegistry =============================================================\n/**\n * LicenseRegistryGetDefaultLicenseTermsResponse\n *\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n *//**\n * LicenseRegistryGetLicensingConfigRequest\n *\n * @param ipId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n *//**\n * LicenseRegistryGetRoyaltyPercentRequest\n *\n * @param ipId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n *//**\n * LicenseRegistryGetRoyaltyPercentResponse\n *\n * @param royaltyPercent uint32\n *//**\n * LicenseRegistryHasIpAttachedLicenseTermsRequest\n *\n * @param ipId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n *//**\n * contract LicenseRegistry readonly method\n */var LicenseRegistryReadOnlyClient=/*#__PURE__*/function(){function LicenseRegistryReadOnlyClient(rpcClient,address){var _rpcClient$chain12;_classCallCheck(this,LicenseRegistryReadOnlyClient);this.address=address||getAddress(licenseRegistryAddress,(_rpcClient$chain12=rpcClient.chain)===null||_rpcClient$chain12===void 0?void 0:_rpcClient$chain12.id);this.rpcClient=rpcClient;}/**\n   * method getDefaultLicenseTerms for contract LicenseRegistry\n   *\n   * @param request LicenseRegistryGetDefaultLicenseTermsRequest\n   * @return Promise<LicenseRegistryGetDefaultLicenseTermsResponse>\n   */return _createClass(LicenseRegistryReadOnlyClient,[{key:\"getDefaultLicenseTerms\",value:(function(){var _getDefaultLicenseTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee94(){var result;return _regenerator().w(function(_context94){while(1)switch(_context94.n){case 0:_context94.n=1;return this.rpcClient.readContract({abi:licenseRegistryAbi,address:this.address,functionName:\"getDefaultLicenseTerms\"});case 1:result=_context94.v;return _context94.a(2,{licenseTemplate:result[0],licenseTermsId:result[1]});}},_callee94,this);}));function getDefaultLicenseTerms(){return _getDefaultLicenseTerms.apply(this,arguments);}return getDefaultLicenseTerms;}()/**\n   * method getLicensingConfig for contract LicenseRegistry\n   *\n   * @param request LicenseRegistryGetLicensingConfigRequest\n   * @return Promise<LicenseRegistryGetLicensingConfigResponse>\n   */)},{key:\"getLicensingConfig\",value:(function(){var _getLicensingConfig=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee95(request){return _regenerator().w(function(_context95){while(1)switch(_context95.n){case 0:_context95.n=1;return this.rpcClient.readContract({abi:licenseRegistryAbi,address:this.address,functionName:\"getLicensingConfig\",args:[request.ipId,request.licenseTemplate,request.licenseTermsId]});case 1:return _context95.a(2,_context95.v);}},_callee95,this);}));function getLicensingConfig(_x69){return _getLicensingConfig.apply(this,arguments);}return getLicensingConfig;}()/**\n   * method getRoyaltyPercent for contract LicenseRegistry\n   *\n   * @param request LicenseRegistryGetRoyaltyPercentRequest\n   * @return Promise<LicenseRegistryGetRoyaltyPercentResponse>\n   */)},{key:\"getRoyaltyPercent\",value:(function(){var _getRoyaltyPercent=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee96(request){var result;return _regenerator().w(function(_context96){while(1)switch(_context96.n){case 0:_context96.n=1;return this.rpcClient.readContract({abi:licenseRegistryAbi,address:this.address,functionName:\"getRoyaltyPercent\",args:[request.ipId,request.licenseTemplate,request.licenseTermsId]});case 1:result=_context96.v;return _context96.a(2,{royaltyPercent:result});}},_callee96,this);}));function getRoyaltyPercent(_x70){return _getRoyaltyPercent.apply(this,arguments);}return getRoyaltyPercent;}()/**\n   * method hasIpAttachedLicenseTerms for contract LicenseRegistry\n   *\n   * @param request LicenseRegistryHasIpAttachedLicenseTermsRequest\n   * @return Promise<LicenseRegistryHasIpAttachedLicenseTermsResponse>\n   */)},{key:\"hasIpAttachedLicenseTerms\",value:(function(){var _hasIpAttachedLicenseTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee97(request){return _regenerator().w(function(_context97){while(1)switch(_context97.n){case 0:_context97.n=1;return this.rpcClient.readContract({abi:licenseRegistryAbi,address:this.address,functionName:\"hasIpAttachedLicenseTerms\",args:[request.ipId,request.licenseTemplate,request.licenseTermsId]});case 1:return _context97.a(2,_context97.v);}},_callee97,this);}));function hasIpAttachedLicenseTerms(_x71){return _hasIpAttachedLicenseTerms.apply(this,arguments);}return hasIpAttachedLicenseTerms;}())}]);}();// Contract LicenseToken =============================================================\n/**\n * LicenseTokenOwnerOfRequest\n *\n * @param tokenId uint256\n *//**\n * contract LicenseToken readonly method\n */var LicenseTokenReadOnlyClient=/*#__PURE__*/function(){function LicenseTokenReadOnlyClient(rpcClient,address){var _rpcClient$chain13;_classCallCheck(this,LicenseTokenReadOnlyClient);this.address=address||getAddress(licenseTokenAddress,(_rpcClient$chain13=rpcClient.chain)===null||_rpcClient$chain13===void 0?void 0:_rpcClient$chain13.id);this.rpcClient=rpcClient;}/**\n   * method ownerOf for contract LicenseToken\n   *\n   * @param request LicenseTokenOwnerOfRequest\n   * @return Promise<LicenseTokenOwnerOfResponse>\n   */return _createClass(LicenseTokenReadOnlyClient,[{key:\"ownerOf\",value:(function(){var _ownerOf=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee98(request){return _regenerator().w(function(_context98){while(1)switch(_context98.n){case 0:_context98.n=1;return this.rpcClient.readContract({abi:licenseTokenAbi,address:this.address,functionName:\"ownerOf\",args:[request.tokenId]});case 1:return _context98.a(2,_context98.v);}},_callee98,this);}));function ownerOf(_x72){return _ownerOf.apply(this,arguments);}return ownerOf;}())}]);}();// Contract LicensingModule =============================================================\n/**\n * LicensingModuleLicenseTermsAttachedEvent\n *\n * @param caller address\n * @param ipId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n *//**\n * LicensingModuleLicenseTokensMintedEvent\n *\n * @param caller address\n * @param licensorIpId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n * @param amount uint256\n * @param receiver address\n * @param startLicenseTokenId uint256\n *//**\n * LicensingModulePredictMintingLicenseFeeRequest\n *\n * @param licensorIpId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n * @param amount uint256\n * @param receiver address\n * @param royaltyContext bytes\n *//**\n * LicensingModulePredictMintingLicenseFeeResponse\n *\n * @param currencyToken address\n * @param tokenAmount uint256\n *//**\n * LicensingModuleAttachLicenseTermsRequest\n *\n * @param ipId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n *//**\n * LicensingModuleMintLicenseTokensRequest\n *\n * @param licensorIpId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n * @param amount uint256\n * @param receiver address\n * @param royaltyContext bytes\n * @param maxMintingFee uint256\n * @param maxRevenueShare uint32\n *//**\n * LicensingModuleRegisterDerivativeRequest\n *\n * @param childIpId address\n * @param parentIpIds address[]\n * @param licenseTermsIds uint256[]\n * @param licenseTemplate address\n * @param royaltyContext bytes\n * @param maxMintingFee uint256\n * @param maxRts uint32\n * @param maxRevenueShare uint32\n *//**\n * LicensingModuleRegisterDerivativeWithLicenseTokensRequest\n *\n * @param childIpId address\n * @param licenseTokenIds uint256[]\n * @param royaltyContext bytes\n * @param maxRts uint32\n *//**\n * LicensingModuleSetLicensingConfigRequest\n *\n * @param ipId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n * @param licensingConfig tuple\n *//**\n * contract LicensingModule event\n */var LicensingModuleEventClient=/*#__PURE__*/function(){function LicensingModuleEventClient(rpcClient,address){var _rpcClient$chain14;_classCallCheck(this,LicensingModuleEventClient);this.address=address||getAddress(licensingModuleAddress,(_rpcClient$chain14=rpcClient.chain)===null||_rpcClient$chain14===void 0?void 0:_rpcClient$chain14.id);this.rpcClient=rpcClient;}/**\n   * event LicenseTermsAttached for contract LicensingModule\n   */return _createClass(LicensingModuleEventClient,[{key:\"watchLicenseTermsAttachedEvent\",value:function watchLicenseTermsAttachedEvent(_onLogs20){return this.rpcClient.watchContractEvent({abi:licensingModuleAbi,address:this.address,eventName:\"LicenseTermsAttached\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs20(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event LicenseTermsAttached for contract LicensingModule\n   */},{key:\"parseTxLicenseTermsAttachedEvent\",value:function parseTxLicenseTermsAttachedEvent(txReceipt){var targetLogs=[];var _iterator20=_createForOfIteratorHelper(txReceipt.logs),_step20;try{for(_iterator20.s();!(_step20=_iterator20.n()).done;){var log=_step20.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:licensingModuleAbi,eventName:\"LicenseTermsAttached\",data:log.data,topics:log.topics});if(event.eventName===\"LicenseTermsAttached\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator20.e(err);}finally{_iterator20.f();}return targetLogs;}/**\n   * event LicenseTokensMinted for contract LicensingModule\n   */},{key:\"watchLicenseTokensMintedEvent\",value:function watchLicenseTokensMintedEvent(_onLogs21){return this.rpcClient.watchContractEvent({abi:licensingModuleAbi,address:this.address,eventName:\"LicenseTokensMinted\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs21(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event LicenseTokensMinted for contract LicensingModule\n   */},{key:\"parseTxLicenseTokensMintedEvent\",value:function parseTxLicenseTokensMintedEvent(txReceipt){var targetLogs=[];var _iterator21=_createForOfIteratorHelper(txReceipt.logs),_step21;try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var log=_step21.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:licensingModuleAbi,eventName:\"LicenseTokensMinted\",data:log.data,topics:log.topics});if(event.eventName===\"LicenseTokensMinted\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator21.e(err);}finally{_iterator21.f();}return targetLogs;}}]);}();/**\n * contract LicensingModule readonly method\n */var LicensingModuleReadOnlyClient=/*#__PURE__*/function(_LicensingModuleEvent){function LicensingModuleReadOnlyClient(rpcClient,address){_classCallCheck(this,LicensingModuleReadOnlyClient);return _callSuper(this,LicensingModuleReadOnlyClient,[rpcClient,address]);}/**\n   * method predictMintingLicenseFee for contract LicensingModule\n   *\n   * @param request LicensingModulePredictMintingLicenseFeeRequest\n   * @return Promise<LicensingModulePredictMintingLicenseFeeResponse>\n   */_inherits(LicensingModuleReadOnlyClient,_LicensingModuleEvent);return _createClass(LicensingModuleReadOnlyClient,[{key:\"predictMintingLicenseFee\",value:(function(){var _predictMintingLicenseFee=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee99(request){var result;return _regenerator().w(function(_context99){while(1)switch(_context99.n){case 0:_context99.n=1;return this.rpcClient.readContract({abi:licensingModuleAbi,address:this.address,functionName:\"predictMintingLicenseFee\",args:[request.licensorIpId,request.licenseTemplate,request.licenseTermsId,request.amount,request.receiver,request.royaltyContext]});case 1:result=_context99.v;return _context99.a(2,{currencyToken:result[0],tokenAmount:result[1]});}},_callee99,this);}));function predictMintingLicenseFee(_x73){return _predictMintingLicenseFee.apply(this,arguments);}return predictMintingLicenseFee;}())}]);}(LicensingModuleEventClient);/**\n * contract LicensingModule write method\n */var LicensingModuleClient=/*#__PURE__*/function(_LicensingModuleReadO){function LicensingModuleClient(rpcClient,wallet,address){var _this0;_classCallCheck(this,LicensingModuleClient);_this0=_callSuper(this,LicensingModuleClient,[rpcClient,address]);_this0.wallet=wallet;return _this0;}/**\n   * method attachLicenseTerms for contract LicensingModule\n   *\n   * @param request LicensingModuleAttachLicenseTermsRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(LicensingModuleClient,_LicensingModuleReadO);return _createClass(LicensingModuleClient,[{key:\"attachLicenseTerms\",value:(function(){var _attachLicenseTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee100(request){var _yield$this$rpcClient52,call;return _regenerator().w(function(_context100){while(1)switch(_context100.n){case 0:_context100.n=1;return this.rpcClient.simulateContract({abi:licensingModuleAbi,address:this.address,functionName:\"attachLicenseTerms\",account:this.wallet.account,args:[request.ipId,request.licenseTemplate,request.licenseTermsId]});case 1:_yield$this$rpcClient52=_context100.v;call=_yield$this$rpcClient52.request;_context100.n=2;return this.wallet.writeContract(call);case 2:return _context100.a(2,_context100.v);}},_callee100,this);}));function attachLicenseTerms(_x74){return _attachLicenseTerms.apply(this,arguments);}return attachLicenseTerms;}()/**\n   * method attachLicenseTerms for contract LicensingModule with only encode\n   *\n   * @param request LicensingModuleAttachLicenseTermsRequest\n   * @return EncodedTxData\n   */)},{key:\"attachLicenseTermsEncode\",value:function attachLicenseTermsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licensingModuleAbi,functionName:\"attachLicenseTerms\",args:[request.ipId,request.licenseTemplate,request.licenseTermsId]})};}/**\n   * method mintLicenseTokens for contract LicensingModule\n   *\n   * @param request LicensingModuleMintLicenseTokensRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"mintLicenseTokens\",value:(function(){var _mintLicenseTokens=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee101(request){var _yield$this$rpcClient53,call;return _regenerator().w(function(_context101){while(1)switch(_context101.n){case 0:_context101.n=1;return this.rpcClient.simulateContract({abi:licensingModuleAbi,address:this.address,functionName:\"mintLicenseTokens\",account:this.wallet.account,args:[request.licensorIpId,request.licenseTemplate,request.licenseTermsId,request.amount,request.receiver,request.royaltyContext,request.maxMintingFee,request.maxRevenueShare]});case 1:_yield$this$rpcClient53=_context101.v;call=_yield$this$rpcClient53.request;_context101.n=2;return this.wallet.writeContract(call);case 2:return _context101.a(2,_context101.v);}},_callee101,this);}));function mintLicenseTokens(_x75){return _mintLicenseTokens.apply(this,arguments);}return mintLicenseTokens;}()/**\n   * method mintLicenseTokens for contract LicensingModule with only encode\n   *\n   * @param request LicensingModuleMintLicenseTokensRequest\n   * @return EncodedTxData\n   */)},{key:\"mintLicenseTokensEncode\",value:function mintLicenseTokensEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licensingModuleAbi,functionName:\"mintLicenseTokens\",args:[request.licensorIpId,request.licenseTemplate,request.licenseTermsId,request.amount,request.receiver,request.royaltyContext,request.maxMintingFee,request.maxRevenueShare]})};}/**\n   * method registerDerivative for contract LicensingModule\n   *\n   * @param request LicensingModuleRegisterDerivativeRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerDerivative\",value:(function(){var _registerDerivative=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee102(request){var _yield$this$rpcClient54,call;return _regenerator().w(function(_context102){while(1)switch(_context102.n){case 0:_context102.n=1;return this.rpcClient.simulateContract({abi:licensingModuleAbi,address:this.address,functionName:\"registerDerivative\",account:this.wallet.account,args:[request.childIpId,request.parentIpIds,request.licenseTermsIds,request.licenseTemplate,request.royaltyContext,request.maxMintingFee,request.maxRts,request.maxRevenueShare]});case 1:_yield$this$rpcClient54=_context102.v;call=_yield$this$rpcClient54.request;_context102.n=2;return this.wallet.writeContract(call);case 2:return _context102.a(2,_context102.v);}},_callee102,this);}));function registerDerivative(_x76){return _registerDerivative.apply(this,arguments);}return registerDerivative;}()/**\n   * method registerDerivative for contract LicensingModule with only encode\n   *\n   * @param request LicensingModuleRegisterDerivativeRequest\n   * @return EncodedTxData\n   */)},{key:\"registerDerivativeEncode\",value:function registerDerivativeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licensingModuleAbi,functionName:\"registerDerivative\",args:[request.childIpId,request.parentIpIds,request.licenseTermsIds,request.licenseTemplate,request.royaltyContext,request.maxMintingFee,request.maxRts,request.maxRevenueShare]})};}/**\n   * method registerDerivativeWithLicenseTokens for contract LicensingModule\n   *\n   * @param request LicensingModuleRegisterDerivativeWithLicenseTokensRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerDerivativeWithLicenseTokens\",value:(function(){var _registerDerivativeWithLicenseTokens=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee103(request){var _yield$this$rpcClient55,call;return _regenerator().w(function(_context103){while(1)switch(_context103.n){case 0:_context103.n=1;return this.rpcClient.simulateContract({abi:licensingModuleAbi,address:this.address,functionName:\"registerDerivativeWithLicenseTokens\",account:this.wallet.account,args:[request.childIpId,request.licenseTokenIds,request.royaltyContext,request.maxRts]});case 1:_yield$this$rpcClient55=_context103.v;call=_yield$this$rpcClient55.request;_context103.n=2;return this.wallet.writeContract(call);case 2:return _context103.a(2,_context103.v);}},_callee103,this);}));function registerDerivativeWithLicenseTokens(_x77){return _registerDerivativeWithLicenseTokens.apply(this,arguments);}return registerDerivativeWithLicenseTokens;}()/**\n   * method registerDerivativeWithLicenseTokens for contract LicensingModule with only encode\n   *\n   * @param request LicensingModuleRegisterDerivativeWithLicenseTokensRequest\n   * @return EncodedTxData\n   */)},{key:\"registerDerivativeWithLicenseTokensEncode\",value:function registerDerivativeWithLicenseTokensEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licensingModuleAbi,functionName:\"registerDerivativeWithLicenseTokens\",args:[request.childIpId,request.licenseTokenIds,request.royaltyContext,request.maxRts]})};}/**\n   * method setLicensingConfig for contract LicensingModule\n   *\n   * @param request LicensingModuleSetLicensingConfigRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setLicensingConfig\",value:(function(){var _setLicensingConfig=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee104(request){var _yield$this$rpcClient56,call;return _regenerator().w(function(_context104){while(1)switch(_context104.n){case 0:_context104.n=1;return this.rpcClient.simulateContract({abi:licensingModuleAbi,address:this.address,functionName:\"setLicensingConfig\",account:this.wallet.account,args:[request.ipId,request.licenseTemplate,request.licenseTermsId,request.licensingConfig]});case 1:_yield$this$rpcClient56=_context104.v;call=_yield$this$rpcClient56.request;_context104.n=2;return this.wallet.writeContract(call);case 2:return _context104.a(2,_context104.v);}},_callee104,this);}));function setLicensingConfig(_x78){return _setLicensingConfig.apply(this,arguments);}return setLicensingConfig;}()/**\n   * method setLicensingConfig for contract LicensingModule with only encode\n   *\n   * @param request LicensingModuleSetLicensingConfigRequest\n   * @return EncodedTxData\n   */)},{key:\"setLicensingConfigEncode\",value:function setLicensingConfigEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:licensingModuleAbi,functionName:\"setLicensingConfig\",args:[request.ipId,request.licenseTemplate,request.licenseTermsId,request.licensingConfig]})};}}]);}(LicensingModuleReadOnlyClient);// Contract ModuleRegistry =============================================================\n/**\n * ModuleRegistryIsRegisteredRequest\n *\n * @param moduleAddress address\n *//**\n * contract ModuleRegistry readonly method\n */var ModuleRegistryReadOnlyClient=/*#__PURE__*/function(){function ModuleRegistryReadOnlyClient(rpcClient,address){var _rpcClient$chain15;_classCallCheck(this,ModuleRegistryReadOnlyClient);this.address=address||getAddress(moduleRegistryAddress,(_rpcClient$chain15=rpcClient.chain)===null||_rpcClient$chain15===void 0?void 0:_rpcClient$chain15.id);this.rpcClient=rpcClient;}/**\n   * method isRegistered for contract ModuleRegistry\n   *\n   * @param request ModuleRegistryIsRegisteredRequest\n   * @return Promise<ModuleRegistryIsRegisteredResponse>\n   */return _createClass(ModuleRegistryReadOnlyClient,[{key:\"isRegistered\",value:(function(){var _isRegistered2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee105(request){return _regenerator().w(function(_context105){while(1)switch(_context105.n){case 0:_context105.n=1;return this.rpcClient.readContract({abi:moduleRegistryAbi,address:this.address,functionName:\"isRegistered\",args:[request.moduleAddress]});case 1:return _context105.a(2,_context105.v);}},_callee105,this);}));function isRegistered(_x79){return _isRegistered2.apply(this,arguments);}return isRegistered;}())}]);}();// Contract Multicall3 =============================================================\n/**\n * Multicall3Aggregate3Request\n *\n * @param calls tuple[]\n *//**\n * contract Multicall3 write method\n */var Multicall3Client=/*#__PURE__*/function(){function Multicall3Client(rpcClient,wallet,address){var _rpcClient$chain16;_classCallCheck(this,Multicall3Client);this.address=address||getAddress(multicall3Address,(_rpcClient$chain16=rpcClient.chain)===null||_rpcClient$chain16===void 0?void 0:_rpcClient$chain16.id);this.rpcClient=rpcClient;this.wallet=wallet;}/**\n   * method aggregate3 for contract Multicall3\n   *\n   * @param request Multicall3Aggregate3Request\n   * @return Promise<WriteContractReturnType>\n   */return _createClass(Multicall3Client,[{key:\"aggregate3\",value:(function(){var _aggregate=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee106(request){var _yield$this$rpcClient57,call;return _regenerator().w(function(_context106){while(1)switch(_context106.n){case 0:_context106.n=1;return this.rpcClient.simulateContract({abi:multicall3Abi,address:this.address,functionName:\"aggregate3\",account:this.wallet.account,args:[request.calls]});case 1:_yield$this$rpcClient57=_context106.v;call=_yield$this$rpcClient57.request;_context106.n=2;return this.wallet.writeContract(call);case 2:return _context106.a(2,_context106.v);}},_callee106,this);}));function aggregate3(_x80){return _aggregate.apply(this,arguments);}return aggregate3;}()/**\n   * method aggregate3 for contract Multicall3 with only encode\n   *\n   * @param request Multicall3Aggregate3Request\n   * @return EncodedTxData\n   */)},{key:\"aggregate3Encode\",value:function aggregate3Encode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:multicall3Abi,functionName:\"aggregate3\",args:[request.calls]})};}}]);}();// Contract PILicenseTemplate =============================================================\n/**\n * PiLicenseTemplateAuthorityUpdatedEvent\n *\n * @param authority address\n *//**\n * PiLicenseTemplateDerivativeApprovedEvent\n *\n * @param licenseTermsId uint256\n * @param ipId address\n * @param caller address\n * @param approved bool\n *//**\n * PiLicenseTemplateInitializedEvent\n *\n * @param version uint64\n *//**\n * PiLicenseTemplateLicenseTermsRegisteredEvent\n *\n * @param licenseTermsId uint256\n * @param licenseTemplate address\n * @param licenseTerms bytes\n *//**\n * PiLicenseTemplateUpgradedEvent\n *\n * @param implementation address\n *//**\n * PiLicenseTemplateAllowDerivativeRegistrationRequest\n *\n * @param licenseTermsId uint256\n *//**\n * PiLicenseTemplateCanAttachToGroupIpRequest\n *\n * @param licenseTermsId uint256\n *//**\n * PiLicenseTemplateCanOverrideRoyaltyPercentRequest\n *\n * @param licenseTermsId uint256\n * @param newRoyaltyPercent uint32\n *//**\n * PiLicenseTemplateExistsRequest\n *\n * @param licenseTermsId uint256\n *//**\n * PiLicenseTemplateGetEarlierExpireTimeRequest\n *\n * @param licenseTermsIds uint256[]\n * @param start uint256\n *//**\n * PiLicenseTemplateGetExpireTimeRequest\n *\n * @param licenseTermsId uint256\n * @param start uint256\n *//**\n * PiLicenseTemplateGetLicenseTermsRequest\n *\n * @param selectedLicenseTermsId uint256\n *//**\n * PiLicenseTemplateGetLicenseTermsResponse\n *\n * @param terms tuple\n *//**\n * PiLicenseTemplateGetLicenseTermsIdRequest\n *\n * @param terms tuple\n *//**\n * PiLicenseTemplateGetLicenseTermsIdResponse\n *\n * @param selectedLicenseTermsId uint256\n *//**\n * PiLicenseTemplateGetLicenseTermsUriRequest\n *\n * @param licenseTermsId uint256\n *//**\n * PiLicenseTemplateGetRoyaltyPolicyRequest\n *\n * @param licenseTermsId uint256\n *//**\n * PiLicenseTemplateGetRoyaltyPolicyResponse\n *\n * @param royaltyPolicy address\n * @param royaltyPercent uint32\n * @param mintingFee uint256\n * @param currency address\n *//**\n * PiLicenseTemplateIsDerivativeApprovedRequest\n *\n * @param parentIpId address\n * @param licenseTermsId uint256\n * @param childIpId address\n *//**\n * PiLicenseTemplateIsLicenseTransferableRequest\n *\n * @param licenseTermsId uint256\n *//**\n * PiLicenseTemplateSupportsInterfaceRequest\n *\n * @param interfaceId bytes4\n *//**\n * PiLicenseTemplateToJsonRequest\n *\n * @param licenseTermsId uint256\n *//**\n * PiLicenseTemplateVerifyCompatibleLicensesRequest\n *\n * @param licenseTermsIds uint256[]\n *//**\n * PiLicenseTemplateInitializeRequest\n *\n * @param accessManager address\n * @param name string\n * @param metadataURI string\n *//**\n * PiLicenseTemplateRegisterLicenseTermsRequest\n *\n * @param terms tuple\n *//**\n * PiLicenseTemplateSetApprovalRequest\n *\n * @param parentIpId address\n * @param licenseTermsId uint256\n * @param childIpId address\n * @param approved bool\n *//**\n * PiLicenseTemplateSetAuthorityRequest\n *\n * @param newAuthority address\n *//**\n * PiLicenseTemplateUpgradeToAndCallRequest\n *\n * @param newImplementation address\n * @param data bytes\n *//**\n * PiLicenseTemplateVerifyMintLicenseTokenRequest\n *\n * @param 0 uint256\n * @param 1 address\n * @param 2 address\n * @param 3 uint256\n *//**\n * PiLicenseTemplateVerifyRegisterDerivativeRequest\n *\n * @param childIpId address\n * @param parentIpId address\n * @param licenseTermsId uint256\n * @param licensee address\n *//**\n * PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest\n *\n * @param childIpId address\n * @param parentIpIds address[]\n * @param licenseTermsIds uint256[]\n * @param caller address\n *//**\n * contract PILicenseTemplate event\n */var PiLicenseTemplateEventClient=/*#__PURE__*/function(){function PiLicenseTemplateEventClient(rpcClient,address){var _rpcClient$chain17;_classCallCheck(this,PiLicenseTemplateEventClient);this.address=address||getAddress(piLicenseTemplateAddress,(_rpcClient$chain17=rpcClient.chain)===null||_rpcClient$chain17===void 0?void 0:_rpcClient$chain17.id);this.rpcClient=rpcClient;}/**\n   * event AuthorityUpdated for contract PILicenseTemplate\n   */return _createClass(PiLicenseTemplateEventClient,[{key:\"watchAuthorityUpdatedEvent\",value:function watchAuthorityUpdatedEvent(_onLogs22){return this.rpcClient.watchContractEvent({abi:piLicenseTemplateAbi,address:this.address,eventName:\"AuthorityUpdated\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs22(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event AuthorityUpdated for contract PILicenseTemplate\n   */},{key:\"parseTxAuthorityUpdatedEvent\",value:function parseTxAuthorityUpdatedEvent(txReceipt){var targetLogs=[];var _iterator22=_createForOfIteratorHelper(txReceipt.logs),_step22;try{for(_iterator22.s();!(_step22=_iterator22.n()).done;){var log=_step22.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:piLicenseTemplateAbi,eventName:\"AuthorityUpdated\",data:log.data,topics:log.topics});if(event.eventName===\"AuthorityUpdated\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator22.e(err);}finally{_iterator22.f();}return targetLogs;}/**\n   * event DerivativeApproved for contract PILicenseTemplate\n   */},{key:\"watchDerivativeApprovedEvent\",value:function watchDerivativeApprovedEvent(_onLogs23){return this.rpcClient.watchContractEvent({abi:piLicenseTemplateAbi,address:this.address,eventName:\"DerivativeApproved\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs23(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event DerivativeApproved for contract PILicenseTemplate\n   */},{key:\"parseTxDerivativeApprovedEvent\",value:function parseTxDerivativeApprovedEvent(txReceipt){var targetLogs=[];var _iterator23=_createForOfIteratorHelper(txReceipt.logs),_step23;try{for(_iterator23.s();!(_step23=_iterator23.n()).done;){var log=_step23.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:piLicenseTemplateAbi,eventName:\"DerivativeApproved\",data:log.data,topics:log.topics});if(event.eventName===\"DerivativeApproved\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator23.e(err);}finally{_iterator23.f();}return targetLogs;}/**\n   * event Initialized for contract PILicenseTemplate\n   */},{key:\"watchInitializedEvent\",value:function watchInitializedEvent(_onLogs24){return this.rpcClient.watchContractEvent({abi:piLicenseTemplateAbi,address:this.address,eventName:\"Initialized\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs24(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event Initialized for contract PILicenseTemplate\n   */},{key:\"parseTxInitializedEvent\",value:function parseTxInitializedEvent(txReceipt){var targetLogs=[];var _iterator24=_createForOfIteratorHelper(txReceipt.logs),_step24;try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var log=_step24.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:piLicenseTemplateAbi,eventName:\"Initialized\",data:log.data,topics:log.topics});if(event.eventName===\"Initialized\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator24.e(err);}finally{_iterator24.f();}return targetLogs;}/**\n   * event LicenseTermsRegistered for contract PILicenseTemplate\n   */},{key:\"watchLicenseTermsRegisteredEvent\",value:function watchLicenseTermsRegisteredEvent(_onLogs25){return this.rpcClient.watchContractEvent({abi:piLicenseTemplateAbi,address:this.address,eventName:\"LicenseTermsRegistered\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs25(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event LicenseTermsRegistered for contract PILicenseTemplate\n   */},{key:\"parseTxLicenseTermsRegisteredEvent\",value:function parseTxLicenseTermsRegisteredEvent(txReceipt){var targetLogs=[];var _iterator25=_createForOfIteratorHelper(txReceipt.logs),_step25;try{for(_iterator25.s();!(_step25=_iterator25.n()).done;){var log=_step25.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:piLicenseTemplateAbi,eventName:\"LicenseTermsRegistered\",data:log.data,topics:log.topics});if(event.eventName===\"LicenseTermsRegistered\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator25.e(err);}finally{_iterator25.f();}return targetLogs;}/**\n   * event Upgraded for contract PILicenseTemplate\n   */},{key:\"watchUpgradedEvent\",value:function watchUpgradedEvent(_onLogs26){return this.rpcClient.watchContractEvent({abi:piLicenseTemplateAbi,address:this.address,eventName:\"Upgraded\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs26(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event Upgraded for contract PILicenseTemplate\n   */},{key:\"parseTxUpgradedEvent\",value:function parseTxUpgradedEvent(txReceipt){var targetLogs=[];var _iterator26=_createForOfIteratorHelper(txReceipt.logs),_step26;try{for(_iterator26.s();!(_step26=_iterator26.n()).done;){var log=_step26.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:piLicenseTemplateAbi,eventName:\"Upgraded\",data:log.data,topics:log.topics});if(event.eventName===\"Upgraded\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator26.e(err);}finally{_iterator26.f();}return targetLogs;}}]);}();/**\n * contract PILicenseTemplate readonly method\n */var PiLicenseTemplateReadOnlyClient=/*#__PURE__*/function(_PiLicenseTemplateEve){function PiLicenseTemplateReadOnlyClient(rpcClient,address){_classCallCheck(this,PiLicenseTemplateReadOnlyClient);return _callSuper(this,PiLicenseTemplateReadOnlyClient,[rpcClient,address]);}/**\n   * method ACCESS_CONTROLLER for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateAccessControllerRequest\n   * @return Promise<PiLicenseTemplateAccessControllerResponse>\n   */_inherits(PiLicenseTemplateReadOnlyClient,_PiLicenseTemplateEve);return _createClass(PiLicenseTemplateReadOnlyClient,[{key:\"accessController\",value:(function(){var _accessController2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee107(){return _regenerator().w(function(_context107){while(1)switch(_context107.n){case 0:_context107.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"ACCESS_CONTROLLER\"});case 1:return _context107.a(2,_context107.v);}},_callee107,this);}));function accessController(){return _accessController2.apply(this,arguments);}return accessController;}()/**\n   * method IP_ASSET_REGISTRY for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateIpAssetRegistryRequest\n   * @return Promise<PiLicenseTemplateIpAssetRegistryResponse>\n   */)},{key:\"ipAssetRegistry\",value:(function(){var _ipAssetRegistry2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee108(){return _regenerator().w(function(_context108){while(1)switch(_context108.n){case 0:_context108.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"IP_ASSET_REGISTRY\"});case 1:return _context108.a(2,_context108.v);}},_callee108,this);}));function ipAssetRegistry(){return _ipAssetRegistry2.apply(this,arguments);}return ipAssetRegistry;}()/**\n   * method LICENSE_REGISTRY for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateLicenseRegistryRequest\n   * @return Promise<PiLicenseTemplateLicenseRegistryResponse>\n   */)},{key:\"licenseRegistry\",value:(function(){var _licenseRegistry=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee109(){return _regenerator().w(function(_context109){while(1)switch(_context109.n){case 0:_context109.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"LICENSE_REGISTRY\"});case 1:return _context109.a(2,_context109.v);}},_callee109,this);}));function licenseRegistry(){return _licenseRegistry.apply(this,arguments);}return licenseRegistry;}()/**\n   * method MODULE_REGISTRY for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateModuleRegistryRequest\n   * @return Promise<PiLicenseTemplateModuleRegistryResponse>\n   */)},{key:\"moduleRegistry\",value:(function(){var _moduleRegistry=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee110(){return _regenerator().w(function(_context110){while(1)switch(_context110.n){case 0:_context110.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"MODULE_REGISTRY\"});case 1:return _context110.a(2,_context110.v);}},_callee110,this);}));function moduleRegistry(){return _moduleRegistry.apply(this,arguments);}return moduleRegistry;}()/**\n   * method ROYALTY_MODULE for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateRoyaltyModuleRequest\n   * @return Promise<PiLicenseTemplateRoyaltyModuleResponse>\n   */)},{key:\"royaltyModule\",value:(function(){var _royaltyModule2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee111(){return _regenerator().w(function(_context111){while(1)switch(_context111.n){case 0:_context111.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"ROYALTY_MODULE\"});case 1:return _context111.a(2,_context111.v);}},_callee111,this);}));function royaltyModule(){return _royaltyModule2.apply(this,arguments);}return royaltyModule;}()/**\n   * method TERMS_RENDERER for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateTermsRendererRequest\n   * @return Promise<PiLicenseTemplateTermsRendererResponse>\n   */)},{key:\"termsRenderer\",value:(function(){var _termsRenderer=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee112(){return _regenerator().w(function(_context112){while(1)switch(_context112.n){case 0:_context112.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"TERMS_RENDERER\"});case 1:return _context112.a(2,_context112.v);}},_callee112,this);}));function termsRenderer(){return _termsRenderer.apply(this,arguments);}return termsRenderer;}()/**\n   * method UPGRADE_INTERFACE_VERSION for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateUpgradeInterfaceVersionRequest\n   * @return Promise<PiLicenseTemplateUpgradeInterfaceVersionResponse>\n   */)},{key:\"upgradeInterfaceVersion\",value:(function(){var _upgradeInterfaceVersion3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee113(){return _regenerator().w(function(_context113){while(1)switch(_context113.n){case 0:_context113.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"UPGRADE_INTERFACE_VERSION\"});case 1:return _context113.a(2,_context113.v);}},_callee113,this);}));function upgradeInterfaceVersion(){return _upgradeInterfaceVersion3.apply(this,arguments);}return upgradeInterfaceVersion;}()/**\n   * method allowDerivativeRegistration for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateAllowDerivativeRegistrationRequest\n   * @return Promise<PiLicenseTemplateAllowDerivativeRegistrationResponse>\n   */)},{key:\"allowDerivativeRegistration\",value:(function(){var _allowDerivativeRegistration=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee114(request){return _regenerator().w(function(_context114){while(1)switch(_context114.n){case 0:_context114.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"allowDerivativeRegistration\",args:[request.licenseTermsId]});case 1:return _context114.a(2,_context114.v);}},_callee114,this);}));function allowDerivativeRegistration(_x81){return _allowDerivativeRegistration.apply(this,arguments);}return allowDerivativeRegistration;}()/**\n   * method authority for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateAuthorityRequest\n   * @return Promise<PiLicenseTemplateAuthorityResponse>\n   */)},{key:\"authority\",value:(function(){var _authority3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee115(){return _regenerator().w(function(_context115){while(1)switch(_context115.n){case 0:_context115.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"authority\"});case 1:return _context115.a(2,_context115.v);}},_callee115,this);}));function authority(){return _authority3.apply(this,arguments);}return authority;}()/**\n   * method canAttachToGroupIp for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateCanAttachToGroupIpRequest\n   * @return Promise<PiLicenseTemplateCanAttachToGroupIpResponse>\n   */)},{key:\"canAttachToGroupIp\",value:(function(){var _canAttachToGroupIp=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee116(request){return _regenerator().w(function(_context116){while(1)switch(_context116.n){case 0:_context116.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"canAttachToGroupIp\",args:[request.licenseTermsId]});case 1:return _context116.a(2,_context116.v);}},_callee116,this);}));function canAttachToGroupIp(_x82){return _canAttachToGroupIp.apply(this,arguments);}return canAttachToGroupIp;}()/**\n   * method canOverrideRoyaltyPercent for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateCanOverrideRoyaltyPercentRequest\n   * @return Promise<PiLicenseTemplateCanOverrideRoyaltyPercentResponse>\n   */)},{key:\"canOverrideRoyaltyPercent\",value:(function(){var _canOverrideRoyaltyPercent=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee117(request){return _regenerator().w(function(_context117){while(1)switch(_context117.n){case 0:_context117.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"canOverrideRoyaltyPercent\",args:[request.licenseTermsId,request.newRoyaltyPercent]});case 1:return _context117.a(2,_context117.v);}},_callee117,this);}));function canOverrideRoyaltyPercent(_x83){return _canOverrideRoyaltyPercent.apply(this,arguments);}return canOverrideRoyaltyPercent;}()/**\n   * method exists for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateExistsRequest\n   * @return Promise<PiLicenseTemplateExistsResponse>\n   */)},{key:\"exists\",value:(function(){var _exists=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee118(request){return _regenerator().w(function(_context118){while(1)switch(_context118.n){case 0:_context118.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"exists\",args:[request.licenseTermsId]});case 1:return _context118.a(2,_context118.v);}},_callee118,this);}));function exists(_x84){return _exists.apply(this,arguments);}return exists;}()/**\n   * method getEarlierExpireTime for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateGetEarlierExpireTimeRequest\n   * @return Promise<PiLicenseTemplateGetEarlierExpireTimeResponse>\n   */)},{key:\"getEarlierExpireTime\",value:(function(){var _getEarlierExpireTime=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee119(request){return _regenerator().w(function(_context119){while(1)switch(_context119.n){case 0:_context119.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"getEarlierExpireTime\",args:[request.licenseTermsIds,request.start]});case 1:return _context119.a(2,_context119.v);}},_callee119,this);}));function getEarlierExpireTime(_x85){return _getEarlierExpireTime.apply(this,arguments);}return getEarlierExpireTime;}()/**\n   * method getExpireTime for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateGetExpireTimeRequest\n   * @return Promise<PiLicenseTemplateGetExpireTimeResponse>\n   */)},{key:\"getExpireTime\",value:(function(){var _getExpireTime=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee120(request){return _regenerator().w(function(_context120){while(1)switch(_context120.n){case 0:_context120.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"getExpireTime\",args:[request.licenseTermsId,request.start]});case 1:return _context120.a(2,_context120.v);}},_callee120,this);}));function getExpireTime(_x86){return _getExpireTime.apply(this,arguments);}return getExpireTime;}()/**\n   * method getLicenseTerms for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateGetLicenseTermsRequest\n   * @return Promise<PiLicenseTemplateGetLicenseTermsResponse>\n   */)},{key:\"getLicenseTerms\",value:(function(){var _getLicenseTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee121(request){var result;return _regenerator().w(function(_context121){while(1)switch(_context121.n){case 0:_context121.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"getLicenseTerms\",args:[request.selectedLicenseTermsId]});case 1:result=_context121.v;return _context121.a(2,{terms:result});}},_callee121,this);}));function getLicenseTerms(_x87){return _getLicenseTerms.apply(this,arguments);}return getLicenseTerms;}()/**\n   * method getLicenseTermsId for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateGetLicenseTermsIdRequest\n   * @return Promise<PiLicenseTemplateGetLicenseTermsIdResponse>\n   */)},{key:\"getLicenseTermsId\",value:(function(){var _getLicenseTermsId=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee122(request){var result;return _regenerator().w(function(_context122){while(1)switch(_context122.n){case 0:_context122.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"getLicenseTermsId\",args:[request.terms]});case 1:result=_context122.v;return _context122.a(2,{selectedLicenseTermsId:result});}},_callee122,this);}));function getLicenseTermsId(_x88){return _getLicenseTermsId.apply(this,arguments);}return getLicenseTermsId;}()/**\n   * method getLicenseTermsURI for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateGetLicenseTermsUriRequest\n   * @return Promise<PiLicenseTemplateGetLicenseTermsUriResponse>\n   */)},{key:\"getLicenseTermsUri\",value:(function(){var _getLicenseTermsUri=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee123(request){return _regenerator().w(function(_context123){while(1)switch(_context123.n){case 0:_context123.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"getLicenseTermsURI\",args:[request.licenseTermsId]});case 1:return _context123.a(2,_context123.v);}},_callee123,this);}));function getLicenseTermsUri(_x89){return _getLicenseTermsUri.apply(this,arguments);}return getLicenseTermsUri;}()/**\n   * method getMetadataURI for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateGetMetadataUriRequest\n   * @return Promise<PiLicenseTemplateGetMetadataUriResponse>\n   */)},{key:\"getMetadataUri\",value:(function(){var _getMetadataUri=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee124(){return _regenerator().w(function(_context124){while(1)switch(_context124.n){case 0:_context124.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"getMetadataURI\"});case 1:return _context124.a(2,_context124.v);}},_callee124,this);}));function getMetadataUri(){return _getMetadataUri.apply(this,arguments);}return getMetadataUri;}()/**\n   * method getRoyaltyPolicy for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateGetRoyaltyPolicyRequest\n   * @return Promise<PiLicenseTemplateGetRoyaltyPolicyResponse>\n   */)},{key:\"getRoyaltyPolicy\",value:(function(){var _getRoyaltyPolicy=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee125(request){var result;return _regenerator().w(function(_context125){while(1)switch(_context125.n){case 0:_context125.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"getRoyaltyPolicy\",args:[request.licenseTermsId]});case 1:result=_context125.v;return _context125.a(2,{royaltyPolicy:result[0],royaltyPercent:result[1],mintingFee:result[2],currency:result[3]});}},_callee125,this);}));function getRoyaltyPolicy(_x90){return _getRoyaltyPolicy.apply(this,arguments);}return getRoyaltyPolicy;}()/**\n   * method isConsumingScheduledOp for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateIsConsumingScheduledOpRequest\n   * @return Promise<PiLicenseTemplateIsConsumingScheduledOpResponse>\n   */)},{key:\"isConsumingScheduledOp\",value:(function(){var _isConsumingScheduledOp3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee126(){return _regenerator().w(function(_context126){while(1)switch(_context126.n){case 0:_context126.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"isConsumingScheduledOp\"});case 1:return _context126.a(2,_context126.v);}},_callee126,this);}));function isConsumingScheduledOp(){return _isConsumingScheduledOp3.apply(this,arguments);}return isConsumingScheduledOp;}()/**\n   * method isDerivativeApproved for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateIsDerivativeApprovedRequest\n   * @return Promise<PiLicenseTemplateIsDerivativeApprovedResponse>\n   */)},{key:\"isDerivativeApproved\",value:(function(){var _isDerivativeApproved=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee127(request){return _regenerator().w(function(_context127){while(1)switch(_context127.n){case 0:_context127.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"isDerivativeApproved\",args:[request.parentIpId,request.licenseTermsId,request.childIpId]});case 1:return _context127.a(2,_context127.v);}},_callee127,this);}));function isDerivativeApproved(_x91){return _isDerivativeApproved.apply(this,arguments);}return isDerivativeApproved;}()/**\n   * method isLicenseTransferable for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateIsLicenseTransferableRequest\n   * @return Promise<PiLicenseTemplateIsLicenseTransferableResponse>\n   */)},{key:\"isLicenseTransferable\",value:(function(){var _isLicenseTransferable=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee128(request){return _regenerator().w(function(_context128){while(1)switch(_context128.n){case 0:_context128.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"isLicenseTransferable\",args:[request.licenseTermsId]});case 1:return _context128.a(2,_context128.v);}},_callee128,this);}));function isLicenseTransferable(_x92){return _isLicenseTransferable.apply(this,arguments);}return isLicenseTransferable;}()/**\n   * method name for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateNameRequest\n   * @return Promise<PiLicenseTemplateNameResponse>\n   */)},{key:\"name\",value:(function(){var _name2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee129(){return _regenerator().w(function(_context129){while(1)switch(_context129.n){case 0:_context129.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"name\"});case 1:return _context129.a(2,_context129.v);}},_callee129,this);}));function name(){return _name2.apply(this,arguments);}return name;}()/**\n   * method proxiableUUID for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateProxiableUuidRequest\n   * @return Promise<PiLicenseTemplateProxiableUuidResponse>\n   */)},{key:\"proxiableUuid\",value:(function(){var _proxiableUuid3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee130(){return _regenerator().w(function(_context130){while(1)switch(_context130.n){case 0:_context130.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"proxiableUUID\"});case 1:return _context130.a(2,_context130.v);}},_callee130,this);}));function proxiableUuid(){return _proxiableUuid3.apply(this,arguments);}return proxiableUuid;}()/**\n   * method supportsInterface for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateSupportsInterfaceRequest\n   * @return Promise<PiLicenseTemplateSupportsInterfaceResponse>\n   */)},{key:\"supportsInterface\",value:(function(){var _supportsInterface2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee131(request){return _regenerator().w(function(_context131){while(1)switch(_context131.n){case 0:_context131.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"supportsInterface\",args:[request.interfaceId]});case 1:return _context131.a(2,_context131.v);}},_callee131,this);}));function supportsInterface(_x93){return _supportsInterface2.apply(this,arguments);}return supportsInterface;}()/**\n   * method toJson for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateToJsonRequest\n   * @return Promise<PiLicenseTemplateToJsonResponse>\n   */)},{key:\"toJson\",value:(function(){var _toJson=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee132(request){return _regenerator().w(function(_context132){while(1)switch(_context132.n){case 0:_context132.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"toJson\",args:[request.licenseTermsId]});case 1:return _context132.a(2,_context132.v);}},_callee132,this);}));function toJson(_x94){return _toJson.apply(this,arguments);}return toJson;}()/**\n   * method totalRegisteredLicenseTerms for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateTotalRegisteredLicenseTermsRequest\n   * @return Promise<PiLicenseTemplateTotalRegisteredLicenseTermsResponse>\n   */)},{key:\"totalRegisteredLicenseTerms\",value:(function(){var _totalRegisteredLicenseTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee133(){return _regenerator().w(function(_context133){while(1)switch(_context133.n){case 0:_context133.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"totalRegisteredLicenseTerms\"});case 1:return _context133.a(2,_context133.v);}},_callee133,this);}));function totalRegisteredLicenseTerms(){return _totalRegisteredLicenseTerms.apply(this,arguments);}return totalRegisteredLicenseTerms;}()/**\n   * method verifyCompatibleLicenses for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateVerifyCompatibleLicensesRequest\n   * @return Promise<PiLicenseTemplateVerifyCompatibleLicensesResponse>\n   */)},{key:\"verifyCompatibleLicenses\",value:(function(){var _verifyCompatibleLicenses=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee134(request){return _regenerator().w(function(_context134){while(1)switch(_context134.n){case 0:_context134.n=1;return this.rpcClient.readContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"verifyCompatibleLicenses\",args:[request.licenseTermsIds]});case 1:return _context134.a(2,_context134.v);}},_callee134,this);}));function verifyCompatibleLicenses(_x95){return _verifyCompatibleLicenses.apply(this,arguments);}return verifyCompatibleLicenses;}())}]);}(PiLicenseTemplateEventClient);/**\n * contract PILicenseTemplate write method\n */var PiLicenseTemplateClient=/*#__PURE__*/function(_PiLicenseTemplateRea){function PiLicenseTemplateClient(rpcClient,wallet,address){var _this1;_classCallCheck(this,PiLicenseTemplateClient);_this1=_callSuper(this,PiLicenseTemplateClient,[rpcClient,address]);_this1.wallet=wallet;return _this1;}/**\n   * method initialize for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateInitializeRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(PiLicenseTemplateClient,_PiLicenseTemplateRea);return _createClass(PiLicenseTemplateClient,[{key:\"initialize\",value:(function(){var _initialize3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee135(request){var _yield$this$rpcClient58,call;return _regenerator().w(function(_context135){while(1)switch(_context135.n){case 0:_context135.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"initialize\",account:this.wallet.account,args:[request.accessManager,request.name,request.metadataURI]});case 1:_yield$this$rpcClient58=_context135.v;call=_yield$this$rpcClient58.request;_context135.n=2;return this.wallet.writeContract(call);case 2:return _context135.a(2,_context135.v);}},_callee135,this);}));function initialize(_x96){return _initialize3.apply(this,arguments);}return initialize;}()/**\n   * method initialize for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateInitializeRequest\n   * @return EncodedTxData\n   */)},{key:\"initializeEncode\",value:function initializeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"initialize\",args:[request.accessManager,request.name,request.metadataURI]})};}/**\n   * method registerLicenseTerms for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateRegisterLicenseTermsRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerLicenseTerms\",value:(function(){var _registerLicenseTerms=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee136(request){var _yield$this$rpcClient59,call;return _regenerator().w(function(_context136){while(1)switch(_context136.n){case 0:_context136.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"registerLicenseTerms\",account:this.wallet.account,args:[request.terms]});case 1:_yield$this$rpcClient59=_context136.v;call=_yield$this$rpcClient59.request;_context136.n=2;return this.wallet.writeContract(call);case 2:return _context136.a(2,_context136.v);}},_callee136,this);}));function registerLicenseTerms(_x97){return _registerLicenseTerms.apply(this,arguments);}return registerLicenseTerms;}()/**\n   * method registerLicenseTerms for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateRegisterLicenseTermsRequest\n   * @return EncodedTxData\n   */)},{key:\"registerLicenseTermsEncode\",value:function registerLicenseTermsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"registerLicenseTerms\",args:[request.terms]})};}/**\n   * method setApproval for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateSetApprovalRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setApproval\",value:(function(){var _setApproval=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee137(request){var _yield$this$rpcClient60,call;return _regenerator().w(function(_context137){while(1)switch(_context137.n){case 0:_context137.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"setApproval\",account:this.wallet.account,args:[request.parentIpId,request.licenseTermsId,request.childIpId,request.approved]});case 1:_yield$this$rpcClient60=_context137.v;call=_yield$this$rpcClient60.request;_context137.n=2;return this.wallet.writeContract(call);case 2:return _context137.a(2,_context137.v);}},_callee137,this);}));function setApproval(_x98){return _setApproval.apply(this,arguments);}return setApproval;}()/**\n   * method setApproval for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateSetApprovalRequest\n   * @return EncodedTxData\n   */)},{key:\"setApprovalEncode\",value:function setApprovalEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"setApproval\",args:[request.parentIpId,request.licenseTermsId,request.childIpId,request.approved]})};}/**\n   * method setAuthority for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateSetAuthorityRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"setAuthority\",value:(function(){var _setAuthority3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee138(request){var _yield$this$rpcClient61,call;return _regenerator().w(function(_context138){while(1)switch(_context138.n){case 0:_context138.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"setAuthority\",account:this.wallet.account,args:[request.newAuthority]});case 1:_yield$this$rpcClient61=_context138.v;call=_yield$this$rpcClient61.request;_context138.n=2;return this.wallet.writeContract(call);case 2:return _context138.a(2,_context138.v);}},_callee138,this);}));function setAuthority(_x99){return _setAuthority3.apply(this,arguments);}return setAuthority;}()/**\n   * method setAuthority for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateSetAuthorityRequest\n   * @return EncodedTxData\n   */)},{key:\"setAuthorityEncode\",value:function setAuthorityEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"setAuthority\",args:[request.newAuthority]})};}/**\n   * method upgradeToAndCall for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateUpgradeToAndCallRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"upgradeToAndCall\",value:(function(){var _upgradeToAndCall3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee139(request){var _yield$this$rpcClient62,call;return _regenerator().w(function(_context139){while(1)switch(_context139.n){case 0:_context139.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"upgradeToAndCall\",account:this.wallet.account,args:[request.newImplementation,request.data]});case 1:_yield$this$rpcClient62=_context139.v;call=_yield$this$rpcClient62.request;_context139.n=2;return this.wallet.writeContract(call);case 2:return _context139.a(2,_context139.v);}},_callee139,this);}));function upgradeToAndCall(_x100){return _upgradeToAndCall3.apply(this,arguments);}return upgradeToAndCall;}()/**\n   * method upgradeToAndCall for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateUpgradeToAndCallRequest\n   * @return EncodedTxData\n   */)},{key:\"upgradeToAndCallEncode\",value:function upgradeToAndCallEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"upgradeToAndCall\",args:[request.newImplementation,request.data]})};}/**\n   * method verifyMintLicenseToken for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateVerifyMintLicenseTokenRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"verifyMintLicenseToken\",value:(function(){var _verifyMintLicenseToken=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee140(request){var _yield$this$rpcClient63,call;return _regenerator().w(function(_context140){while(1)switch(_context140.n){case 0:_context140.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"verifyMintLicenseToken\",account:this.wallet.account,args:[request[0],request[1],request[2],request[3]]});case 1:_yield$this$rpcClient63=_context140.v;call=_yield$this$rpcClient63.request;_context140.n=2;return this.wallet.writeContract(call);case 2:return _context140.a(2,_context140.v);}},_callee140,this);}));function verifyMintLicenseToken(_x101){return _verifyMintLicenseToken.apply(this,arguments);}return verifyMintLicenseToken;}()/**\n   * method verifyMintLicenseToken for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateVerifyMintLicenseTokenRequest\n   * @return EncodedTxData\n   */)},{key:\"verifyMintLicenseTokenEncode\",value:function verifyMintLicenseTokenEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"verifyMintLicenseToken\",args:[request[0],request[1],request[2],request[3]]})};}/**\n   * method verifyRegisterDerivative for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateVerifyRegisterDerivativeRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"verifyRegisterDerivative\",value:(function(){var _verifyRegisterDerivative=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee141(request){var _yield$this$rpcClient64,call;return _regenerator().w(function(_context141){while(1)switch(_context141.n){case 0:_context141.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"verifyRegisterDerivative\",account:this.wallet.account,args:[request.childIpId,request.parentIpId,request.licenseTermsId,request.licensee]});case 1:_yield$this$rpcClient64=_context141.v;call=_yield$this$rpcClient64.request;_context141.n=2;return this.wallet.writeContract(call);case 2:return _context141.a(2,_context141.v);}},_callee141,this);}));function verifyRegisterDerivative(_x102){return _verifyRegisterDerivative.apply(this,arguments);}return verifyRegisterDerivative;}()/**\n   * method verifyRegisterDerivative for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateVerifyRegisterDerivativeRequest\n   * @return EncodedTxData\n   */)},{key:\"verifyRegisterDerivativeEncode\",value:function verifyRegisterDerivativeEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"verifyRegisterDerivative\",args:[request.childIpId,request.parentIpId,request.licenseTermsId,request.licensee]})};}/**\n   * method verifyRegisterDerivativeForAllParents for contract PILicenseTemplate\n   *\n   * @param request PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"verifyRegisterDerivativeForAllParents\",value:(function(){var _verifyRegisterDerivativeForAllParents=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee142(request){var _yield$this$rpcClient65,call;return _regenerator().w(function(_context142){while(1)switch(_context142.n){case 0:_context142.n=1;return this.rpcClient.simulateContract({abi:piLicenseTemplateAbi,address:this.address,functionName:\"verifyRegisterDerivativeForAllParents\",account:this.wallet.account,args:[request.childIpId,request.parentIpIds,request.licenseTermsIds,request.caller]});case 1:_yield$this$rpcClient65=_context142.v;call=_yield$this$rpcClient65.request;_context142.n=2;return this.wallet.writeContract(call);case 2:return _context142.a(2,_context142.v);}},_callee142,this);}));function verifyRegisterDerivativeForAllParents(_x103){return _verifyRegisterDerivativeForAllParents.apply(this,arguments);}return verifyRegisterDerivativeForAllParents;}()/**\n   * method verifyRegisterDerivativeForAllParents for contract PILicenseTemplate with only encode\n   *\n   * @param request PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest\n   * @return EncodedTxData\n   */)},{key:\"verifyRegisterDerivativeForAllParentsEncode\",value:function verifyRegisterDerivativeForAllParentsEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:piLicenseTemplateAbi,functionName:\"verifyRegisterDerivativeForAllParents\",args:[request.childIpId,request.parentIpIds,request.licenseTermsIds,request.caller]})};}}]);}(PiLicenseTemplateReadOnlyClient);// Contract RegistrationWorkflows =============================================================\n/**\n * RegistrationWorkflowsCollectionCreatedEvent\n *\n * @param spgNftContract address\n *//**\n * RegistrationWorkflowsCreateCollectionRequest\n *\n * @param spgNftInitParams tuple\n *//**\n * RegistrationWorkflowsMintAndRegisterIpRequest\n *\n * @param spgNftContract address\n * @param recipient address\n * @param ipMetadata tuple\n * @param allowDuplicates bool\n *//**\n * RegistrationWorkflowsMulticallRequest\n *\n * @param data bytes[]\n *//**\n * RegistrationWorkflowsRegisterIpRequest\n *\n * @param nftContract address\n * @param tokenId uint256\n * @param ipMetadata tuple\n * @param sigMetadata tuple\n *//**\n * contract RegistrationWorkflows event\n */var RegistrationWorkflowsEventClient=/*#__PURE__*/function(){function RegistrationWorkflowsEventClient(rpcClient,address){var _rpcClient$chain18;_classCallCheck(this,RegistrationWorkflowsEventClient);this.address=address||getAddress(registrationWorkflowsAddress,(_rpcClient$chain18=rpcClient.chain)===null||_rpcClient$chain18===void 0?void 0:_rpcClient$chain18.id);this.rpcClient=rpcClient;}/**\n   * event CollectionCreated for contract RegistrationWorkflows\n   */return _createClass(RegistrationWorkflowsEventClient,[{key:\"watchCollectionCreatedEvent\",value:function watchCollectionCreatedEvent(_onLogs27){return this.rpcClient.watchContractEvent({abi:registrationWorkflowsAbi,address:this.address,eventName:\"CollectionCreated\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs27(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event CollectionCreated for contract RegistrationWorkflows\n   */},{key:\"parseTxCollectionCreatedEvent\",value:function parseTxCollectionCreatedEvent(txReceipt){var targetLogs=[];var _iterator27=_createForOfIteratorHelper(txReceipt.logs),_step27;try{for(_iterator27.s();!(_step27=_iterator27.n()).done;){var log=_step27.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:registrationWorkflowsAbi,eventName:\"CollectionCreated\",data:log.data,topics:log.topics});if(event.eventName===\"CollectionCreated\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator27.e(err);}finally{_iterator27.f();}return targetLogs;}}]);}();/**\n * contract RegistrationWorkflows write method\n */var RegistrationWorkflowsClient=/*#__PURE__*/function(_RegistrationWorkflow){function RegistrationWorkflowsClient(rpcClient,wallet,address){var _this10;_classCallCheck(this,RegistrationWorkflowsClient);_this10=_callSuper(this,RegistrationWorkflowsClient,[rpcClient,address]);_this10.wallet=wallet;return _this10;}/**\n   * method createCollection for contract RegistrationWorkflows\n   *\n   * @param request RegistrationWorkflowsCreateCollectionRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(RegistrationWorkflowsClient,_RegistrationWorkflow);return _createClass(RegistrationWorkflowsClient,[{key:\"createCollection\",value:(function(){var _createCollection=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee143(request){var _yield$this$rpcClient66,call;return _regenerator().w(function(_context143){while(1)switch(_context143.n){case 0:_context143.n=1;return this.rpcClient.simulateContract({abi:registrationWorkflowsAbi,address:this.address,functionName:\"createCollection\",account:this.wallet.account,args:[request.spgNftInitParams]});case 1:_yield$this$rpcClient66=_context143.v;call=_yield$this$rpcClient66.request;_context143.n=2;return this.wallet.writeContract(call);case 2:return _context143.a(2,_context143.v);}},_callee143,this);}));function createCollection(_x104){return _createCollection.apply(this,arguments);}return createCollection;}()/**\n   * method createCollection for contract RegistrationWorkflows with only encode\n   *\n   * @param request RegistrationWorkflowsCreateCollectionRequest\n   * @return EncodedTxData\n   */)},{key:\"createCollectionEncode\",value:function createCollectionEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:registrationWorkflowsAbi,functionName:\"createCollection\",args:[request.spgNftInitParams]})};}/**\n   * method mintAndRegisterIp for contract RegistrationWorkflows\n   *\n   * @param request RegistrationWorkflowsMintAndRegisterIpRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"mintAndRegisterIp\",value:(function(){var _mintAndRegisterIp=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee144(request){var _yield$this$rpcClient67,call;return _regenerator().w(function(_context144){while(1)switch(_context144.n){case 0:_context144.n=1;return this.rpcClient.simulateContract({abi:registrationWorkflowsAbi,address:this.address,functionName:\"mintAndRegisterIp\",account:this.wallet.account,args:[request.spgNftContract,request.recipient,request.ipMetadata,request.allowDuplicates]});case 1:_yield$this$rpcClient67=_context144.v;call=_yield$this$rpcClient67.request;_context144.n=2;return this.wallet.writeContract(call);case 2:return _context144.a(2,_context144.v);}},_callee144,this);}));function mintAndRegisterIp(_x105){return _mintAndRegisterIp.apply(this,arguments);}return mintAndRegisterIp;}()/**\n   * method mintAndRegisterIp for contract RegistrationWorkflows with only encode\n   *\n   * @param request RegistrationWorkflowsMintAndRegisterIpRequest\n   * @return EncodedTxData\n   */)},{key:\"mintAndRegisterIpEncode\",value:function mintAndRegisterIpEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:registrationWorkflowsAbi,functionName:\"mintAndRegisterIp\",args:[request.spgNftContract,request.recipient,request.ipMetadata,request.allowDuplicates]})};}/**\n   * method multicall for contract RegistrationWorkflows\n   *\n   * @param request RegistrationWorkflowsMulticallRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"multicall\",value:(function(){var _multicall3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee145(request){var _yield$this$rpcClient68,call;return _regenerator().w(function(_context145){while(1)switch(_context145.n){case 0:_context145.n=1;return this.rpcClient.simulateContract({abi:registrationWorkflowsAbi,address:this.address,functionName:\"multicall\",account:this.wallet.account,args:[request.data]});case 1:_yield$this$rpcClient68=_context145.v;call=_yield$this$rpcClient68.request;_context145.n=2;return this.wallet.writeContract(call);case 2:return _context145.a(2,_context145.v);}},_callee145,this);}));function multicall(_x106){return _multicall3.apply(this,arguments);}return multicall;}()/**\n   * method multicall for contract RegistrationWorkflows with only encode\n   *\n   * @param request RegistrationWorkflowsMulticallRequest\n   * @return EncodedTxData\n   */)},{key:\"multicallEncode\",value:function multicallEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:registrationWorkflowsAbi,functionName:\"multicall\",args:[request.data]})};}/**\n   * method registerIp for contract RegistrationWorkflows\n   *\n   * @param request RegistrationWorkflowsRegisterIpRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerIp\",value:(function(){var _registerIp=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee146(request){var _yield$this$rpcClient69,call;return _regenerator().w(function(_context146){while(1)switch(_context146.n){case 0:_context146.n=1;return this.rpcClient.simulateContract({abi:registrationWorkflowsAbi,address:this.address,functionName:\"registerIp\",account:this.wallet.account,args:[request.nftContract,request.tokenId,request.ipMetadata,request.sigMetadata]});case 1:_yield$this$rpcClient69=_context146.v;call=_yield$this$rpcClient69.request;_context146.n=2;return this.wallet.writeContract(call);case 2:return _context146.a(2,_context146.v);}},_callee146,this);}));function registerIp(_x107){return _registerIp.apply(this,arguments);}return registerIp;}()/**\n   * method registerIp for contract RegistrationWorkflows with only encode\n   *\n   * @param request RegistrationWorkflowsRegisterIpRequest\n   * @return EncodedTxData\n   */)},{key:\"registerIpEncode\",value:function registerIpEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:registrationWorkflowsAbi,functionName:\"registerIp\",args:[request.nftContract,request.tokenId,request.ipMetadata,request.sigMetadata]})};}}]);}(RegistrationWorkflowsEventClient);// Contract RoyaltyModule =============================================================\n/**\n * RoyaltyModuleIpRoyaltyVaultDeployedEvent\n *\n * @param ipId address\n * @param ipRoyaltyVault address\n *//**\n * RoyaltyModuleRoyaltyPaidEvent\n *\n * @param receiverIpId address\n * @param payerIpId address\n * @param sender address\n * @param token address\n * @param amount uint256\n * @param amountAfterFee uint256\n *//**\n * RoyaltyModuleIpRoyaltyVaultsRequest\n *\n * @param ipId address\n *//**\n * RoyaltyModuleIsWhitelistedRoyaltyPolicyRequest\n *\n * @param royaltyPolicy address\n *//**\n * RoyaltyModuleIsWhitelistedRoyaltyTokenRequest\n *\n * @param token address\n *//**\n * RoyaltyModulePayRoyaltyOnBehalfRequest\n *\n * @param receiverIpId address\n * @param payerIpId address\n * @param token address\n * @param amount uint256\n *//**\n * contract RoyaltyModule event\n */var RoyaltyModuleEventClient=/*#__PURE__*/function(){function RoyaltyModuleEventClient(rpcClient,address){var _rpcClient$chain19;_classCallCheck(this,RoyaltyModuleEventClient);this.address=address||getAddress(royaltyModuleAddress,(_rpcClient$chain19=rpcClient.chain)===null||_rpcClient$chain19===void 0?void 0:_rpcClient$chain19.id);this.rpcClient=rpcClient;}/**\n   * event IpRoyaltyVaultDeployed for contract RoyaltyModule\n   */return _createClass(RoyaltyModuleEventClient,[{key:\"watchIpRoyaltyVaultDeployedEvent\",value:function watchIpRoyaltyVaultDeployedEvent(_onLogs28){return this.rpcClient.watchContractEvent({abi:royaltyModuleAbi,address:this.address,eventName:\"IpRoyaltyVaultDeployed\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs28(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event IpRoyaltyVaultDeployed for contract RoyaltyModule\n   */},{key:\"parseTxIpRoyaltyVaultDeployedEvent\",value:function parseTxIpRoyaltyVaultDeployedEvent(txReceipt){var targetLogs=[];var _iterator28=_createForOfIteratorHelper(txReceipt.logs),_step28;try{for(_iterator28.s();!(_step28=_iterator28.n()).done;){var log=_step28.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:royaltyModuleAbi,eventName:\"IpRoyaltyVaultDeployed\",data:log.data,topics:log.topics});if(event.eventName===\"IpRoyaltyVaultDeployed\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator28.e(err);}finally{_iterator28.f();}return targetLogs;}/**\n   * event RoyaltyPaid for contract RoyaltyModule\n   */},{key:\"watchRoyaltyPaidEvent\",value:function watchRoyaltyPaidEvent(_onLogs29){return this.rpcClient.watchContractEvent({abi:royaltyModuleAbi,address:this.address,eventName:\"RoyaltyPaid\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs29(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event RoyaltyPaid for contract RoyaltyModule\n   */},{key:\"parseTxRoyaltyPaidEvent\",value:function parseTxRoyaltyPaidEvent(txReceipt){var targetLogs=[];var _iterator29=_createForOfIteratorHelper(txReceipt.logs),_step29;try{for(_iterator29.s();!(_step29=_iterator29.n()).done;){var log=_step29.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:royaltyModuleAbi,eventName:\"RoyaltyPaid\",data:log.data,topics:log.topics});if(event.eventName===\"RoyaltyPaid\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator29.e(err);}finally{_iterator29.f();}return targetLogs;}}]);}();/**\n * contract RoyaltyModule readonly method\n */var RoyaltyModuleReadOnlyClient=/*#__PURE__*/function(_RoyaltyModuleEventCl){function RoyaltyModuleReadOnlyClient(rpcClient,address){_classCallCheck(this,RoyaltyModuleReadOnlyClient);return _callSuper(this,RoyaltyModuleReadOnlyClient,[rpcClient,address]);}/**\n   * method ipRoyaltyVaults for contract RoyaltyModule\n   *\n   * @param request RoyaltyModuleIpRoyaltyVaultsRequest\n   * @return Promise<RoyaltyModuleIpRoyaltyVaultsResponse>\n   */_inherits(RoyaltyModuleReadOnlyClient,_RoyaltyModuleEventCl);return _createClass(RoyaltyModuleReadOnlyClient,[{key:\"ipRoyaltyVaults\",value:(function(){var _ipRoyaltyVaults=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee147(request){return _regenerator().w(function(_context147){while(1)switch(_context147.n){case 0:_context147.n=1;return this.rpcClient.readContract({abi:royaltyModuleAbi,address:this.address,functionName:\"ipRoyaltyVaults\",args:[request.ipId]});case 1:return _context147.a(2,_context147.v);}},_callee147,this);}));function ipRoyaltyVaults(_x108){return _ipRoyaltyVaults.apply(this,arguments);}return ipRoyaltyVaults;}()/**\n   * method isWhitelistedRoyaltyPolicy for contract RoyaltyModule\n   *\n   * @param request RoyaltyModuleIsWhitelistedRoyaltyPolicyRequest\n   * @return Promise<RoyaltyModuleIsWhitelistedRoyaltyPolicyResponse>\n   */)},{key:\"isWhitelistedRoyaltyPolicy\",value:(function(){var _isWhitelistedRoyaltyPolicy=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee148(request){return _regenerator().w(function(_context148){while(1)switch(_context148.n){case 0:_context148.n=1;return this.rpcClient.readContract({abi:royaltyModuleAbi,address:this.address,functionName:\"isWhitelistedRoyaltyPolicy\",args:[request.royaltyPolicy]});case 1:return _context148.a(2,_context148.v);}},_callee148,this);}));function isWhitelistedRoyaltyPolicy(_x109){return _isWhitelistedRoyaltyPolicy.apply(this,arguments);}return isWhitelistedRoyaltyPolicy;}()/**\n   * method isWhitelistedRoyaltyToken for contract RoyaltyModule\n   *\n   * @param request RoyaltyModuleIsWhitelistedRoyaltyTokenRequest\n   * @return Promise<RoyaltyModuleIsWhitelistedRoyaltyTokenResponse>\n   */)},{key:\"isWhitelistedRoyaltyToken\",value:(function(){var _isWhitelistedRoyaltyToken=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee149(request){return _regenerator().w(function(_context149){while(1)switch(_context149.n){case 0:_context149.n=1;return this.rpcClient.readContract({abi:royaltyModuleAbi,address:this.address,functionName:\"isWhitelistedRoyaltyToken\",args:[request.token]});case 1:return _context149.a(2,_context149.v);}},_callee149,this);}));function isWhitelistedRoyaltyToken(_x110){return _isWhitelistedRoyaltyToken.apply(this,arguments);}return isWhitelistedRoyaltyToken;}())}]);}(RoyaltyModuleEventClient);/**\n * contract RoyaltyModule write method\n */var RoyaltyModuleClient=/*#__PURE__*/function(_RoyaltyModuleReadOnl){function RoyaltyModuleClient(rpcClient,wallet,address){var _this11;_classCallCheck(this,RoyaltyModuleClient);_this11=_callSuper(this,RoyaltyModuleClient,[rpcClient,address]);_this11.wallet=wallet;return _this11;}/**\n   * method payRoyaltyOnBehalf for contract RoyaltyModule\n   *\n   * @param request RoyaltyModulePayRoyaltyOnBehalfRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(RoyaltyModuleClient,_RoyaltyModuleReadOnl);return _createClass(RoyaltyModuleClient,[{key:\"payRoyaltyOnBehalf\",value:(function(){var _payRoyaltyOnBehalf=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee150(request){var _yield$this$rpcClient70,call;return _regenerator().w(function(_context150){while(1)switch(_context150.n){case 0:_context150.n=1;return this.rpcClient.simulateContract({abi:royaltyModuleAbi,address:this.address,functionName:\"payRoyaltyOnBehalf\",account:this.wallet.account,args:[request.receiverIpId,request.payerIpId,request.token,request.amount]});case 1:_yield$this$rpcClient70=_context150.v;call=_yield$this$rpcClient70.request;_context150.n=2;return this.wallet.writeContract(call);case 2:return _context150.a(2,_context150.v);}},_callee150,this);}));function payRoyaltyOnBehalf(_x111){return _payRoyaltyOnBehalf.apply(this,arguments);}return payRoyaltyOnBehalf;}()/**\n   * method payRoyaltyOnBehalf for contract RoyaltyModule with only encode\n   *\n   * @param request RoyaltyModulePayRoyaltyOnBehalfRequest\n   * @return EncodedTxData\n   */)},{key:\"payRoyaltyOnBehalfEncode\",value:function payRoyaltyOnBehalfEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyModuleAbi,functionName:\"payRoyaltyOnBehalf\",args:[request.receiverIpId,request.payerIpId,request.token,request.amount]})};}}]);}(RoyaltyModuleReadOnlyClient);// Contract RoyaltyPolicyLAP =============================================================\n/**\n * RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest\n *\n * @param ipId address\n * @param royaltyShares tuple[]\n * @param sigApproveRoyaltyTokens tuple\n *//**\n * RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest\n *\n * @param spgNftContract address\n * @param recipient address\n * @param ipMetadata tuple\n * @param licenseTermsData tuple[]\n * @param royaltyShares tuple[]\n * @param allowDuplicates bool\n *//**\n * RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest\n *\n * @param spgNftContract address\n * @param recipient address\n * @param ipMetadata tuple\n * @param derivData tuple\n * @param royaltyShares tuple[]\n * @param allowDuplicates bool\n *//**\n * RoyaltyTokenDistributionWorkflowsMulticallRequest\n *\n * @param data bytes[]\n *//**\n * RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest\n *\n * @param nftContract address\n * @param tokenId uint256\n * @param ipMetadata tuple\n * @param licenseTermsData tuple[]\n * @param sigMetadataAndAttachAndConfig tuple\n *//**\n * RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest\n *\n * @param nftContract address\n * @param tokenId uint256\n * @param ipMetadata tuple\n * @param derivData tuple\n * @param sigMetadataAndRegister tuple\n *//**\n * contract RoyaltyTokenDistributionWorkflows write method\n */var RoyaltyTokenDistributionWorkflowsClient=/*#__PURE__*/function(){function RoyaltyTokenDistributionWorkflowsClient(rpcClient,wallet,address){var _rpcClient$chain21;_classCallCheck(this,RoyaltyTokenDistributionWorkflowsClient);this.address=address||getAddress(royaltyTokenDistributionWorkflowsAddress,(_rpcClient$chain21=rpcClient.chain)===null||_rpcClient$chain21===void 0?void 0:_rpcClient$chain21.id);this.rpcClient=rpcClient;this.wallet=wallet;}/**\n   * method distributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest\n   * @return Promise<WriteContractReturnType>\n   */return _createClass(RoyaltyTokenDistributionWorkflowsClient,[{key:\"distributeRoyaltyTokens\",value:(function(){var _distributeRoyaltyTokens=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee174(request){var _yield$this$rpcClient81,call;return _regenerator().w(function(_context174){while(1)switch(_context174.n){case 0:_context174.n=1;return this.rpcClient.simulateContract({abi:royaltyTokenDistributionWorkflowsAbi,address:this.address,functionName:\"distributeRoyaltyTokens\",account:this.wallet.account,args:[request.ipId,request.royaltyShares,request.sigApproveRoyaltyTokens]});case 1:_yield$this$rpcClient81=_context174.v;call=_yield$this$rpcClient81.request;_context174.n=2;return this.wallet.writeContract(call);case 2:return _context174.a(2,_context174.v);}},_callee174,this);}));function distributeRoyaltyTokens(_x123){return _distributeRoyaltyTokens.apply(this,arguments);}return distributeRoyaltyTokens;}()/**\n   * method distributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows with only encode\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest\n   * @return EncodedTxData\n   */)},{key:\"distributeRoyaltyTokensEncode\",value:function distributeRoyaltyTokensEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyTokenDistributionWorkflowsAbi,functionName:\"distributeRoyaltyTokens\",args:[request.ipId,request.royaltyShares,request.sigApproveRoyaltyTokens]})};}/**\n   * method mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens\",value:(function(){var _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee175(request){var _yield$this$rpcClient82,call;return _regenerator().w(function(_context175){while(1)switch(_context175.n){case 0:_context175.n=1;return this.rpcClient.simulateContract({abi:royaltyTokenDistributionWorkflowsAbi,address:this.address,functionName:\"mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens\",account:this.wallet.account,args:[request.spgNftContract,request.recipient,request.ipMetadata,request.licenseTermsData,request.royaltyShares,request.allowDuplicates]});case 1:_yield$this$rpcClient82=_context175.v;call=_yield$this$rpcClient82.request;_context175.n=2;return this.wallet.writeContract(call);case 2:return _context175.a(2,_context175.v);}},_callee175,this);}));function mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(_x124){return _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens.apply(this,arguments);}return mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens;}()/**\n   * method mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows with only encode\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest\n   * @return EncodedTxData\n   */)},{key:\"mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensEncode\",value:function mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyTokenDistributionWorkflowsAbi,functionName:\"mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens\",args:[request.spgNftContract,request.recipient,request.ipMetadata,request.licenseTermsData,request.royaltyShares,request.allowDuplicates]})};}/**\n   * method mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens\",value:(function(){var _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee176(request){var _yield$this$rpcClient83,call;return _regenerator().w(function(_context176){while(1)switch(_context176.n){case 0:_context176.n=1;return this.rpcClient.simulateContract({abi:royaltyTokenDistributionWorkflowsAbi,address:this.address,functionName:\"mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens\",account:this.wallet.account,args:[request.spgNftContract,request.recipient,request.ipMetadata,request.derivData,request.royaltyShares,request.allowDuplicates]});case 1:_yield$this$rpcClient83=_context176.v;call=_yield$this$rpcClient83.request;_context176.n=2;return this.wallet.writeContract(call);case 2:return _context176.a(2,_context176.v);}},_callee176,this);}));function mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(_x125){return _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens.apply(this,arguments);}return mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens;}()/**\n   * method mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows with only encode\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest\n   * @return EncodedTxData\n   */)},{key:\"mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensEncode\",value:function mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyTokenDistributionWorkflowsAbi,functionName:\"mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens\",args:[request.spgNftContract,request.recipient,request.ipMetadata,request.derivData,request.royaltyShares,request.allowDuplicates]})};}/**\n   * method multicall for contract RoyaltyTokenDistributionWorkflows\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsMulticallRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"multicall\",value:(function(){var _multicall4=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee177(request){var _yield$this$rpcClient84,call;return _regenerator().w(function(_context177){while(1)switch(_context177.n){case 0:_context177.n=1;return this.rpcClient.simulateContract({abi:royaltyTokenDistributionWorkflowsAbi,address:this.address,functionName:\"multicall\",account:this.wallet.account,args:[request.data]});case 1:_yield$this$rpcClient84=_context177.v;call=_yield$this$rpcClient84.request;_context177.n=2;return this.wallet.writeContract(call);case 2:return _context177.a(2,_context177.v);}},_callee177,this);}));function multicall(_x126){return _multicall4.apply(this,arguments);}return multicall;}()/**\n   * method multicall for contract RoyaltyTokenDistributionWorkflows with only encode\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsMulticallRequest\n   * @return EncodedTxData\n   */)},{key:\"multicallEncode\",value:function multicallEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyTokenDistributionWorkflowsAbi,functionName:\"multicall\",args:[request.data]})};}/**\n   * method registerIpAndAttachPILTermsAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerIpAndAttachPilTermsAndDeployRoyaltyVault\",value:(function(){var _registerIpAndAttachPilTermsAndDeployRoyaltyVault=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee178(request){var _yield$this$rpcClient85,call;return _regenerator().w(function(_context178){while(1)switch(_context178.n){case 0:_context178.n=1;return this.rpcClient.simulateContract({abi:royaltyTokenDistributionWorkflowsAbi,address:this.address,functionName:\"registerIpAndAttachPILTermsAndDeployRoyaltyVault\",account:this.wallet.account,args:[request.nftContract,request.tokenId,request.ipMetadata,request.licenseTermsData,request.sigMetadataAndAttachAndConfig]});case 1:_yield$this$rpcClient85=_context178.v;call=_yield$this$rpcClient85.request;_context178.n=2;return this.wallet.writeContract(call);case 2:return _context178.a(2,_context178.v);}},_callee178,this);}));function registerIpAndAttachPilTermsAndDeployRoyaltyVault(_x127){return _registerIpAndAttachPilTermsAndDeployRoyaltyVault.apply(this,arguments);}return registerIpAndAttachPilTermsAndDeployRoyaltyVault;}()/**\n   * method registerIpAndAttachPILTermsAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows with only encode\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest\n   * @return EncodedTxData\n   */)},{key:\"registerIpAndAttachPilTermsAndDeployRoyaltyVaultEncode\",value:function registerIpAndAttachPilTermsAndDeployRoyaltyVaultEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyTokenDistributionWorkflowsAbi,functionName:\"registerIpAndAttachPILTermsAndDeployRoyaltyVault\",args:[request.nftContract,request.tokenId,request.ipMetadata,request.licenseTermsData,request.sigMetadataAndAttachAndConfig]})};}/**\n   * method registerIpAndMakeDerivativeAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"registerIpAndMakeDerivativeAndDeployRoyaltyVault\",value:(function(){var _registerIpAndMakeDerivativeAndDeployRoyaltyVault=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee179(request){var _yield$this$rpcClient86,call;return _regenerator().w(function(_context179){while(1)switch(_context179.n){case 0:_context179.n=1;return this.rpcClient.simulateContract({abi:royaltyTokenDistributionWorkflowsAbi,address:this.address,functionName:\"registerIpAndMakeDerivativeAndDeployRoyaltyVault\",account:this.wallet.account,args:[request.nftContract,request.tokenId,request.ipMetadata,request.derivData,request.sigMetadataAndRegister]});case 1:_yield$this$rpcClient86=_context179.v;call=_yield$this$rpcClient86.request;_context179.n=2;return this.wallet.writeContract(call);case 2:return _context179.a(2,_context179.v);}},_callee179,this);}));function registerIpAndMakeDerivativeAndDeployRoyaltyVault(_x128){return _registerIpAndMakeDerivativeAndDeployRoyaltyVault.apply(this,arguments);}return registerIpAndMakeDerivativeAndDeployRoyaltyVault;}()/**\n   * method registerIpAndMakeDerivativeAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows with only encode\n   *\n   * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest\n   * @return EncodedTxData\n   */)},{key:\"registerIpAndMakeDerivativeAndDeployRoyaltyVaultEncode\",value:function registerIpAndMakeDerivativeAndDeployRoyaltyVaultEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyTokenDistributionWorkflowsAbi,functionName:\"registerIpAndMakeDerivativeAndDeployRoyaltyVault\",args:[request.nftContract,request.tokenId,request.ipMetadata,request.derivData,request.sigMetadataAndRegister]})};}}]);}();// Contract RoyaltyWorkflows =============================================================\n/**\n * RoyaltyWorkflowsClaimAllRevenueRequest\n *\n * @param ancestorIpId address\n * @param claimer address\n * @param childIpIds address[]\n * @param royaltyPolicies address[]\n * @param currencyTokens address[]\n *//**\n * RoyaltyWorkflowsMulticallRequest\n *\n * @param data bytes[]\n *//**\n * contract RoyaltyWorkflows write method\n */var RoyaltyWorkflowsClient=/*#__PURE__*/function(){function RoyaltyWorkflowsClient(rpcClient,wallet,address){var _rpcClient$chain22;_classCallCheck(this,RoyaltyWorkflowsClient);this.address=address||getAddress(royaltyWorkflowsAddress,(_rpcClient$chain22=rpcClient.chain)===null||_rpcClient$chain22===void 0?void 0:_rpcClient$chain22.id);this.rpcClient=rpcClient;this.wallet=wallet;}/**\n   * method claimAllRevenue for contract RoyaltyWorkflows\n   *\n   * @param request RoyaltyWorkflowsClaimAllRevenueRequest\n   * @return Promise<WriteContractReturnType>\n   */return _createClass(RoyaltyWorkflowsClient,[{key:\"claimAllRevenue\",value:(function(){var _claimAllRevenue=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee180(request){var _yield$this$rpcClient87,call;return _regenerator().w(function(_context180){while(1)switch(_context180.n){case 0:_context180.n=1;return this.rpcClient.simulateContract({abi:royaltyWorkflowsAbi,address:this.address,functionName:\"claimAllRevenue\",account:this.wallet.account,args:[request.ancestorIpId,request.claimer,request.childIpIds,request.royaltyPolicies,request.currencyTokens]});case 1:_yield$this$rpcClient87=_context180.v;call=_yield$this$rpcClient87.request;_context180.n=2;return this.wallet.writeContract(call);case 2:return _context180.a(2,_context180.v);}},_callee180,this);}));function claimAllRevenue(_x129){return _claimAllRevenue.apply(this,arguments);}return claimAllRevenue;}()/**\n   * method claimAllRevenue for contract RoyaltyWorkflows with only encode\n   *\n   * @param request RoyaltyWorkflowsClaimAllRevenueRequest\n   * @return EncodedTxData\n   */)},{key:\"claimAllRevenueEncode\",value:function claimAllRevenueEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyWorkflowsAbi,functionName:\"claimAllRevenue\",args:[request.ancestorIpId,request.claimer,request.childIpIds,request.royaltyPolicies,request.currencyTokens]})};}/**\n   * method multicall for contract RoyaltyWorkflows\n   *\n   * @param request RoyaltyWorkflowsMulticallRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"multicall\",value:(function(){var _multicall5=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee181(request){var _yield$this$rpcClient88,call;return _regenerator().w(function(_context181){while(1)switch(_context181.n){case 0:_context181.n=1;return this.rpcClient.simulateContract({abi:royaltyWorkflowsAbi,address:this.address,functionName:\"multicall\",account:this.wallet.account,args:[request.data]});case 1:_yield$this$rpcClient88=_context181.v;call=_yield$this$rpcClient88.request;_context181.n=2;return this.wallet.writeContract(call);case 2:return _context181.a(2,_context181.v);}},_callee181,this);}));function multicall(_x130){return _multicall5.apply(this,arguments);}return multicall;}()/**\n   * method multicall for contract RoyaltyWorkflows with only encode\n   *\n   * @param request RoyaltyWorkflowsMulticallRequest\n   * @return EncodedTxData\n   */)},{key:\"multicallEncode\",value:function multicallEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:royaltyWorkflowsAbi,functionName:\"multicall\",args:[request.data]})};}}]);}();// Contract SPGNFTBeacon =============================================================\n/**\n * SpgnftImplTransferEvent\n *\n * @param from address\n * @param to address\n * @param tokenId uint256\n *//**\n * SpgnftImplHasRoleRequest\n *\n * @param role bytes32\n * @param account address\n *//**\n * SpgnftImplTokenUriRequest\n *\n * @param tokenId uint256\n *//**\n * SpgnftImplSetTokenUriRequest\n *\n * @param tokenId uint256\n * @param tokenUri string\n *//**\n * contract SPGNFTImpl event\n */var SpgnftImplEventClient=/*#__PURE__*/function(){function SpgnftImplEventClient(rpcClient,address){var _rpcClient$chain24;_classCallCheck(this,SpgnftImplEventClient);this.address=address||getAddress(spgnftImplAddress,(_rpcClient$chain24=rpcClient.chain)===null||_rpcClient$chain24===void 0?void 0:_rpcClient$chain24.id);this.rpcClient=rpcClient;}/**\n   * event Transfer for contract SPGNFTImpl\n   */return _createClass(SpgnftImplEventClient,[{key:\"watchTransferEvent\",value:function watchTransferEvent(_onLogs38){return this.rpcClient.watchContractEvent({abi:spgnftImplAbi,address:this.address,eventName:\"Transfer\",onLogs:function onLogs(evs){evs.forEach(function(it){return _onLogs38(it.transactionHash,it.args);});}});}/**\n   * parse tx receipt event Transfer for contract SPGNFTImpl\n   */},{key:\"parseTxTransferEvent\",value:function parseTxTransferEvent(txReceipt){var targetLogs=[];var _iterator38=_createForOfIteratorHelper(txReceipt.logs),_step38;try{for(_iterator38.s();!(_step38=_iterator38.n()).done;){var log=_step38.value;try{var event=(0,viem__WEBPACK_IMPORTED_MODULE_4__.decodeEventLog)({abi:spgnftImplAbi,eventName:\"Transfer\",data:log.data,topics:log.topics});if(event.eventName===\"Transfer\"){targetLogs.push(event.args);}}catch(e){/* empty */}}}catch(err){_iterator38.e(err);}finally{_iterator38.f();}return targetLogs;}}]);}();/**\n * contract SPGNFTImpl readonly method\n */var SpgnftImplReadOnlyClient=/*#__PURE__*/function(_SpgnftImplEventClien){function SpgnftImplReadOnlyClient(rpcClient,address){_classCallCheck(this,SpgnftImplReadOnlyClient);return _callSuper(this,SpgnftImplReadOnlyClient,[rpcClient,address]);}/**\n   * method hasRole for contract SPGNFTImpl\n   *\n   * @param request SpgnftImplHasRoleRequest\n   * @return Promise<SpgnftImplHasRoleResponse>\n   */_inherits(SpgnftImplReadOnlyClient,_SpgnftImplEventClien);return _createClass(SpgnftImplReadOnlyClient,[{key:\"hasRole\",value:(function(){var _hasRole=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee187(request){return _regenerator().w(function(_context187){while(1)switch(_context187.n){case 0:_context187.n=1;return this.rpcClient.readContract({abi:spgnftImplAbi,address:this.address,functionName:\"hasRole\",args:[request.role,request.account]});case 1:return _context187.a(2,_context187.v);}},_callee187,this);}));function hasRole(_x133){return _hasRole.apply(this,arguments);}return hasRole;}()/**\n   * method mintFee for contract SPGNFTImpl\n   *\n   * @param request SpgnftImplMintFeeRequest\n   * @return Promise<SpgnftImplMintFeeResponse>\n   */)},{key:\"mintFee\",value:(function(){var _mintFee=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee188(){return _regenerator().w(function(_context188){while(1)switch(_context188.n){case 0:_context188.n=1;return this.rpcClient.readContract({abi:spgnftImplAbi,address:this.address,functionName:\"mintFee\"});case 1:return _context188.a(2,_context188.v);}},_callee188,this);}));function mintFee(){return _mintFee.apply(this,arguments);}return mintFee;}()/**\n   * method mintFeeToken for contract SPGNFTImpl\n   *\n   * @param request SpgnftImplMintFeeTokenRequest\n   * @return Promise<SpgnftImplMintFeeTokenResponse>\n   */)},{key:\"mintFeeToken\",value:(function(){var _mintFeeToken=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee189(){return _regenerator().w(function(_context189){while(1)switch(_context189.n){case 0:_context189.n=1;return this.rpcClient.readContract({abi:spgnftImplAbi,address:this.address,functionName:\"mintFeeToken\"});case 1:return _context189.a(2,_context189.v);}},_callee189,this);}));function mintFeeToken(){return _mintFeeToken.apply(this,arguments);}return mintFeeToken;}()/**\n   * method publicMinting for contract SPGNFTImpl\n   *\n   * @param request SpgnftImplPublicMintingRequest\n   * @return Promise<SpgnftImplPublicMintingResponse>\n   */)},{key:\"publicMinting\",value:(function(){var _publicMinting=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee190(){return _regenerator().w(function(_context190){while(1)switch(_context190.n){case 0:_context190.n=1;return this.rpcClient.readContract({abi:spgnftImplAbi,address:this.address,functionName:\"publicMinting\"});case 1:return _context190.a(2,_context190.v);}},_callee190,this);}));function publicMinting(){return _publicMinting.apply(this,arguments);}return publicMinting;}()/**\n   * method tokenURI for contract SPGNFTImpl\n   *\n   * @param request SpgnftImplTokenUriRequest\n   * @return Promise<SpgnftImplTokenUriResponse>\n   */)},{key:\"tokenUri\",value:(function(){var _tokenUri=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee191(request){return _regenerator().w(function(_context191){while(1)switch(_context191.n){case 0:_context191.n=1;return this.rpcClient.readContract({abi:spgnftImplAbi,address:this.address,functionName:\"tokenURI\",args:[request.tokenId]});case 1:return _context191.a(2,_context191.v);}},_callee191,this);}));function tokenUri(_x134){return _tokenUri.apply(this,arguments);}return tokenUri;}())}]);}(SpgnftImplEventClient);/**\n * contract SPGNFTImpl write method\n */var SpgnftImplClient=/*#__PURE__*/function(_SpgnftImplReadOnlyCl){function SpgnftImplClient(rpcClient,wallet,address){var _this14;_classCallCheck(this,SpgnftImplClient);_this14=_callSuper(this,SpgnftImplClient,[rpcClient,address]);_this14.wallet=wallet;return _this14;}/**\n   * method setTokenURI for contract SPGNFTImpl\n   *\n   * @param request SpgnftImplSetTokenUriRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(SpgnftImplClient,_SpgnftImplReadOnlyCl);return _createClass(SpgnftImplClient,[{key:\"setTokenUri\",value:(function(){var _setTokenUri=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee192(request){var _yield$this$rpcClient92,call;return _regenerator().w(function(_context192){while(1)switch(_context192.n){case 0:_context192.n=1;return this.rpcClient.simulateContract({abi:spgnftImplAbi,address:this.address,functionName:\"setTokenURI\",account:this.wallet.account,args:[request.tokenId,request.tokenUri]});case 1:_yield$this$rpcClient92=_context192.v;call=_yield$this$rpcClient92.request;_context192.n=2;return this.wallet.writeContract(call);case 2:return _context192.a(2,_context192.v);}},_callee192,this);}));function setTokenUri(_x135){return _setTokenUri.apply(this,arguments);}return setTokenUri;}()/**\n   * method setTokenURI for contract SPGNFTImpl with only encode\n   *\n   * @param request SpgnftImplSetTokenUriRequest\n   * @return EncodedTxData\n   */)},{key:\"setTokenUriEncode\",value:function setTokenUriEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:spgnftImplAbi,functionName:\"setTokenURI\",args:[request.tokenId,request.tokenUri]})};}}]);}(SpgnftImplReadOnlyClient);// Contract TotalLicenseTokenLimitHook =============================================================\n/**\n * TotalLicenseTokenLimitHookSetTotalLicenseTokenLimitRequest\n *\n * @param licensorIpId address\n * @param licenseTemplate address\n * @param licenseTermsId uint256\n * @param limit uint256\n *//**\n * contract TotalLicenseTokenLimitHook write method\n */var TotalLicenseTokenLimitHookClient=/*#__PURE__*/function(){function TotalLicenseTokenLimitHookClient(rpcClient,wallet,address){var _rpcClient$chain25;_classCallCheck(this,TotalLicenseTokenLimitHookClient);this.address=address||getAddress(totalLicenseTokenLimitHookAddress,(_rpcClient$chain25=rpcClient.chain)===null||_rpcClient$chain25===void 0?void 0:_rpcClient$chain25.id);this.rpcClient=rpcClient;this.wallet=wallet;}/**\n   * method setTotalLicenseTokenLimit for contract TotalLicenseTokenLimitHook\n   *\n   * @param request TotalLicenseTokenLimitHookSetTotalLicenseTokenLimitRequest\n   * @return Promise<WriteContractReturnType>\n   */return _createClass(TotalLicenseTokenLimitHookClient,[{key:\"setTotalLicenseTokenLimit\",value:(function(){var _setTotalLicenseTokenLimit=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee193(request){var _yield$this$rpcClient93,call;return _regenerator().w(function(_context193){while(1)switch(_context193.n){case 0:_context193.n=1;return this.rpcClient.simulateContract({abi:totalLicenseTokenLimitHookAbi,address:this.address,functionName:\"setTotalLicenseTokenLimit\",account:this.wallet.account,args:[request.licensorIpId,request.licenseTemplate,request.licenseTermsId,request.limit]});case 1:_yield$this$rpcClient93=_context193.v;call=_yield$this$rpcClient93.request;_context193.n=2;return this.wallet.writeContract(call);case 2:return _context193.a(2,_context193.v);}},_callee193,this);}));function setTotalLicenseTokenLimit(_x136){return _setTotalLicenseTokenLimit.apply(this,arguments);}return setTotalLicenseTokenLimit;}()/**\n   * method setTotalLicenseTokenLimit for contract TotalLicenseTokenLimitHook with only encode\n   *\n   * @param request TotalLicenseTokenLimitHookSetTotalLicenseTokenLimitRequest\n   * @return EncodedTxData\n   */)},{key:\"setTotalLicenseTokenLimitEncode\",value:function setTotalLicenseTokenLimitEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:totalLicenseTokenLimitHookAbi,functionName:\"setTotalLicenseTokenLimit\",args:[request.licensorIpId,request.licenseTemplate,request.licenseTermsId,request.limit]})};}}]);}();// Contract WrappedIP =============================================================\n/**\n * WrappedIpAllowanceRequest\n *\n * @param owner address\n * @param spender address\n *//**\n * WrappedIpAllowanceResponse\n *\n * @param result uint256\n *//**\n * WrappedIpBalanceOfRequest\n *\n * @param owner address\n *//**\n * WrappedIpBalanceOfResponse\n *\n * @param result uint256\n *//**\n * WrappedIpApproveRequest\n *\n * @param spender address\n * @param amount uint256\n *//**\n * WrappedIpTransferRequest\n *\n * @param to address\n * @param amount uint256\n *//**\n * WrappedIpTransferFromRequest\n *\n * @param from address\n * @param to address\n * @param amount uint256\n *//**\n * WrappedIpWithdrawRequest\n *\n * @param value uint256\n *//**\n * contract WrappedIP readonly method\n */var WrappedIpReadOnlyClient=/*#__PURE__*/function(){function WrappedIpReadOnlyClient(rpcClient,address){var _rpcClient$chain26;_classCallCheck(this,WrappedIpReadOnlyClient);this.address=address||getAddress(wrappedIpAddress,(_rpcClient$chain26=rpcClient.chain)===null||_rpcClient$chain26===void 0?void 0:_rpcClient$chain26.id);this.rpcClient=rpcClient;}/**\n   * method allowance for contract WrappedIP\n   *\n   * @param request WrappedIpAllowanceRequest\n   * @return Promise<WrappedIpAllowanceResponse>\n   */return _createClass(WrappedIpReadOnlyClient,[{key:\"allowance\",value:(function(){var _allowance2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee194(request){var result;return _regenerator().w(function(_context194){while(1)switch(_context194.n){case 0:_context194.n=1;return this.rpcClient.readContract({abi:wrappedIpAbi,address:this.address,functionName:\"allowance\",args:[request.owner,request.spender]});case 1:result=_context194.v;return _context194.a(2,{result:result});}},_callee194,this);}));function allowance(_x137){return _allowance2.apply(this,arguments);}return allowance;}()/**\n   * method balanceOf for contract WrappedIP\n   *\n   * @param request WrappedIpBalanceOfRequest\n   * @return Promise<WrappedIpBalanceOfResponse>\n   */)},{key:\"balanceOf\",value:(function(){var _balanceOf3=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee195(request){var result;return _regenerator().w(function(_context195){while(1)switch(_context195.n){case 0:_context195.n=1;return this.rpcClient.readContract({abi:wrappedIpAbi,address:this.address,functionName:\"balanceOf\",args:[request.owner]});case 1:result=_context195.v;return _context195.a(2,{result:result});}},_callee195,this);}));function balanceOf(_x138){return _balanceOf3.apply(this,arguments);}return balanceOf;}())}]);}();/**\n * contract WrappedIP write method\n */var WrappedIpClient=/*#__PURE__*/function(_WrappedIpReadOnlyCli){function WrappedIpClient(rpcClient,wallet,address){var _this15;_classCallCheck(this,WrappedIpClient);_this15=_callSuper(this,WrappedIpClient,[rpcClient,address]);_this15.wallet=wallet;return _this15;}/**\n   * method approve for contract WrappedIP\n   *\n   * @param request WrappedIpApproveRequest\n   * @return Promise<WriteContractReturnType>\n   */_inherits(WrappedIpClient,_WrappedIpReadOnlyCli);return _createClass(WrappedIpClient,[{key:\"approve\",value:(function(){var _approve2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee196(request){var _yield$this$rpcClient94,call;return _regenerator().w(function(_context196){while(1)switch(_context196.n){case 0:_context196.n=1;return this.rpcClient.simulateContract({abi:wrappedIpAbi,address:this.address,functionName:\"approve\",account:this.wallet.account,args:[request.spender,request.amount]});case 1:_yield$this$rpcClient94=_context196.v;call=_yield$this$rpcClient94.request;_context196.n=2;return this.wallet.writeContract(call);case 2:return _context196.a(2,_context196.v);}},_callee196,this);}));function approve(_x139){return _approve2.apply(this,arguments);}return approve;}()/**\n   * method approve for contract WrappedIP with only encode\n   *\n   * @param request WrappedIpApproveRequest\n   * @return EncodedTxData\n   */)},{key:\"approveEncode\",value:function approveEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:wrappedIpAbi,functionName:\"approve\",args:[request.spender,request.amount]})};}/**\n   * method deposit for contract WrappedIP\n   *\n   * @param request WrappedIpDepositRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"deposit\",value:(function(){var _deposit=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee197(){var _yield$this$rpcClient95,call;return _regenerator().w(function(_context197){while(1)switch(_context197.n){case 0:_context197.n=1;return this.rpcClient.simulateContract({abi:wrappedIpAbi,address:this.address,functionName:\"deposit\",account:this.wallet.account});case 1:_yield$this$rpcClient95=_context197.v;call=_yield$this$rpcClient95.request;_context197.n=2;return this.wallet.writeContract(call);case 2:return _context197.a(2,_context197.v);}},_callee197,this);}));function deposit(){return _deposit.apply(this,arguments);}return deposit;}()/**\n   * method deposit for contract WrappedIP with only encode\n   *\n   * @param request WrappedIpDepositRequest\n   * @return EncodedTxData\n   */)},{key:\"depositEncode\",value:function depositEncode(){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:wrappedIpAbi,functionName:\"deposit\"})};}/**\n   * method transfer for contract WrappedIP\n   *\n   * @param request WrappedIpTransferRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"transfer\",value:(function(){var _transfer2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee198(request){var _yield$this$rpcClient96,call;return _regenerator().w(function(_context198){while(1)switch(_context198.n){case 0:_context198.n=1;return this.rpcClient.simulateContract({abi:wrappedIpAbi,address:this.address,functionName:\"transfer\",account:this.wallet.account,args:[request.to,request.amount]});case 1:_yield$this$rpcClient96=_context198.v;call=_yield$this$rpcClient96.request;_context198.n=2;return this.wallet.writeContract(call);case 2:return _context198.a(2,_context198.v);}},_callee198,this);}));function transfer(_x140){return _transfer2.apply(this,arguments);}return transfer;}()/**\n   * method transfer for contract WrappedIP with only encode\n   *\n   * @param request WrappedIpTransferRequest\n   * @return EncodedTxData\n   */)},{key:\"transferEncode\",value:function transferEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:wrappedIpAbi,functionName:\"transfer\",args:[request.to,request.amount]})};}/**\n   * method transferFrom for contract WrappedIP\n   *\n   * @param request WrappedIpTransferFromRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"transferFrom\",value:(function(){var _transferFrom2=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee199(request){var _yield$this$rpcClient97,call;return _regenerator().w(function(_context199){while(1)switch(_context199.n){case 0:_context199.n=1;return this.rpcClient.simulateContract({abi:wrappedIpAbi,address:this.address,functionName:\"transferFrom\",account:this.wallet.account,args:[request.from,request.to,request.amount]});case 1:_yield$this$rpcClient97=_context199.v;call=_yield$this$rpcClient97.request;_context199.n=2;return this.wallet.writeContract(call);case 2:return _context199.a(2,_context199.v);}},_callee199,this);}));function transferFrom(_x141){return _transferFrom2.apply(this,arguments);}return transferFrom;}()/**\n   * method transferFrom for contract WrappedIP with only encode\n   *\n   * @param request WrappedIpTransferFromRequest\n   * @return EncodedTxData\n   */)},{key:\"transferFromEncode\",value:function transferFromEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:wrappedIpAbi,functionName:\"transferFrom\",args:[request.from,request.to,request.amount]})};}/**\n   * method withdraw for contract WrappedIP\n   *\n   * @param request WrappedIpWithdrawRequest\n   * @return Promise<WriteContractReturnType>\n   */},{key:\"withdraw\",value:(function(){var _withdraw=_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee200(request){var _yield$this$rpcClient98,call;return _regenerator().w(function(_context200){while(1)switch(_context200.n){case 0:_context200.n=1;return this.rpcClient.simulateContract({abi:wrappedIpAbi,address:this.address,functionName:\"withdraw\",account:this.wallet.account,args:[request.value]});case 1:_yield$this$rpcClient98=_context200.v;call=_yield$this$rpcClient98.request;_context200.n=2;return this.wallet.writeContract(call);case 2:return _context200.a(2,_context200.v);}},_callee200,this);}));function withdraw(_x142){return _withdraw.apply(this,arguments);}return withdraw;}()/**\n   * method withdraw for contract WrappedIP with only encode\n   *\n   * @param request WrappedIpWithdrawRequest\n   * @return EncodedTxData\n   */)},{key:\"withdrawEncode\",value:function withdrawEncode(request){return {to:this.address,data:(0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({abi:wrappedIpAbi,functionName:\"withdraw\",args:[request.value]})};}}]);}(WrappedIpReadOnlyClient);\n\nvar aeneid = (0,viem_utils__WEBPACK_IMPORTED_MODULE_6__.defineChain)({\n  id: 1315,\n  name: \"aeneid\",\n  nativeCurrency: {\n    name: \"IP\",\n    symbol: \"IP\",\n    decimals: 18\n  },\n  rpcUrls: {\n    \"default\": {\n      http: [\"https://aeneid.storyrpc.io/\"]\n    }\n  },\n  blockExplorers: {\n    \"default\": {\n      name: \"Explorer\",\n      url: \"https://aeneid.storyscan.xyz/\"\n    }\n  },\n  contracts: {\n    multicall3: {\n      address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n      blockCreated: 1792\n    }\n  },\n  testnet: true\n});\nvar mainnet = (0,viem_utils__WEBPACK_IMPORTED_MODULE_6__.defineChain)({\n  id: 1514,\n  name: \"mainnet\",\n  nativeCurrency: {\n    name: \"IP\",\n    symbol: \"IP\",\n    decimals: 18\n  },\n  rpcUrls: {\n    \"default\": {\n      http: [\"https://mainnet.storyrpc.io/\"]\n    }\n  },\n  blockExplorers: {\n    \"default\": {\n      name: \"Explorer\",\n      url: \"https://dev-mainnet.storyscan.xyz/\"\n    }\n  },\n  contracts: {\n    multicall3: {\n      address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n      blockCreated: 340998\n    }\n  },\n  testnet: false\n});\n\nvar defaultFunctionSelector = \"0x00000000\";\nvar royaltySharesTotalSupply = 100000000;\nvar MAX_ROYALTY_TOKEN = 100000000;\nvar WIP_TOKEN_ADDRESS = wrappedIpAddress[mainnet.id];\n\nfunction _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\n\nfunction _construct(t, e, r) {\n  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && _setPrototypeOf(p, r.prototype), p;\n}\n\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return _wrapNativeSuper = function (t) {\n    if (null === t || !_isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(t, arguments, _getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    }), _setPrototypeOf(Wrapper, t);\n  }, _wrapNativeSuper(t);\n}\n\nvar handleError = function handleError(error, msg) {\n  if (error instanceof Error) {\n    var newError = new Error(\"\".concat(msg, \": \").concat(error.message));\n    newError.stack = error.stack;\n    throw newError;\n  }\n  throw new Error(\"\".concat(msg, \": Unknown error type\"));\n};\nvar PILFlavorError = /*#__PURE__*/function (_Error) {\n  function PILFlavorError(message) {\n    var _this;\n    _classCallCheck(this, PILFlavorError);\n    _this = _callSuper(this, PILFlavorError, [message]);\n    _this.name = \"PILFlavorError\";\n    return _this;\n  }\n  _inherits(PILFlavorError, _Error);\n  return _createClass(PILFlavorError);\n}(/*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\n\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\n\nvar simulateAndWriteContract = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(_ref) {\n    var rpcClient, wallet, data, _yield$rpcClient$simu, request, txHash, receipt;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          rpcClient = _ref.rpcClient, wallet = _ref.wallet, data = _ref.data;\n          _context.n = 1;\n          return rpcClient.simulateContract(_objectSpread2(_objectSpread2({}, data), {}, {\n            account: wallet.account\n          }));\n        case 1:\n          _yield$rpcClient$simu = _context.v;\n          request = _yield$rpcClient$simu.request;\n          _context.n = 2;\n          return wallet.writeContract(request);\n        case 2:\n          txHash = _context.v;\n          _context.n = 3;\n          return rpcClient.waitForTransactionReceipt({\n            hash: txHash\n          });\n        case 3:\n          receipt = _context.v;\n          return _context.a(2, {\n            txHash: txHash,\n            receipt: receipt\n          });\n      }\n    }, _callee);\n  }));\n  return function simulateAndWriteContract(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar ERC20Client = /*#__PURE__*/function () {\n  function ERC20Client(rpcClient, wallet, address) {\n    _classCallCheck(this, ERC20Client);\n    this.ercClient = new Erc20Client(rpcClient, wallet, address);\n  }\n  return _createClass(ERC20Client, [{\n    key: \"balanceOf\",\n    value: function () {\n      var _balanceOf = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(account) {\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              _context.n = 1;\n              return this.ercClient.balanceOf({\n                account: account\n              });\n            case 1:\n              return _context.a(2, _context.v);\n          }\n        }, _callee, this);\n      }));\n      function balanceOf(_x) {\n        return _balanceOf.apply(this, arguments);\n      }\n      return balanceOf;\n    }()\n  }, {\n    key: \"allowance\",\n    value: function () {\n      var _allowance = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(owner, spender) {\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _context2.n = 1;\n              return this.ercClient.allowance({\n                owner: owner,\n                spender: spender\n              });\n            case 1:\n              return _context2.a(2, _context2.v);\n          }\n        }, _callee2, this);\n      }));\n      function allowance(_x2, _x3) {\n        return _allowance.apply(this, arguments);\n      }\n      return allowance;\n    }()\n  }, {\n    key: \"approve\",\n    value: function () {\n      var _approve = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(spender, value) {\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              _context3.n = 1;\n              return this.ercClient.approve({\n                spender: spender,\n                value: value\n              });\n            case 1:\n              return _context3.a(2, _context3.v);\n          }\n        }, _callee3, this);\n      }));\n      function approve(_x4, _x5) {\n        return _approve.apply(this, arguments);\n      }\n      return approve;\n    }()\n  }, {\n    key: \"approveEncode\",\n    value: function approveEncode(spender, value) {\n      return this.ercClient.approveEncode({\n        spender: spender,\n        value: value\n      });\n    }\n\n    // The method only will work in test environment\n  }, {\n    key: \"mint\",\n    value: function () {\n      var _mint = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(to, amount) {\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              _context4.n = 1;\n              return this.ercClient.mint({\n                to: to,\n                amount: amount\n              });\n            case 1:\n              return _context4.a(2, _context4.v);\n          }\n        }, _callee4, this);\n      }));\n      function mint(_x6, _x7) {\n        return _mint.apply(this, arguments);\n      }\n      return mint;\n    }()\n  }]);\n}();\nvar WipTokenClient = /*#__PURE__*/function () {\n  function WipTokenClient(rpcClient, wallet) {\n    _classCallCheck(this, WipTokenClient);\n    this.wipClient = new WrappedIpClient(rpcClient, wallet);\n  }\n  return _createClass(WipTokenClient, [{\n    key: \"balanceOf\",\n    value: function () {\n      var _balanceOf2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(account) {\n        var _yield$this$wipClient, balance;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              _context5.n = 1;\n              return this.wipClient.balanceOf({\n                owner: account\n              });\n            case 1:\n              _yield$this$wipClient = _context5.v;\n              balance = _yield$this$wipClient.result;\n              return _context5.a(2, balance);\n          }\n        }, _callee5, this);\n      }));\n      function balanceOf(_x8) {\n        return _balanceOf2.apply(this, arguments);\n      }\n      return balanceOf;\n    }()\n  }, {\n    key: \"allowance\",\n    value: function () {\n      var _allowance2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(owner, spender) {\n        var _yield$this$wipClient2, allowance;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              _context6.n = 1;\n              return this.wipClient.allowance({\n                owner: owner,\n                spender: spender\n              });\n            case 1:\n              _yield$this$wipClient2 = _context6.v;\n              allowance = _yield$this$wipClient2.result;\n              return _context6.a(2, allowance);\n          }\n        }, _callee6, this);\n      }));\n      function allowance(_x9, _x0) {\n        return _allowance2.apply(this, arguments);\n      }\n      return allowance;\n    }()\n  }, {\n    key: \"approve\",\n    value: function () {\n      var _approve2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(spender, value) {\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              _context7.n = 1;\n              return this.wipClient.approve({\n                spender: spender,\n                amount: value\n              });\n            case 1:\n              return _context7.a(2, _context7.v);\n          }\n        }, _callee7, this);\n      }));\n      function approve(_x1, _x10) {\n        return _approve2.apply(this, arguments);\n      }\n      return approve;\n    }()\n  }, {\n    key: \"approveEncode\",\n    value: function approveEncode(spender, value) {\n      return this.wipClient.approveEncode({\n        spender: spender,\n        amount: value\n      });\n    }\n  }, {\n    key: \"depositEncode\",\n    value: function depositEncode() {\n      return this.wipClient.depositEncode();\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.wipClient.address;\n    }\n  }]);\n}();\n\nvar waitForTxReceipt = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(_ref) {\n    var txOptions, rpcClient, txHash, receipt;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          txOptions = _ref.txOptions, rpcClient = _ref.rpcClient, txHash = _ref.txHash;\n          _context.n = 1;\n          return rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {\n            hash: txHash\n          }));\n        case 1:\n          receipt = _context.v;\n          return _context.a(2, {\n            txHash: txHash,\n            receipt: receipt\n          });\n      }\n    }, _callee);\n  }));\n  return function waitForTxReceipt(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar waitForTxReceipts = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(_ref3) {\n    var txOptions, rpcClient, txHashes, receipts;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          txOptions = _ref3.txOptions, rpcClient = _ref3.rpcClient, txHashes = _ref3.txHashes;\n          _context2.n = 1;\n          return Promise.all(txHashes.map(function (hash) {\n            return rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {\n              hash: hash\n            }));\n          }));\n        case 1:\n          receipts = _context2.v;\n          return _context2.a(2, receipts.map(function (receipt) {\n            return {\n              txHash: receipt.transactionHash,\n              receipt: receipt\n            };\n          }));\n      }\n    }, _callee2);\n  }));\n  return function waitForTxReceipts(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar chainStringToViemChain = function chainStringToViemChain(chainId) {\n  switch (chainId) {\n    case 1315:\n    case \"aeneid\":\n      return aeneid;\n    case 1514:\n    case \"mainnet\":\n      return mainnet;\n    default:\n      throw new Error(\"ChainId \".concat(String(chainId), \" not supported\"));\n  }\n};\nvar chain = {\n  aeneid: 1315,\n  1315: 1315,\n  mainnet: 1514,\n  1514: 1514\n};\nvar validateAddress = function validateAddress(address) {\n  if (!(0,viem__WEBPACK_IMPORTED_MODULE_7__.isAddress)(address, {\n    strict: false\n  })) {\n    throw Error(\"Invalid address: \".concat(address, \".\"));\n  }\n  return address;\n};\nvar validateAddresses = function validateAddresses(addresses) {\n  return addresses.map(function (address) {\n    return validateAddress(address);\n  });\n};\nvar getTokenAmountDisplay = function getTokenAmountDisplay(amount) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"IP\";\n  return \"\".concat((0,viem__WEBPACK_IMPORTED_MODULE_8__.formatEther)(amount)).concat(unit);\n};\n\n/**\n * check the allowance of all spenders and call approval if any spender\n * allowance is lower than the amount they are expected to spend.\n * Supports using multicall to return all approve calls in a multicall array.\n */\nvar approvalAllSpenders = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(_ref) {\n    var spenders, client, owner, useMultiCall, rpcClient, multicallAddress, approvals, allCalls, _iterator, _step, approval, hash, _t;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.p = _context2.n) {\n        case 0:\n          spenders = _ref.spenders, client = _ref.client, owner = _ref.owner, useMultiCall = _ref.useMultiCall, rpcClient = _ref.rpcClient, multicallAddress = _ref.multicallAddress;\n          _context2.n = 1;\n          return Promise.all(spenders.map(/*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(spender) {\n              var spenderAmount, allowance;\n              return _regenerator().w(function (_context) {\n                while (1) switch (_context.n) {\n                  case 0:\n                    if (!(spender.address === multicallAddress)) {\n                      _context.n = 1;\n                      break;\n                    }\n                    return _context.a(2);\n                  case 1:\n                    spenderAmount = spender.amount || viem__WEBPACK_IMPORTED_MODULE_9__.maxUint256;\n                    _context.n = 2;\n                    return client.allowance(owner, spender.address);\n                  case 2:\n                    allowance = _context.v;\n                    if (!(allowance < spenderAmount)) {\n                      _context.n = 3;\n                      break;\n                    }\n                    return _context.a(2, {\n                      spender: spender.address,\n                      value: viem__WEBPACK_IMPORTED_MODULE_9__.maxUint256 // approve max amount to avoid approvals in the future\n                    });\n                  case 3:\n                    return _context.a(2);\n                }\n              }, _callee);\n            }));\n            return function (_x2) {\n              return _ref3.apply(this, arguments);\n            };\n          }()));\n        case 1:\n          approvals = _context2.v;\n          if (!useMultiCall) {\n            _context2.n = 2;\n            break;\n          }\n          allCalls = [];\n          approvals.forEach(function (approval) {\n            if (!approval) {\n              return;\n            }\n            var encodedData = client.approveEncode(approval.spender, approval.value);\n            allCalls.push({\n              target: encodedData.to,\n              allowFailure: false,\n              value: 0n,\n              callData: encodedData.data\n            });\n          });\n          return _context2.a(2, allCalls);\n        case 2:\n          // make approval calls sequentially\n          _iterator = _createForOfIteratorHelper(approvals);\n          _context2.p = 3;\n          _iterator.s();\n        case 4:\n          if ((_step = _iterator.n()).done) {\n            _context2.n = 8;\n            break;\n          }\n          approval = _step.value;\n          if (approval) {\n            _context2.n = 5;\n            break;\n          }\n          return _context2.a(3, 7);\n        case 5:\n          _context2.n = 6;\n          return client.approve(approval.spender, approval.value);\n        case 6:\n          hash = _context2.v;\n          _context2.n = 7;\n          return rpcClient.waitForTransactionReceipt({\n            hash: hash\n          });\n        case 7:\n          _context2.n = 4;\n          break;\n        case 8:\n          _context2.n = 10;\n          break;\n        case 9:\n          _context2.p = 9;\n          _t = _context2.v;\n          _iterator.e(_t);\n        case 10:\n          _context2.p = 10;\n          _iterator.f();\n          return _context2.f(10);\n        case 11:\n          return _context2.a(2, []);\n      }\n    }, _callee2, null, [[3, 9, 10, 11]]);\n  }));\n  return function approvalAllSpenders(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar multiCallWrapIp = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(_ref4) {\n    var ipAmountToWrap, wipClient, multicall3Address, wipSpenders, calls, rpcClient, wallet, contractCall, wipOptions, multiCalls, useMultiCall, deposit, autoApprove, approvalCalls, txHash;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.n) {\n        case 0:\n          ipAmountToWrap = _ref4.ipAmountToWrap, wipClient = _ref4.wipClient, multicall3Address = _ref4.multicall3Address, wipSpenders = _ref4.wipSpenders, calls = _ref4.calls, rpcClient = _ref4.rpcClient, wallet = _ref4.wallet, contractCall = _ref4.contractCall, wipOptions = _ref4.wipOptions;\n          if (!(ipAmountToWrap === 0n)) {\n            _context3.n = 1;\n            break;\n          }\n          throw new Error(\"ipAmountToWrap should be greater than 0\");\n        case 1:\n          multiCalls = [];\n          useMultiCall = (wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.useMulticallWhenPossible) !== false;\n          if (!useMultiCall) {\n            _context3.n = 2;\n            break;\n          }\n          deposit = wipClient.depositEncode();\n          multiCalls.push({\n            target: deposit.to,\n            allowFailure: false,\n            value: ipAmountToWrap,\n            callData: deposit.data\n          });\n          _context3.n = 3;\n          break;\n        case 2:\n          _context3.n = 3;\n          return simulateAndWriteContract({\n            rpcClient: rpcClient,\n            wallet: wallet,\n            data: {\n              abi: wrappedIpAbi,\n              address: wipClient.address,\n              functionName: \"deposit\",\n              value: ipAmountToWrap\n            }\n          });\n        case 3:\n          autoApprove = (wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.enableAutoApprove) !== false;\n          if (!autoApprove) {\n            _context3.n = 5;\n            break;\n          }\n          _context3.n = 4;\n          return approvalAllSpenders({\n            spenders: wipSpenders,\n            client: wipClient,\n            multicallAddress: multicall3Address,\n            owner: useMultiCall ? multicall3Address : wallet.account.address,\n            rpcClient: rpcClient,\n            useMultiCall: useMultiCall\n          });\n        case 4:\n          approvalCalls = _context3.v;\n          if (approvalCalls.length > 0 && useMultiCall) {\n            multiCalls.push.apply(multiCalls, _toConsumableArray(approvalCalls));\n          }\n        case 5:\n          multiCalls.push.apply(multiCalls, _toConsumableArray(calls));\n          if (useMultiCall) {\n            _context3.n = 7;\n            break;\n          }\n          _context3.n = 6;\n          return contractCall();\n        case 6:\n          txHash = _context3.v;\n          return _context3.a(2, {\n            txHash: txHash\n          });\n        case 7:\n          return _context3.a(2, simulateAndWriteContract({\n            rpcClient: rpcClient,\n            wallet: wallet,\n            data: {\n              abi: multicall3Abi,\n              address: multicall3Address,\n              functionName: \"aggregate3Value\",\n              args: [multiCalls],\n              value: ipAmountToWrap\n            }\n          }));\n      }\n    }, _callee3);\n  }));\n  return function multiCallWrapIp(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n/**\n * Handle contract calls that require token fees. For fees in WIP, it automatically wraps IP to WIP when insufficient WIP balance.\n * For all other ERC20 tokens, it handles approvals if insufficient allowance.\n *\n * @remarks\n * This function will automatically handle the following:\n *\n * If token is wip and the user does not have enough WIP, it will wrap IP to WIP, unless\n * disabled via `disableAutoWrappingIp`.\n *\n * If the user have enough token, it will check for if approvals are needed\n * for each spender address and approve it, unless disabled via `disableAutoApprove`.\n */\nvar contractCallWithFees = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(_ref6) {\n    var _options$wipOptions;\n    var totalFees, options, multicall3Address, wallet, tokenSpenders, contractCall, sender, txOptions, encodedTxs, rpcClient, token, wipTokenClient, isWip, selectedOptions, tokenClient, _txHash, balance, autoApprove, _txHash2, autoWrapIp, startingBalance, calls, _yield$multiCallWrapI, txHash;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          totalFees = _ref6.totalFees, options = _ref6.options, multicall3Address = _ref6.multicall3Address, wallet = _ref6.wallet, tokenSpenders = _ref6.tokenSpenders, contractCall = _ref6.contractCall, sender = _ref6.sender, txOptions = _ref6.txOptions, encodedTxs = _ref6.encodedTxs, rpcClient = _ref6.rpcClient, token = _ref6.token;\n          wipTokenClient = new WipTokenClient(rpcClient, wallet);\n          isWip = token === wipTokenClient.address || token === undefined;\n          selectedOptions = isWip ? options === null || options === void 0 ? void 0 : options.wipOptions : options.erc20Options;\n          tokenClient = isWip ? wipTokenClient : new ERC20Client(rpcClient, wallet, token); // if no fees, skip all logic\n          if (!(totalFees === 0n)) {\n            _context4.n = 2;\n            break;\n          }\n          _context4.n = 1;\n          return contractCall();\n        case 1:\n          _txHash = _context4.v;\n          return _context4.a(2, handleTransactionResponse(_txHash, rpcClient, txOptions));\n        case 2:\n          _context4.n = 3;\n          return tokenClient.balanceOf(sender);\n        case 3:\n          balance = _context4.v;\n          autoApprove = (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.enableAutoApprove) !== false; // handle when there's enough token to cover all fees\n          if (!(balance >= totalFees)) {\n            _context4.n = 6;\n            break;\n          }\n          if (!autoApprove) {\n            _context4.n = 4;\n            break;\n          }\n          _context4.n = 4;\n          return approvalAllSpenders({\n            spenders: tokenSpenders,\n            client: tokenClient,\n            owner: sender,\n            // sender owns the wip\n            multicallAddress: multicall3Address,\n            rpcClient: rpcClient,\n            // since sender has all token, if using multicall, we cannot approve transfer token into multicall by multicall.\n            //  So in this case, we don't use multicall here and instead just wait for each approval to be finished.\n            useMultiCall: false\n          });\n        case 4:\n          _context4.n = 5;\n          return contractCall();\n        case 5:\n          _txHash2 = _context4.v;\n          return _context4.a(2, handleTransactionResponse(_txHash2, rpcClient, txOptions));\n        case 6:\n          if (isWip) {\n            _context4.n = 7;\n            break;\n          }\n          throw new Error(\"Wallet does not have enough erc20 token to pay for fees. Total fees:  \".concat(getTokenAmountDisplay(totalFees), \", balance: \").concat(getTokenAmountDisplay(balance), \".\"));\n        case 7:\n          autoWrapIp = (options === null || options === void 0 || (_options$wipOptions = options.wipOptions) === null || _options$wipOptions === void 0 ? void 0 : _options$wipOptions.enableAutoWrapIp) !== false;\n          _context4.n = 8;\n          return rpcClient.getBalance({\n            address: sender\n          });\n        case 8:\n          startingBalance = _context4.v;\n          if (!(startingBalance < totalFees)) {\n            _context4.n = 9;\n            break;\n          }\n          throw new Error(\"Wallet does not have enough IP to wrap to WIP and pay for fees. Total fees: \".concat(getTokenAmountDisplay(totalFees), \", balance: \").concat(getTokenAmountDisplay(startingBalance), \".\"));\n        case 9:\n          if (autoWrapIp) {\n            _context4.n = 10;\n            break;\n          }\n          throw new Error(\"Wallet does not have enough WIP to pay for fees. Total fees: \".concat(getTokenAmountDisplay(totalFees), \", balance: \").concat(getTokenAmountDisplay(balance, \"WIP\"), \".\"));\n        case 10:\n          calls = encodedTxs === null || encodedTxs === void 0 ? void 0 : encodedTxs.map(function (data) {\n            return {\n              target: data.to,\n              allowFailure: false,\n              value: 0n,\n              callData: data.data\n            };\n          });\n          _context4.n = 11;\n          return multiCallWrapIp({\n            ipAmountToWrap: totalFees,\n            multicall3Address: multicall3Address,\n            wipClient: wipTokenClient,\n            wipOptions: options === null || options === void 0 ? void 0 : options.wipOptions,\n            contractCall: contractCall,\n            wipSpenders: tokenSpenders,\n            rpcClient: rpcClient,\n            wallet: wallet,\n            calls: calls\n          });\n        case 11:\n          _yield$multiCallWrapI = _context4.v;\n          txHash = _yield$multiCallWrapI.txHash;\n          return _context4.a(2, handleTransactionResponse(txHash, rpcClient, txOptions));\n      }\n    }, _callee4);\n  }));\n  return function contractCallWithFees(_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar handleTransactionResponse = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(txHash, rpcClient, txOptions) {\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          if (!Array.isArray(txHash)) {\n            _context5.n = 1;\n            break;\n          }\n          return _context5.a(2, waitForTxReceipts({\n            rpcClient: rpcClient,\n            txOptions: txOptions,\n            txHashes: txHash\n          }));\n        case 1:\n          return _context5.a(2, waitForTxReceipt({\n            rpcClient: rpcClient,\n            txOptions: txOptions,\n            txHash: txHash\n          }));\n      }\n    }, _callee5);\n  }));\n  return function handleTransactionResponse(_x5, _x6, _x7) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar v0Prefix = \"1220\";\nvar convertCIDtoHashIPFS = function convertCIDtoHashIPFS(cid) {\n  var isV0 = cid.startsWith(\"Qm\");\n  var parsedCID = multiformats_cid__WEBPACK_IMPORTED_MODULE_3__.CID.parse(cid);\n  var base58CID = isV0 ? parsedCID.toString() : parsedCID.toV0().toString();\n  var bytes = bs58__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decode(base58CID);\n  var base16CID = Array.from(bytes).map(function (_byte) {\n    return _byte.toString(16).padStart(2, \"0\");\n  }).join(\"\");\n  return \"0x\" + base16CID.slice(v0Prefix.length);\n};\nvar convertHashIPFStoCID = function convertHashIPFStoCID(hash) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"v0\";\n  var base16CID = v0Prefix + hash.slice(2);\n  var bytes = new Uint8Array(base16CID.match(/.{1,2}/g).map(function (_byte2) {\n    return parseInt(_byte2, 16);\n  }));\n  var base58CID = bs58__WEBPACK_IMPORTED_MODULE_1__[\"default\"].encode(Buffer.from(bytes));\n  if (version === \"v0\") {\n    return base58CID;\n  } else {\n    return multiformats_cid__WEBPACK_IMPORTED_MODULE_3__.CID.parse(base58CID, multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_2__.base58btc).toV1().toString();\n  }\n};\n\n/**\n * The ABI for the OptimisticOracleV3 contract. Contract address may be changed.\n * @see https://aeneid.storyscan.io/address/0xABac6a158431edED06EE6cba37eDE8779F599eE4?tab=contract_abi\n */\nvar ASSERTION_ABI = [{\n  inputs: [{\n    internalType: \"bytes32\",\n    name: \"assertionId\",\n    type: \"bytes32\"\n  }],\n  name: \"getAssertion\",\n  outputs: [{\n    components: [{\n      components: [{\n        internalType: \"bool\",\n        name: \"arbitrateViaEscalationManager\",\n        type: \"bool\"\n      }, {\n        internalType: \"bool\",\n        name: \"discardOracle\",\n        type: \"bool\"\n      }, {\n        internalType: \"bool\",\n        name: \"validateDisputers\",\n        type: \"bool\"\n      }, {\n        internalType: \"address\",\n        name: \"assertingCaller\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"escalationManager\",\n        type: \"address\"\n      }],\n      internalType: \"struct OptimisticOracleV3Interface.EscalationManagerSettings\",\n      name: \"escalationManagerSettings\",\n      type: \"tuple\"\n    }, {\n      internalType: \"address\",\n      name: \"asserter\",\n      type: \"address\"\n    }, {\n      internalType: \"uint64\",\n      name: \"assertionTime\",\n      type: \"uint64\"\n    }, {\n      internalType: \"bool\",\n      name: \"settled\",\n      type: \"bool\"\n    }, {\n      internalType: \"contract IERC20\",\n      name: \"currency\",\n      type: \"address\"\n    }, {\n      internalType: \"uint64\",\n      name: \"expirationTime\",\n      type: \"uint64\"\n    }, {\n      internalType: \"bool\",\n      name: \"settlementResolution\",\n      type: \"bool\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"domainId\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"identifier\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"uint256\",\n      name: \"bond\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"callbackRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"disputer\",\n      type: \"address\"\n    }],\n    internalType: \"struct OptimisticOracleV3Interface.Assertion\",\n    name: \"\",\n    type: \"tuple\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes32\",\n    name: \"assertionId\",\n    type: \"bytes32\"\n  }],\n  name: \"settleAssertion\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"currency\",\n    type: \"address\"\n  }],\n  name: \"getMinimumBond\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nvar getOov3Contract = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(arbitrationPolicyUmaClient) {\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          _context.n = 1;\n          return arbitrationPolicyUmaClient.oov3();\n        case 1:\n          return _context.a(2, _context.v);\n      }\n    }, _callee);\n  }));\n  return function getOov3Contract(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getAssertionDetails = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(rpcClient, arbitrationPolicyUmaClient, assertionId) {\n    var oov3Contract, _yield$rpcClient$read, bond;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          _context2.n = 1;\n          return getOov3Contract(arbitrationPolicyUmaClient);\n        case 1:\n          oov3Contract = _context2.v;\n          _context2.n = 2;\n          return rpcClient.readContract({\n            address: oov3Contract,\n            abi: ASSERTION_ABI,\n            functionName: \"getAssertion\",\n            args: [assertionId]\n          });\n        case 2:\n          _yield$rpcClient$read = _context2.v;\n          bond = _yield$rpcClient$read.bond;\n          return _context2.a(2, bond);\n      }\n    }, _callee2);\n  }));\n  return function getAssertionDetails(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getMinimumBond = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(rpcClient, arbitrationPolicyUmaClient, currency) {\n    var oov3Contract;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.n) {\n        case 0:\n          _context3.n = 1;\n          return getOov3Contract(arbitrationPolicyUmaClient);\n        case 1:\n          oov3Contract = _context3.v;\n          _context3.n = 2;\n          return rpcClient.readContract({\n            address: oov3Contract,\n            abi: ASSERTION_ABI,\n            functionName: \"getMinimumBond\",\n            args: [currency]\n          });\n        case 2:\n          return _context3.a(2, _context3.v);\n      }\n    }, _callee3);\n  }));\n  return function getMinimumBond(_x5, _x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * Settles an assertion associated with a dispute in the UMA arbitration protocol.\n *\n * This function takes a dispute ID, resolves it to an assertion ID, and then calls\n * the `settleAssertion` function on the Optimistic Oracle V3 contract to finalize\n * the arbitration outcome.\n *\n * The function is specifically designed for testing on the `aeneid` testnet and will\n * not work on other chains. It handles the entire settlement process including:\n * - Creating the appropriate clients with the provided private key\n * - Retrieving the assertion ID from the dispute ID\n * - Executing the settlement transaction\n * - Waiting for transaction confirmation\n *\n * @see https://docs.story.foundation/docs/uma-arbitration-policy#/\n * @see https://docs.uma.xyz/developers/optimistic-oracle-v3\n *\n * @param privateKey - The private key of the wallet that will sign the settlement transaction.\n * @param disputeId - The ID of the dispute to be settled.\n * @param transport - Optional custom RPC URL; defaults to the aeneid testnet RPC URL.\n * @returns A promise that resolves to the transaction hash of the settlement transaction.\n */\nvar settleAssertion = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(privateKey, disputeId, transport) {\n    var baseConfig, rpcClient, walletClient, arbitrationPolicyUmaClient, oov3Contract, assertionId, txHash, _t;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.p = _context4.n) {\n        case 0:\n          _context4.p = 0;\n          baseConfig = {\n            chain: chainStringToViemChain(\"aeneid\"),\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_10__.http)(transport !== null && transport !== void 0 ? transport : aeneid.rpcUrls[\"default\"].http[0])\n          };\n          rpcClient = (0,viem__WEBPACK_IMPORTED_MODULE_11__.createPublicClient)(baseConfig);\n          walletClient = (0,viem__WEBPACK_IMPORTED_MODULE_12__.createWalletClient)(_objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            account: (0,viem_accounts__WEBPACK_IMPORTED_MODULE_13__.privateKeyToAccount)(privateKey)\n          }));\n          arbitrationPolicyUmaClient = new ArbitrationPolicyUmaClient(rpcClient, walletClient);\n          _context4.n = 1;\n          return getOov3Contract(arbitrationPolicyUmaClient);\n        case 1:\n          oov3Contract = _context4.v;\n          _context4.n = 2;\n          return arbitrationPolicyUmaClient.disputeIdToAssertionId({\n            disputeId: BigInt(disputeId)\n          });\n        case 2:\n          assertionId = _context4.v;\n          _context4.n = 3;\n          return walletClient.writeContract({\n            address: oov3Contract,\n            abi: ASSERTION_ABI,\n            functionName: \"settleAssertion\",\n            args: [assertionId]\n          });\n        case 3:\n          txHash = _context4.v;\n          _context4.n = 4;\n          return rpcClient.waitForTransactionReceipt({\n            hash: txHash\n          });\n        case 4:\n          return _context4.a(2, txHash);\n        case 5:\n          _context4.p = 5;\n          _t = _context4.v;\n          return _context4.a(2, handleError(_t, \"Failed to settle assertion\"));\n      }\n    }, _callee4, null, [[0, 5]]);\n  }));\n  return function settleAssertion(_x8, _x9, _x0) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar DisputeClient = /*#__PURE__*/function () {\n  function DisputeClient(rpcClient, wallet, chainId) {\n    _classCallCheck(this, DisputeClient);\n    this.rpcClient = rpcClient;\n    this.disputeModuleClient = new DisputeModuleClient(rpcClient, wallet);\n    this.arbitrationPolicyUmaClient = new ArbitrationPolicyUmaClient(rpcClient, wallet);\n    this.multicall3Client = new Multicall3Client(rpcClient, wallet);\n    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet);\n    this.chainId = chainId;\n    this.wallet = wallet;\n  }\n\n  /**\n   * Raises a dispute on a given ipId.\n   *\n   * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L64 | `DisputeRaised`} event.\n   */\n  return _createClass(DisputeClient, [{\n    key: \"raiseDispute\",\n    value: (function () {\n      var _raiseDispute = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request) {\n        var _this = this;\n        var _request$txOptions, liveness, _yield$Promise$all, _yield$Promise$all2, minLiveness, maxLiveness, _yield$Promise$all3, _yield$Promise$all4, minimumBond, maximumBond, bonds, tag, data, _yield$this$disputeMo, isWhiteList, req, encodedTxData, contractCall, _yield$contractCallWi, txHash, receipt, targetLogs, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              liveness = BigInt(request.liveness);\n              _context.n = 1;\n              return Promise.all([this.arbitrationPolicyUmaClient.minLiveness(), this.arbitrationPolicyUmaClient.maxLiveness()]);\n            case 1:\n              _yield$Promise$all = _context.v;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              minLiveness = _yield$Promise$all2[0];\n              maxLiveness = _yield$Promise$all2[1];\n              if (!(liveness < minLiveness || liveness > maxLiveness)) {\n                _context.n = 2;\n                break;\n              }\n              throw new Error(\"Liveness must be between \".concat(minLiveness, \" and \").concat(maxLiveness, \".\"));\n            case 2:\n              _context.n = 3;\n              return Promise.all([getMinimumBond(this.rpcClient, this.arbitrationPolicyUmaClient, WIP_TOKEN_ADDRESS), this.arbitrationPolicyUmaClient.maxBonds({\n                token: WIP_TOKEN_ADDRESS\n              })]);\n            case 3:\n              _yield$Promise$all3 = _context.v;\n              _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n              minimumBond = _yield$Promise$all4[0];\n              maximumBond = _yield$Promise$all4[1];\n              bonds = BigInt(request.bond === undefined ? minimumBond : request.bond);\n              if (!(bonds > maximumBond || bonds < minimumBond)) {\n                _context.n = 4;\n                break;\n              }\n              throw new Error(\"Bonds must be between \".concat(minimumBond, \" and \").concat(maximumBond, \".\"));\n            case 4:\n              tag = (0,viem__WEBPACK_IMPORTED_MODULE_14__.stringToHex)(request.targetTag, {\n                size: 32\n              });\n              data = (0,viem__WEBPACK_IMPORTED_MODULE_15__.encodeAbiParameters)([{\n                name: \"\",\n                type: \"uint64\"\n              }, {\n                name: \"\",\n                type: \"address\"\n              }, {\n                name: \"\",\n                type: \"uint256\"\n              }], [liveness, WIP_TOKEN_ADDRESS, bonds]);\n              _context.n = 5;\n              return this.disputeModuleClient.isWhitelistedDisputeTag({\n                tag: tag\n              });\n            case 5:\n              _yield$this$disputeMo = _context.v;\n              isWhiteList = _yield$this$disputeMo.allowed;\n              if (isWhiteList) {\n                _context.n = 6;\n                break;\n              }\n              throw new Error(\"The target tag \".concat(request.targetTag, \" is not whitelisted.\"));\n            case 6:\n              req = {\n                targetIpId: validateAddress(request.targetIpId),\n                targetTag: tag,\n                disputeEvidenceHash: convertCIDtoHashIPFS(request.cid),\n                data: data\n              };\n              encodedTxData = this.disputeModuleClient.raiseDisputeEncode(req);\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context.n = 7;\n                break;\n              }\n              return _context.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 7:\n              contractCall = function contractCall() {\n                return _this.disputeModuleClient.raiseDispute(req);\n              };\n              _context.n = 8;\n              return contractCallWithFees({\n                totalFees: bonds,\n                options: {\n                  wipOptions: _objectSpread2(_objectSpread2({}, request.wipOptions), {}, {\n                    // Disable multicall because multicall makes more complex due to disputeInitiator in this version.\n                    useMulticallWhenPossible: false\n                  })\n                },\n                multicall3Address: this.multicall3Client.address,\n                rpcClient: this.rpcClient,\n                tokenSpenders: [{\n                  address: this.arbitrationPolicyUmaClient.address,\n                  amount: bonds\n                }],\n                contractCall: contractCall,\n                encodedTxs: [encodedTxData],\n                wallet: this.wallet,\n                txOptions: request.txOptions,\n                sender: this.wallet.account.address\n              });\n            case 8:\n              _yield$contractCallWi = _context.v;\n              txHash = _yield$contractCallWi.txHash;\n              receipt = _yield$contractCallWi.receipt;\n              if (receipt) {\n                _context.n = 9;\n                break;\n              }\n              return _context.a(2, {\n                txHash: txHash\n              });\n            case 9:\n              targetLogs = this.disputeModuleClient.parseTxDisputeRaisedEvent(receipt);\n              return _context.a(2, {\n                txHash: txHash,\n                disputeId: targetLogs[0].disputeId\n              });\n            case 10:\n              _context.n = 12;\n              break;\n            case 11:\n              _context.p = 11;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to raise dispute\"));\n            case 12:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n      function raiseDispute(_x) {\n        return _raiseDispute.apply(this, arguments);\n      }\n      return raiseDispute;\n    }()\n    /**\n     * Cancels an ongoing dispute\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L84 | `DisputeCancelled`} event.\n     */\n    )\n  }, {\n    key: \"cancelDispute\",\n    value: (function () {\n      var _cancelDispute = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request) {\n        var _request$txOptions2, _req, txHash, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              _context2.p = 0;\n              _req = {\n                disputeId: BigInt(request.disputeId),\n                data: request.data ? request.data : \"0x\"\n              };\n              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {\n                _context2.n = 1;\n                break;\n              }\n              return _context2.a(2, {\n                encodedTxData: this.disputeModuleClient.cancelDisputeEncode(_req)\n              });\n            case 1:\n              _context2.n = 2;\n              return this.disputeModuleClient.cancelDispute(_req);\n            case 2:\n              txHash = _context2.v;\n              _context2.n = 3;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 3:\n              return _context2.a(2, {\n                txHash: txHash\n              });\n            case 4:\n              _context2.n = 6;\n              break;\n            case 5:\n              _context2.p = 5;\n              _t2 = _context2.v;\n              return _context2.a(2, handleError(_t2, \"Failed to cancel dispute\"));\n            case 6:\n              return _context2.a(2);\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n      function cancelDispute(_x2) {\n        return _cancelDispute.apply(this, arguments);\n      }\n      return cancelDispute;\n    }()\n    /**\n     * Resolves a dispute after it has been judged.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L104 | `DisputeResolved`} event.\n     */\n    )\n  }, {\n    key: \"resolveDispute\",\n    value: (function () {\n      var _resolveDispute = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(request) {\n        var _request$data, _request$txOptions3, _req2, txHash, _t3;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              _req2 = {\n                disputeId: BigInt(request.disputeId),\n                data: (_request$data = request.data) !== null && _request$data !== void 0 ? _request$data : \"0x\"\n              };\n              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {\n                _context3.n = 1;\n                break;\n              }\n              return _context3.a(2, {\n                encodedTxData: this.disputeModuleClient.resolveDisputeEncode(_req2)\n              });\n            case 1:\n              _context3.n = 2;\n              return this.disputeModuleClient.resolveDispute(_req2);\n            case 2:\n              txHash = _context3.v;\n              _context3.n = 3;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 3:\n              return _context3.a(2, {\n                txHash: txHash\n              });\n            case 4:\n              _context3.n = 6;\n              break;\n            case 5:\n              _context3.p = 5;\n              _t3 = _context3.v;\n              return _context3.a(2, handleError(_t3, \"Failed to resolve dispute\"));\n            case 6:\n              return _context3.a(2);\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n      function resolveDispute(_x3) {\n        return _resolveDispute.apply(this, arguments);\n      }\n      return resolveDispute;\n    }()\n    /**\n     * Tags a derivative if a parent has been tagged with an infringement tag\n     * or a group ip if a group member has been tagged with an infringement tag.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L93 | `IpTaggedOnRelatedIpInfringement`} event.\n     */\n    )\n  }, {\n    key: \"tagIfRelatedIpInfringed\",\n    value: (function () {\n      var _tagIfRelatedIpInfringed = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(request) {\n        var _this2 = this;\n        var _request$options, objects, txHashes, calls, txHash, _iterator, _step, object, _txHash, _t4, _t5;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              _context4.p = 0;\n              objects = request.infringementTags.map(function (arg) {\n                return {\n                  ipIdToTag: validateAddress(arg.ipId),\n                  infringerDisputeId: BigInt(arg.disputeId)\n                };\n              });\n              txHashes = [];\n              if (!(((_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.useMulticallWhenPossible) !== false && request.infringementTags.length > 1)) {\n                _context4.n = 2;\n                break;\n              }\n              calls = objects.map(function (object) {\n                return {\n                  target: _this2.disputeModuleClient.address,\n                  allowFailure: false,\n                  callData: _this2.disputeModuleClient.tagIfRelatedIpInfringedEncode(object).data\n                };\n              });\n              _context4.n = 1;\n              return this.multicall3Client.aggregate3({\n                calls: calls\n              });\n            case 1:\n              txHash = _context4.v;\n              txHashes.push(txHash);\n              _context4.n = 10;\n              break;\n            case 2:\n              _iterator = _createForOfIteratorHelper(objects);\n              _context4.p = 3;\n              _iterator.s();\n            case 4:\n              if ((_step = _iterator.n()).done) {\n                _context4.n = 7;\n                break;\n              }\n              object = _step.value;\n              _context4.n = 5;\n              return this.disputeModuleClient.tagIfRelatedIpInfringed(object);\n            case 5:\n              _txHash = _context4.v;\n              txHashes.push(_txHash);\n            case 6:\n              _context4.n = 4;\n              break;\n            case 7:\n              _context4.n = 9;\n              break;\n            case 8:\n              _context4.p = 8;\n              _t4 = _context4.v;\n              _iterator.e(_t4);\n            case 9:\n              _context4.p = 9;\n              _iterator.f();\n              return _context4.f(9);\n            case 10:\n              _context4.n = 11;\n              return Promise.all(txHashes.map(function (txHash) {\n                return waitForTxReceipt({\n                  txHash: txHash,\n                  txOptions: request.txOptions,\n                  rpcClient: _this2.rpcClient\n                });\n              }));\n            case 11:\n              return _context4.a(2, _context4.v);\n            case 12:\n              _context4.p = 12;\n              _t5 = _context4.v;\n              return _context4.a(2, handleError(_t5, \"Failed to tag related ip infringed\"));\n          }\n        }, _callee4, this, [[3, 8, 9, 10], [0, 12]]);\n      }));\n      function tagIfRelatedIpInfringed(_x4) {\n        return _tagIfRelatedIpInfringed.apply(this, arguments);\n      }\n      return tagIfRelatedIpInfringed;\n    }()\n    /**\n     * Counters a dispute that was raised by another party on an IP using counter evidence.\n     * The counter evidence (e.g., documents, images) should be uploaded to IPFS,\n     * and its corresponding CID is converted to a hash for the request.\n     *\n     * @remarks\n     *  The liveness period is split in two parts:\n     *  - the first part of the liveness period in which only the IP's owner can be called the method.\n     *  - a second part in which any address can be called the method.\n     *\n     * If you only have a `disputeId`, call {@link disputeIdToAssertionId} to get the `assertionId` needed here.\n     */\n    )\n  }, {\n    key: \"disputeAssertion\",\n    value: (function () {\n      var _disputeAssertion = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(request) {\n        var _this3 = this;\n        var ipAccount, bond, counterEvidenceHash, encodedData, _yield$this$wrappedIp, allowance, _txHash2, contractCall, _yield$contractCallWi2, txHash, receipt, _t6;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(request.ipId));\n              _context5.n = 1;\n              return getAssertionDetails(this.rpcClient, this.arbitrationPolicyUmaClient, request.assertionId);\n            case 1:\n              bond = _context5.v;\n              counterEvidenceHash = convertCIDtoHashIPFS(request.counterEvidenceCID);\n              encodedData = this.arbitrationPolicyUmaClient.disputeAssertionEncode({\n                assertionId: request.assertionId,\n                counterEvidenceHash: counterEvidenceHash\n              });\n              _context5.n = 2;\n              return this.wrappedIpClient.allowance({\n                owner: this.wallet.account.address,\n                spender: ipAccount.address\n              });\n            case 2:\n              _yield$this$wrappedIp = _context5.v;\n              allowance = _yield$this$wrappedIp.result;\n              if (!(allowance < bond)) {\n                _context5.n = 4;\n                break;\n              }\n              _context5.n = 3;\n              return this.wrappedIpClient.approve({\n                spender: ipAccount.address,\n                amount: viem__WEBPACK_IMPORTED_MODULE_9__.maxUint256\n              });\n            case 3:\n              _txHash2 = _context5.v;\n              _context5.n = 4;\n              return this.rpcClient.waitForTransactionReceipt({\n                hash: _txHash2\n              });\n            case 4:\n              contractCall = function contractCall() {\n                var calls = [];\n                if (bond > 0) {\n                  calls.push({\n                    target: _this3.wrappedIpClient.address,\n                    value: 0n,\n                    data: _this3.wrappedIpClient.transferFromEncode({\n                      from: _this3.wallet.account.address,\n                      to: ipAccount.address,\n                      amount: bond\n                    }).data\n                  });\n                  calls.push({\n                    target: _this3.wrappedIpClient.address,\n                    value: 0n,\n                    data: _this3.wrappedIpClient.approveEncode({\n                      spender: _this3.arbitrationPolicyUmaClient.address,\n                      amount: viem__WEBPACK_IMPORTED_MODULE_9__.maxUint256\n                    }).data\n                  });\n                }\n                return ipAccount.executeBatch({\n                  calls: [].concat(calls, [{\n                    target: encodedData.to,\n                    value: 0n,\n                    data: encodedData.data\n                  }]),\n                  operation: 0\n                });\n              };\n              _context5.n = 5;\n              return contractCallWithFees({\n                totalFees: bond,\n                options: {\n                  wipOptions: _objectSpread2(_objectSpread2({}, request.wipOptions), {}, {\n                    // Disable auto approve because msg.sender is ipAccount instead of wallet.\n                    enableAutoApprove: false,\n                    // Disable multicall because multicall makes more complex due to disputeInitiator in this version.\n                    useMulticallWhenPossible: false\n                  })\n                },\n                multicall3Address: this.multicall3Client.address,\n                rpcClient: this.rpcClient,\n                contractCall: contractCall,\n                tokenSpenders: [{\n                  address: this.arbitrationPolicyUmaClient.address,\n                  amount: bond\n                }],\n                encodedTxs: [encodedData],\n                wallet: this.wallet,\n                sender: this.wallet.account.address,\n                txOptions: request.txOptions\n              });\n            case 5:\n              _yield$contractCallWi2 = _context5.v;\n              txHash = _yield$contractCallWi2.txHash;\n              receipt = _yield$contractCallWi2.receipt;\n              return _context5.a(2, {\n                txHash: txHash,\n                receipt: receipt\n              });\n            case 6:\n              _context5.p = 6;\n              _t6 = _context5.v;\n              return _context5.a(2, handleError(_t6, \"Failed to dispute assertion\"));\n          }\n        }, _callee5, this, [[0, 6]]);\n      }));\n      function disputeAssertion(_x5) {\n        return _disputeAssertion.apply(this, arguments);\n      }\n      return disputeAssertion;\n    }())\n  }, {\n    key: \"disputeIdToAssertionId\",\n    value: function () {\n      var _disputeIdToAssertionId = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(disputeId) {\n        var assertionId;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              _context6.n = 1;\n              return this.arbitrationPolicyUmaClient.disputeIdToAssertionId({\n                disputeId: BigInt(disputeId)\n              });\n            case 1:\n              assertionId = _context6.v;\n              return _context6.a(2, assertionId);\n          }\n        }, _callee6, this);\n      }));\n      function disputeIdToAssertionId(_x6) {\n        return _disputeIdToAssertionId.apply(this, arguments);\n      }\n      return disputeIdToAssertionId;\n    }()\n  }]);\n}();\n\n/**\n * This data used IP owners to define the configuration\n * when others are minting license tokens of their IP through the LicensingModule.\n * Contract reference: @see {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/lib/Licensing.sol#L27 | Licensing.sol}\n * For detailed documentation on licensing configuration, visit {@link https://docs.story.foundation/concepts/licensing-module/license-config}\n */\n\n/**\n * Input for token amount, can be bigint or number.\n * Will be converted to bigint for contract calls.\n */\n\n/**\n * The type of revenue share.\n * It is used to determine the type of revenue share to be used in the revenue share calculation and throw error when the revenue share is not valid.\n */\nvar RevShareType = /*#__PURE__*/function (RevShareType) {\n  RevShareType[\"COMMERCIAL_REVENUE_SHARE\"] = \"commercialRevShare\";\n  RevShareType[\"MAX_REVENUE_SHARE\"] = \"maxRevenueShare\";\n  RevShareType[\"MAX_ALLOWED_REWARD_SHARE\"] = \"maxAllowedRewardShare\";\n  RevShareType[\"EXPECT_MINIMUM_GROUP_REWARD_SHARE\"] = \"expectMinimumGroupRewardShare\";\n  RevShareType[\"MAX_ALLOWED_REWARD_SHARE_PERCENTAGE\"] = \"maxAllowedRewardSharePercentage\";\n  return RevShareType;\n}({});\n\n/**\n * Permission level\n */\nvar AccessPermission = /*#__PURE__*/function (AccessPermission) {\n  /**\n   * ABSTAIN means having not enough information to make decision at\n   * current level, deferred decision to up.\n   */\n  AccessPermission[AccessPermission[\"ABSTAIN\"] = 0] = \"ABSTAIN\";\n  /** ALLOW means the permission is granted to transaction signer to call the function. */\n  AccessPermission[AccessPermission[\"ALLOW\"] = 1] = \"ALLOW\";\n  /** DENY means the permission is denied to transaction signer to call the function. */\n  AccessPermission[AccessPermission[\"DENY\"] = 2] = \"DENY\";\n  return AccessPermission;\n}({});\n\n/**\n * Gets the function signature from an ABI for a given method name\n * @param abi - The contract ABI\n * @param methodName - The name of the method to get the signature for\n * @param overloadIndex - Optional index for overloaded functions (0-based)\n * @returns The function signature in standard format (e.g. \"methodName(uint256,address)\")\n * @throws Error if method not found or if overloadIndex is required but not provided\n */\nvar getFunctionSignature = function getFunctionSignature(abi, methodName, overloadIndex) {\n  var functions = abi.filter(function (x) {\n    return x.type === \"function\" && x.name === methodName;\n  });\n  if (functions.length === 0) {\n    throw new Error(\"Method \".concat(methodName, \" not found in ABI.\"));\n  }\n  if (functions.length > 1 && overloadIndex === undefined) {\n    throw new Error(\"Method \".concat(methodName, \" has \").concat(functions.length, \" overloads. Please specify overloadIndex (0-\").concat(functions.length - 1, \").\"));\n  }\n  var func = functions[0];\n  var _getTypeString = function getTypeString(input) {\n    if (input.type.startsWith(\"tuple\")) {\n      var _input$components;\n      var components = (_input$components = input.components) === null || _input$components === void 0 ? void 0 : _input$components.map(function (comp) {\n        return _getTypeString(comp);\n      }).join(\",\");\n      return \"(\".concat(components, \")\");\n    }\n    return input.type;\n  };\n  var inputs = func.inputs.map(function (input) {\n    return _getTypeString(input);\n  }).join(\",\");\n  return \"\".concat(methodName, \"(\").concat(inputs, \")\");\n};\n\nvar getIpMetadataForWorkflow = function getIpMetadataForWorkflow(ipMetadata) {\n  return {\n    ipMetadataURI: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.ipMetadataURI) || \"\",\n    ipMetadataHash: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.ipMetadataHash) || viem__WEBPACK_IMPORTED_MODULE_16__.zeroHash,\n    nftMetadataURI: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.nftMetadataURI) || \"\",\n    nftMetadataHash: (ipMetadata === null || ipMetadata === void 0 ? void 0 : ipMetadata.nftMetadataHash) || viem__WEBPACK_IMPORTED_MODULE_16__.zeroHash\n  };\n};\n\n/** The amount of revenue token claimable. */\n\n/**\n * Native royalty policy created by the Story team\n * - LAP: {@link https://docs.story.foundation/concepts/royalty-module/liquid-absolute-percentage | Liquid Absolute Percentage}\n * - LRP: {@link https://docs.story.foundation/concepts/royalty-module/liquid-relative-percentage | Liquid Relative Percentage}\n */\nvar NativeRoyaltyPolicy = /*#__PURE__*/function (NativeRoyaltyPolicy) {\n  NativeRoyaltyPolicy[NativeRoyaltyPolicy[\"LAP\"] = 0] = \"LAP\";\n  NativeRoyaltyPolicy[NativeRoyaltyPolicy[\"LRP\"] = 1] = \"LRP\";\n  return NativeRoyaltyPolicy;\n}({});\n\n/**\n * Allow custom royalty policy address or use a native royalty policy enum.\n * For custom royalty policy, @see {@link https://docs.story.foundation/concepts/royalty-module/external-royalty-policies | External Royalty Policies}\n */\n\nvar royaltyPolicyInputToAddress = function royaltyPolicyInputToAddress(input, chainId) {\n  var transferredChainId = chain[chainId || \"aeneid\"];\n  var address;\n  switch (input) {\n    case undefined:\n    case NativeRoyaltyPolicy.LAP:\n      address = royaltyPolicyLapAddress[transferredChainId];\n      break;\n    case NativeRoyaltyPolicy.LRP:\n      address = royaltyPolicyLrpAddress[transferredChainId];\n      break;\n    default:\n      address = validateAddress(input);\n  }\n  return address;\n};\nvar getRevenueShare = function getRevenueShare(revShare) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RevShareType.COMMERCIAL_REVENUE_SHARE;\n  var revShareNumber = Number(revShare);\n  if (isNaN(revShareNumber)) {\n    throw new Error(\"\".concat(type, \" must be a valid number.\"));\n  }\n  if (revShareNumber < 0 || revShareNumber > 100) {\n    throw new Error(\"\".concat(type, \" must be between 0 and 100.\"));\n  }\n  return revShareNumber * Math.pow(10, 6);\n};\n\n/**\n * Get the signature for setting permissions.\n */\nvar getPermissionSignature = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(param) {\n    var ipId, deadline, state, wallet, chainId, permissions, accessAddress, isBatchPermissionFunction, data;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          ipId = param.ipId, deadline = param.deadline, state = param.state, wallet = param.wallet, chainId = param.chainId, permissions = param.permissions;\n          accessAddress = accessControllerAddress[chainId];\n          isBatchPermissionFunction = permissions.length >= 2;\n          data = (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n            abi: accessControllerAbi,\n            functionName: isBatchPermissionFunction ? \"setBatchTransientPermissions\" : \"setTransientPermission\",\n            args: isBatchPermissionFunction ? [permissions.map(function (item) {\n              return {\n                ipAccount: validateAddress(item.ipId),\n                signer: validateAddress(item.signer),\n                to: validateAddress(item.to),\n                func: item.func ? (0,viem__WEBPACK_IMPORTED_MODULE_17__.toFunctionSelector)(item.func) : defaultFunctionSelector,\n                permission: item.permission\n              };\n            })] : [validateAddress(permissions[0].ipId), validateAddress(permissions[0].signer), validateAddress(permissions[0].to), permissions[0].func ? (0,viem__WEBPACK_IMPORTED_MODULE_17__.toFunctionSelector)(permissions[0].func) : defaultFunctionSelector, permissions[0].permission]\n          });\n          _context.n = 1;\n          return getSignature({\n            state: state,\n            to: accessAddress,\n            encodeData: data,\n            wallet: wallet,\n            verifyingContract: ipId,\n            deadline: deadline,\n            chainId: chainId\n          });\n        case 1:\n          return _context.a(2, _context.v);\n      }\n    }, _callee);\n  }));\n  return function getPermissionSignature(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getDeadline = function getDeadline(unixTimestamp, deadline) {\n  if (deadline && (isNaN(Number(deadline)) || BigInt(deadline) < 0n)) {\n    throw new Error(\"Invalid deadline value.\");\n  }\n  return deadline ? unixTimestamp + BigInt(deadline) : unixTimestamp + 1000n;\n};\n\n/**\n * Get the signature.\n */\nvar getSignature = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(_ref2) {\n    var state, to, encodeData, wallet, verifyingContract, deadline, chainId, nonce, signature;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          state = _ref2.state, to = _ref2.to, encodeData = _ref2.encodeData, wallet = _ref2.wallet, verifyingContract = _ref2.verifyingContract, deadline = _ref2.deadline, chainId = _ref2.chainId;\n          if (wallet.signTypedData) {\n            _context2.n = 1;\n            break;\n          }\n          throw new Error(\"The wallet client does not support signTypedData, please try again.\");\n        case 1:\n          if (wallet.account) {\n            _context2.n = 2;\n            break;\n          }\n          throw new Error(\"The wallet client does not have an account, please try again.\");\n        case 2:\n          nonce = (0,viem__WEBPACK_IMPORTED_MODULE_18__.keccak256)((0,viem__WEBPACK_IMPORTED_MODULE_15__.encodeAbiParameters)([{\n            name: \"\",\n            type: \"bytes32\"\n          }, {\n            name: \"\",\n            type: \"bytes\"\n          }], [state, (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n            abi: ipAccountImplAbi,\n            functionName: \"execute\",\n            args: [to, 0n, encodeData]\n          })]));\n          _context2.n = 3;\n          return wallet.signTypedData({\n            account: wallet.account,\n            domain: {\n              name: \"Story Protocol IP Account\",\n              version: \"1\",\n              chainId: chainId,\n              verifyingContract: verifyingContract\n            },\n            types: {\n              Execute: [{\n                name: \"to\",\n                type: \"address\"\n              }, {\n                name: \"value\",\n                type: \"uint256\"\n              }, {\n                name: \"data\",\n                type: \"bytes\"\n              }, {\n                name: \"nonce\",\n                type: \"bytes32\"\n              }, {\n                name: \"deadline\",\n                type: \"uint256\"\n              }]\n            },\n            primaryType: \"Execute\",\n            message: {\n              to: to,\n              value: BigInt(0),\n              data: encodeData,\n              nonce: nonce,\n              deadline: BigInt(deadline)\n            }\n          });\n        case 3:\n          signature = _context2.v;\n          return _context2.a(2, {\n            signature: signature,\n            nonce: nonce\n          });\n      }\n    }, _callee2);\n  }));\n  return function getSignature(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar validateLicenseConfig = function validateLicenseConfig(licensingConfig) {\n  if (!licensingConfig) {\n    return {\n      isSet: false,\n      mintingFee: 0n,\n      licensingHook: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n      hookData: viem__WEBPACK_IMPORTED_MODULE_16__.zeroHash,\n      commercialRevShare: 0,\n      disabled: false,\n      expectMinimumGroupRewardShare: 0,\n      expectGroupRewardPool: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress\n    };\n  }\n  var licenseConfig = {\n    expectMinimumGroupRewardShare: Number(licensingConfig.expectMinimumGroupRewardShare),\n    commercialRevShare: getRevenueShare(licensingConfig.commercialRevShare),\n    mintingFee: BigInt(licensingConfig.mintingFee),\n    expectGroupRewardPool: validateAddress(licensingConfig.expectGroupRewardPool),\n    licensingHook: validateAddress(licensingConfig.licensingHook),\n    hookData: licensingConfig.hookData,\n    isSet: licensingConfig.isSet,\n    disabled: licensingConfig.disabled\n  };\n  if (isNaN(licenseConfig.expectMinimumGroupRewardShare)) {\n    throw new Error(\"The expectMinimumGroupRewardShare must be a valid number.\");\n  }\n  if (licenseConfig.expectMinimumGroupRewardShare < 0 || licenseConfig.expectMinimumGroupRewardShare > 100) {\n    throw new Error(\"The expectMinimumGroupRewardShare must be greater than 0 and less than 100.\");\n  } else {\n    licenseConfig.expectMinimumGroupRewardShare = getRevenueShare(licenseConfig.expectMinimumGroupRewardShare, RevShareType.EXPECT_MINIMUM_GROUP_REWARD_SHARE);\n  }\n  if (licenseConfig.mintingFee < 0) {\n    throw new Error(\"The mintingFee must be greater than 0.\");\n  }\n  return licenseConfig;\n};\n\nvar GroupClient = /*#__PURE__*/function () {\n  function GroupClient(rpcClient, wallet, chainId) {\n    _classCallCheck(this, GroupClient);\n    this.rpcClient = rpcClient;\n    this.wallet = wallet;\n    this.chainId = chainId;\n    this.groupingWorkflowsClient = new GroupingWorkflowsClient(rpcClient, wallet);\n    this.groupingModuleEventClient = new GroupingModuleEventClient(rpcClient);\n    this.licenseTemplateClient = new PiLicenseTemplateClient(rpcClient, wallet);\n    this.licenseTokenReadOnlyClient = new LicenseTokenReadOnlyClient(rpcClient);\n    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);\n    this.groupingModuleClient = new GroupingModuleClient(rpcClient, wallet);\n    this.coreMetadataModuleClient = new CoreMetadataModuleClient(rpcClient, wallet);\n    this.licensingModuleClient = new LicensingModuleClient(rpcClient, wallet);\n    this.licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);\n    this.royaltyModuleEventClient = new RoyaltyModuleEventClient(rpcClient);\n  }\n\n  /** Registers a Group IPA.\n   *\n   * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L14 | `IPGroupRegistered`} event.\n   */\n  return _createClass(GroupClient, [{\n    key: \"registerGroup\",\n    value: (function () {\n      var _registerGroup = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request) {\n        var _request$txOptions, object, txHash, txReceipt, groupId, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              object = {\n                groupPool: validateAddress(request.groupPool)\n              };\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context.n = 1;\n                break;\n              }\n              return _context.a(2, {\n                encodedTxData: this.groupingModuleClient.registerGroupEncode(object)\n              });\n            case 1:\n              _context.n = 2;\n              return this.groupingModuleClient.registerGroup(object);\n            case 2:\n              txHash = _context.v;\n              _context.n = 3;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 3:\n              txReceipt = _context.v;\n              groupId = this.groupingModuleEventClient.parseTxIpGroupRegisteredEvent(txReceipt)[0].groupId;\n              return _context.a(2, {\n                txHash: txHash,\n                groupId: groupId\n              });\n            case 4:\n              _context.n = 6;\n              break;\n            case 5:\n              _context.p = 5;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to register group\"));\n            case 6:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n      function registerGroup(_x) {\n        return _registerGroup.apply(this, arguments);\n      }\n      return registerGroup;\n    }()\n    /** Mint an NFT from a SPGNFT collection, register it with metadata as an IP, attach license terms to the registered IP, and add it to a group IP.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"mintAndRegisterIpAndAttachLicenseAndAddToGroup\",\n    value: (function () {\n      var _mintAndRegisterIpAndAttachLicenseAndAddToGroup = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request) {\n        var _request$txOptions2, groupId, recipient, spgNftContract, deadline, isRegistered, ipAccount, _yield$ipAccount$stat, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS, sigAddToGroupSignature, object, txHash, receipt, log, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              _context2.p = 0;\n              groupId = request.groupId, recipient = request.recipient, spgNftContract = request.spgNftContract, deadline = request.deadline;\n              _context2.n = 1;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(groupId)\n              });\n            case 1:\n              isRegistered = _context2.v;\n              if (isRegistered) {\n                _context2.n = 2;\n                break;\n              }\n              throw new Error(\"Group IP \".concat(groupId, \" is not registered.\"));\n            case 2:\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, groupId);\n              _context2.n = 3;\n              return ipAccount.state();\n            case 3:\n              _yield$ipAccount$stat = _context2.v;\n              state = _yield$ipAccount$stat.result;\n              _context2.n = 4;\n              return this.rpcClient.getBlock();\n            case 4:\n              blockTimestamp = _context2.v.timestamp;\n              calculatedDeadline = getDeadline(blockTimestamp, deadline);\n              _context2.n = 5;\n              return getPermissionSignature({\n                ipId: groupId,\n                deadline: calculatedDeadline,\n                state: state,\n                wallet: this.wallet,\n                chainId: this.chainId,\n                permissions: [{\n                  ipId: groupId,\n                  signer: validateAddress(this.groupingWorkflowsClient.address),\n                  to: validateAddress(this.groupingModuleClient.address),\n                  permission: AccessPermission.ALLOW,\n                  func: getFunctionSignature(groupingModuleAbi, \"addIp\")\n                }]\n              });\n            case 5:\n              _yield$getPermissionS = _context2.v;\n              sigAddToGroupSignature = _yield$getPermissionS.signature;\n              object = _objectSpread2(_objectSpread2({}, request), {}, {\n                allowDuplicates: request.allowDuplicates || true,\n                spgNftContract: validateAddress(spgNftContract),\n                recipient: validateAddress(recipient || this.wallet.account.address),\n                maxAllowedRewardShare: BigInt(getRevenueShare(request.maxAllowedRewardShare, RevShareType.MAX_ALLOWED_REWARD_SHARE)),\n                licensesData: this.getLicenseData(request.licenseData),\n                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),\n                sigAddToGroup: {\n                  signer: validateAddress(this.wallet.account.address),\n                  deadline: calculatedDeadline,\n                  signature: sigAddToGroupSignature\n                }\n              });\n              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {\n                _context2.n = 6;\n                break;\n              }\n              return _context2.a(2, {\n                encodedTxData: this.groupingWorkflowsClient.mintAndRegisterIpAndAttachLicenseAndAddToGroupEncode(object)\n              });\n            case 6:\n              _context2.n = 7;\n              return this.groupingWorkflowsClient.mintAndRegisterIpAndAttachLicenseAndAddToGroup(object);\n            case 7:\n              txHash = _context2.v;\n              _context2.n = 8;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 8:\n              receipt = _context2.v;\n              log = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(receipt)[0];\n              return _context2.a(2, {\n                txHash: txHash,\n                ipId: log.ipId,\n                tokenId: log.tokenId\n              });\n            case 9:\n              _context2.n = 11;\n              break;\n            case 10:\n              _context2.p = 10;\n              _t2 = _context2.v;\n              return _context2.a(2, handleError(_t2, \"Failed to mint and register IP and attach license and add to group\"));\n            case 11:\n              return _context2.a(2);\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n      function mintAndRegisterIpAndAttachLicenseAndAddToGroup(_x2) {\n        return _mintAndRegisterIpAndAttachLicenseAndAddToGroup.apply(this, arguments);\n      }\n      return mintAndRegisterIpAndAttachLicenseAndAddToGroup;\n    }()\n    /** Register an NFT as IP with metadata, attach license terms to the registered IP, and add it to a group IP.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerIpAndAttachLicenseAndAddToGroup\",\n    value: (function () {\n      var _registerIpAndAttachLicenseAndAddToGroup = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(request) {\n        var _request$txOptions3, ipIdAddress, isRegistered, ipAccount, _yield$ipAccount$stat2, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS2, sigAddToGroupSignature, _yield$getPermissionS3, sigMetadataAndAttachSignature, object, txHash, receipt, log, _t3;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              _context3.n = 1;\n              return this.ipAssetRegistryClient.ipId({\n                chainId: BigInt(this.chainId),\n                tokenContract: validateAddress(request.nftContract),\n                tokenId: BigInt(request.tokenId)\n              });\n            case 1:\n              ipIdAddress = _context3.v;\n              _context3.n = 2;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(request.groupId)\n              });\n            case 2:\n              isRegistered = _context3.v;\n              if (isRegistered) {\n                _context3.n = 3;\n                break;\n              }\n              throw new Error(\"Group IP \".concat(request.groupId, \" is not registered.\"));\n            case 3:\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, request.groupId);\n              _context3.n = 4;\n              return ipAccount.state();\n            case 4:\n              _yield$ipAccount$stat2 = _context3.v;\n              state = _yield$ipAccount$stat2.result;\n              _context3.n = 5;\n              return this.rpcClient.getBlock();\n            case 5:\n              blockTimestamp = _context3.v.timestamp;\n              calculatedDeadline = getDeadline(blockTimestamp, request.deadline);\n              _context3.n = 6;\n              return getPermissionSignature({\n                ipId: request.groupId,\n                deadline: calculatedDeadline,\n                state: state,\n                wallet: this.wallet,\n                chainId: this.chainId,\n                permissions: [{\n                  ipId: request.groupId,\n                  signer: this.groupingWorkflowsClient.address,\n                  to: this.groupingModuleClient.address,\n                  permission: AccessPermission.ALLOW,\n                  func: getFunctionSignature(groupingModuleAbi, \"addIp\")\n                }]\n              });\n            case 6:\n              _yield$getPermissionS2 = _context3.v;\n              sigAddToGroupSignature = _yield$getPermissionS2.signature;\n              _context3.n = 7;\n              return getPermissionSignature({\n                ipId: ipIdAddress,\n                deadline: calculatedDeadline,\n                state: (0,viem__WEBPACK_IMPORTED_MODULE_14__.toHex)(0, {\n                  size: 32\n                }),\n                wallet: this.wallet,\n                chainId: this.chainId,\n                permissions: [{\n                  ipId: ipIdAddress,\n                  signer: this.groupingWorkflowsClient.address,\n                  to: validateAddress(this.coreMetadataModuleClient.address),\n                  permission: AccessPermission.ALLOW,\n                  func: getFunctionSignature(coreMetadataModuleAbi, \"setAll\")\n                }, {\n                  ipId: ipIdAddress,\n                  signer: this.groupingWorkflowsClient.address,\n                  to: validateAddress(this.licensingModuleClient.address),\n                  permission: AccessPermission.ALLOW,\n                  func: getFunctionSignature(licensingModuleAbi, \"attachLicenseTerms\")\n                }, {\n                  ipId: ipIdAddress,\n                  signer: this.groupingWorkflowsClient.address,\n                  to: this.licensingModuleClient.address,\n                  permission: AccessPermission.ALLOW,\n                  func: getFunctionSignature(licensingModuleAbi, \"setLicensingConfig\")\n                }]\n              });\n            case 7:\n              _yield$getPermissionS3 = _context3.v;\n              sigMetadataAndAttachSignature = _yield$getPermissionS3.signature;\n              object = {\n                nftContract: request.nftContract,\n                groupId: request.groupId,\n                licensesData: this.getLicenseData(request.licenseData),\n                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),\n                tokenId: BigInt(request.tokenId),\n                maxAllowedRewardShare: BigInt(getRevenueShare(request.maxAllowedRewardShare, RevShareType.MAX_ALLOWED_REWARD_SHARE)),\n                sigAddToGroup: {\n                  signer: validateAddress(this.wallet.account.address),\n                  deadline: calculatedDeadline,\n                  signature: sigAddToGroupSignature\n                },\n                sigMetadataAndAttachAndConfig: {\n                  signer: this.wallet.account.address,\n                  deadline: calculatedDeadline,\n                  signature: sigMetadataAndAttachSignature\n                }\n              };\n              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {\n                _context3.n = 8;\n                break;\n              }\n              return _context3.a(2, {\n                encodedTxData: this.groupingWorkflowsClient.registerIpAndAttachLicenseAndAddToGroupEncode(object)\n              });\n            case 8:\n              _context3.n = 9;\n              return this.groupingWorkflowsClient.registerIpAndAttachLicenseAndAddToGroup(object);\n            case 9:\n              txHash = _context3.v;\n              _context3.n = 10;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 10:\n              receipt = _context3.v;\n              log = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(receipt)[0];\n              return _context3.a(2, {\n                txHash: txHash,\n                ipId: log.ipId,\n                tokenId: log.tokenId\n              });\n            case 11:\n              _context3.p = 11;\n              _t3 = _context3.v;\n              return _context3.a(2, handleError(_t3, \"Failed to register IP and attach license and add to group\"));\n          }\n        }, _callee3, this, [[0, 11]]);\n      }));\n      function registerIpAndAttachLicenseAndAddToGroup(_x3) {\n        return _registerIpAndAttachLicenseAndAddToGroup.apply(this, arguments);\n      }\n      return registerIpAndAttachLicenseAndAddToGroup;\n    }()\n    /** Register a group IP with a group reward pool and attach license terms to the group IP.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L14 | `IPGroupRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerGroupAndAttachLicense\",\n    value: (function () {\n      var _registerGroupAndAttachLicense = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(request) {\n        var _request$txOptions4, object, txHash, txReceipt, groupId, _t4;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              _context4.p = 0;\n              object = {\n                groupPool: validateAddress(request.groupPool),\n                licenseData: this.getLicenseData(request.licenseData)[0]\n              };\n              if (!((_request$txOptions4 = request.txOptions) !== null && _request$txOptions4 !== void 0 && _request$txOptions4.encodedTxDataOnly)) {\n                _context4.n = 1;\n                break;\n              }\n              return _context4.a(2, {\n                encodedTxData: this.groupingWorkflowsClient.registerGroupAndAttachLicenseEncode(object)\n              });\n            case 1:\n              _context4.n = 2;\n              return this.groupingWorkflowsClient.registerGroupAndAttachLicense(object);\n            case 2:\n              txHash = _context4.v;\n              _context4.n = 3;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 3:\n              txReceipt = _context4.v;\n              groupId = this.groupingModuleEventClient.parseTxIpGroupRegisteredEvent(txReceipt)[0].groupId;\n              return _context4.a(2, {\n                txHash: txHash,\n                groupId: groupId\n              });\n            case 4:\n              _context4.p = 4;\n              _t4 = _context4.v;\n              return _context4.a(2, handleError(_t4, \"Failed to register group and attach license\"));\n          }\n        }, _callee4, this, [[0, 4]]);\n      }));\n      function registerGroupAndAttachLicense(_x4) {\n        return _registerGroupAndAttachLicense.apply(this, arguments);\n      }\n      return registerGroupAndAttachLicense;\n    }()\n    /** Register a group IP with a group reward pool, attach license terms to the group IP, and add individual IPs to the group IP.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L14 | `IPGroupRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerGroupAndAttachLicenseAndAddIps\",\n    value: (function () {\n      var _registerGroupAndAttachLicenseAndAddIps = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(request) {\n        var _request$txOptions5, object, i, isRegistered, _i, isAttachedLicenseTerms, txHash, txReceipt, groupId, _t5;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              object = {\n                groupPool: validateAddress(request.groupPool),\n                ipIds: request.ipIds,\n                licenseData: this.getLicenseData(request.licenseData)[0],\n                maxAllowedRewardShare: BigInt(getRevenueShare(request.maxAllowedRewardShare))\n              };\n              i = 0;\n            case 1:\n              if (!(i < request.ipIds.length)) {\n                _context5.n = 4;\n                break;\n              }\n              _context5.n = 2;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(request.ipIds[i])\n              });\n            case 2:\n              isRegistered = _context5.v;\n              if (isRegistered) {\n                _context5.n = 3;\n                break;\n              }\n              throw new Error(\"IP \".concat(request.ipIds[i], \" is not registered.\"));\n            case 3:\n              i++;\n              _context5.n = 1;\n              break;\n            case 4:\n              _i = 0;\n            case 5:\n              if (!(_i < request.ipIds.length)) {\n                _context5.n = 8;\n                break;\n              }\n              _context5.n = 6;\n              return this.licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({\n                ipId: request.ipIds[_i],\n                licenseTemplate: object.licenseData.licenseTemplate,\n                licenseTermsId: object.licenseData.licenseTermsId\n              });\n            case 6:\n              isAttachedLicenseTerms = _context5.v;\n              if (isAttachedLicenseTerms) {\n                _context5.n = 7;\n                break;\n              }\n              throw new Error(\"License terms must be attached to IP \".concat(request.ipIds[_i], \" before adding to group.\"));\n            case 7:\n              _i++;\n              _context5.n = 5;\n              break;\n            case 8:\n              if (!((_request$txOptions5 = request.txOptions) !== null && _request$txOptions5 !== void 0 && _request$txOptions5.encodedTxDataOnly)) {\n                _context5.n = 9;\n                break;\n              }\n              return _context5.a(2, {\n                encodedTxData: this.groupingWorkflowsClient.registerGroupAndAttachLicenseAndAddIpsEncode(object)\n              });\n            case 9:\n              _context5.n = 10;\n              return this.groupingWorkflowsClient.registerGroupAndAttachLicenseAndAddIps(object);\n            case 10:\n              txHash = _context5.v;\n              _context5.n = 11;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 11:\n              txReceipt = _context5.v;\n              groupId = this.groupingModuleEventClient.parseTxIpGroupRegisteredEvent(txReceipt)[0].groupId;\n              return _context5.a(2, {\n                txHash: txHash,\n                groupId: groupId\n              });\n            case 12:\n              _context5.p = 12;\n              _t5 = _context5.v;\n              return _context5.a(2, handleError(_t5, \"Failed to register group and attach license and add ips\"));\n          }\n        }, _callee5, this, [[0, 12]]);\n      }));\n      function registerGroupAndAttachLicenseAndAddIps(_x5) {\n        return _registerGroupAndAttachLicenseAndAddIps.apply(this, arguments);\n      }\n      return registerGroupAndAttachLicenseAndAddIps;\n    }()\n    /**\n     * Collect royalties for the entire group and distribute the rewards to each member IP's royalty vault.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L38 | `CollectedRoyaltiesToGroupPool`} event.\n     */\n    )\n  }, {\n    key: \"collectAndDistributeGroupRoyalties\",\n    value: (function () {\n      var _collectAndDistributeGroupRoyalties = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(_ref) {\n        var _this = this;\n        var groupIpId, currencyTokens, memberIpIds, txOptions, collectAndClaimParams, isGroupRegistered, txHash, _yield$waitForTxRecei, receipt, collectedRoyalties, royaltiesDistributed, _t6;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.p = _context7.n) {\n            case 0:\n              groupIpId = _ref.groupIpId, currencyTokens = _ref.currencyTokens, memberIpIds = _ref.memberIpIds, txOptions = _ref.txOptions;\n              _context7.p = 1;\n              if (currencyTokens.length) {\n                _context7.n = 2;\n                break;\n              }\n              throw new Error(\"At least one currency token is required.\");\n            case 2:\n              if (memberIpIds.length) {\n                _context7.n = 3;\n                break;\n              }\n              throw new Error(\"At least one member IP ID is required.\");\n            case 3:\n              if (!currencyTokens.some(function (token) {\n                return token === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress;\n              })) {\n                _context7.n = 4;\n                break;\n              }\n              throw new Error(\"Currency token cannot be the zero address.\");\n            case 4:\n              collectAndClaimParams = {\n                groupIpId: validateAddress(groupIpId),\n                currencyTokens: validateAddresses(currencyTokens),\n                memberIpIds: validateAddresses(memberIpIds)\n              };\n              _context7.n = 5;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: collectAndClaimParams.groupIpId\n              });\n            case 5:\n              isGroupRegistered = _context7.v;\n              if (isGroupRegistered) {\n                _context7.n = 6;\n                break;\n              }\n              throw new Error(\"The group IP with ID \".concat(collectAndClaimParams.groupIpId, \" is not registered.\"));\n            case 6:\n              _context7.n = 7;\n              return Promise.all(collectAndClaimParams.memberIpIds.map(/*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(ipId) {\n                  var isMemberRegistered;\n                  return _regenerator().w(function (_context6) {\n                    while (1) switch (_context6.n) {\n                      case 0:\n                        _context6.n = 1;\n                        return _this.ipAssetRegistryClient.isRegistered({\n                          id: ipId\n                        });\n                      case 1:\n                        isMemberRegistered = _context6.v;\n                        if (isMemberRegistered) {\n                          _context6.n = 2;\n                          break;\n                        }\n                        throw new Error(\"Member IP with ID \".concat(ipId, \" is not registered .\"));\n                      case 2:\n                        return _context6.a(2);\n                    }\n                  }, _callee6);\n                }));\n                return function (_x7) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            case 7:\n              _context7.n = 8;\n              return this.groupingWorkflowsClient.collectRoyaltiesAndClaimReward(collectAndClaimParams);\n            case 8:\n              txHash = _context7.v;\n              _context7.n = 9;\n              return waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              });\n            case 9:\n              _yield$waitForTxRecei = _context7.v;\n              receipt = _yield$waitForTxRecei.receipt;\n              if (receipt) {\n                _context7.n = 10;\n                break;\n              }\n              return _context7.a(2, {\n                txHash: txHash\n              });\n            case 10:\n              collectedRoyalties = this.groupingModuleEventClient.parseTxCollectedRoyaltiesToGroupPoolEvent(receipt).map(function (_ref3) {\n                var groupId = _ref3.groupId,\n                  amount = _ref3.amount,\n                  token = _ref3.token;\n                return {\n                  groupId: groupId,\n                  amount: amount,\n                  token: token\n                };\n              });\n              royaltiesDistributed = this.royaltyModuleEventClient.parseTxRoyaltyPaidEvent(receipt).map(function (_ref4) {\n                var receiverIpId = _ref4.receiverIpId,\n                  amount = _ref4.amount,\n                  token = _ref4.token,\n                  amountAfterFee = _ref4.amountAfterFee;\n                return {\n                  ipId: receiverIpId,\n                  amount: amount,\n                  token: token,\n                  amountAfterFee: amountAfterFee\n                };\n              });\n              return _context7.a(2, {\n                txHash: txHash,\n                collectedRoyalties: collectedRoyalties,\n                royaltiesDistributed: royaltiesDistributed\n              });\n            case 11:\n              _context7.p = 11;\n              _t6 = _context7.v;\n              return _context7.a(2, handleError(_t6, \"Failed to collect and distribute group royalties\"));\n          }\n        }, _callee7, this, [[1, 11]]);\n      }));\n      function collectAndDistributeGroupRoyalties(_x6) {\n        return _collectAndDistributeGroupRoyalties.apply(this, arguments);\n      }\n      return collectAndDistributeGroupRoyalties;\n    }()\n    /**\n     * Adds IPs to group.\n     * The function must be called by the Group IP owner or an authorized operator.\n     */\n    )\n  }, {\n    key: \"addIpsToGroup\",\n    value: (function () {\n      var _addIpsToGroup = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(_ref5) {\n        var groupIpId, ipIds, maxAllowedRewardSharePercentage, txOptions, addIpParam, txHash, _t7;\n        return _regenerator().w(function (_context8) {\n          while (1) switch (_context8.p = _context8.n) {\n            case 0:\n              groupIpId = _ref5.groupIpId, ipIds = _ref5.ipIds, maxAllowedRewardSharePercentage = _ref5.maxAllowedRewardSharePercentage, txOptions = _ref5.txOptions;\n              _context8.p = 1;\n              addIpParam = {\n                groupIpId: validateAddress(groupIpId),\n                ipIds: validateAddresses(ipIds),\n                maxAllowedRewardShare: BigInt(getRevenueShare(maxAllowedRewardSharePercentage === undefined ? 100 : maxAllowedRewardSharePercentage, RevShareType.MAX_ALLOWED_REWARD_SHARE_PERCENTAGE))\n              };\n              _context8.n = 2;\n              return this.groupingModuleClient.addIp(addIpParam);\n            case 2:\n              txHash = _context8.v;\n              _context8.n = 3;\n              return waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              });\n            case 3:\n              return _context8.a(2, _context8.v);\n            case 4:\n              _context8.p = 4;\n              _t7 = _context8.v;\n              return _context8.a(2, handleError(_t7, \"Failed to add IP to group\"));\n          }\n        }, _callee8, this, [[1, 4]]);\n      }));\n      function addIpsToGroup(_x8) {\n        return _addIpsToGroup.apply(this, arguments);\n      }\n      return addIpsToGroup;\n    }()\n    /**\n     * Returns the available reward for each IP in the group.\n     */\n    )\n  }, {\n    key: \"getClaimableReward\",\n    value: (function () {\n      var _getClaimableReward = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(_ref6) {\n        var groupIpId, currencyToken, memberIpIds, claimableReward, _t8;\n        return _regenerator().w(function (_context9) {\n          while (1) switch (_context9.p = _context9.n) {\n            case 0:\n              groupIpId = _ref6.groupIpId, currencyToken = _ref6.currencyToken, memberIpIds = _ref6.memberIpIds;\n              _context9.p = 1;\n              _context9.n = 2;\n              return this.groupingModuleClient.getClaimableReward({\n                groupId: validateAddress(groupIpId),\n                ipIds: validateAddresses(memberIpIds),\n                token: validateAddress(currencyToken)\n              });\n            case 2:\n              claimableReward = _context9.v;\n              return _context9.a(2, claimableReward);\n            case 3:\n              _context9.p = 3;\n              _t8 = _context9.v;\n              return _context9.a(2, handleError(_t8, \"Failed to get claimable reward\"));\n          }\n        }, _callee9, this, [[1, 3]]);\n      }));\n      function getClaimableReward(_x9) {\n        return _getClaimableReward.apply(this, arguments);\n      }\n      return getClaimableReward;\n    }()\n    /**\n     * Removes IPs from group.\n     * The function must be called by the Group IP owner or an authorized operator.\n     */\n    )\n  }, {\n    key: \"removeIpsFromGroup\",\n    value: (function () {\n      var _removeIpsFromGroup = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0(_ref7) {\n        var groupIpId, ipIds, txOptions, removeIpParam, txHash, _t9;\n        return _regenerator().w(function (_context0) {\n          while (1) switch (_context0.p = _context0.n) {\n            case 0:\n              groupIpId = _ref7.groupIpId, ipIds = _ref7.ipIds, txOptions = _ref7.txOptions;\n              _context0.p = 1;\n              removeIpParam = {\n                groupIpId: validateAddress(groupIpId),\n                ipIds: validateAddresses(ipIds)\n              };\n              _context0.n = 2;\n              return this.groupingModuleClient.removeIp(removeIpParam);\n            case 2:\n              txHash = _context0.v;\n              _context0.n = 3;\n              return waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              });\n            case 3:\n              return _context0.a(2, _context0.v);\n            case 4:\n              _context0.p = 4;\n              _t9 = _context0.v;\n              return _context0.a(2, handleError(_t9, \"Failed to remove IPs from group\"));\n          }\n        }, _callee0, this, [[1, 4]]);\n      }));\n      function removeIpsFromGroup(_x0) {\n        return _removeIpsFromGroup.apply(this, arguments);\n      }\n      return removeIpsFromGroup;\n    }()\n    /**\n     * Claims reward.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L31 | `ClaimedReward`} event.\n     */\n    )\n  }, {\n    key: \"claimReward\",\n    value: (function () {\n      var _claimReward = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(_ref8) {\n        var groupIpId, currencyToken, memberIpIds, txOptions, claimRewardParam, txHash, _yield$waitForTxRecei2, receipt, claimedReward, _t0;\n        return _regenerator().w(function (_context1) {\n          while (1) switch (_context1.p = _context1.n) {\n            case 0:\n              groupIpId = _ref8.groupIpId, currencyToken = _ref8.currencyToken, memberIpIds = _ref8.memberIpIds, txOptions = _ref8.txOptions;\n              _context1.p = 1;\n              claimRewardParam = {\n                groupId: validateAddress(groupIpId),\n                ipIds: validateAddresses(memberIpIds),\n                token: validateAddress(currencyToken)\n              };\n              _context1.n = 2;\n              return this.groupingModuleClient.claimReward(claimRewardParam);\n            case 2:\n              txHash = _context1.v;\n              _context1.n = 3;\n              return waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              });\n            case 3:\n              _yield$waitForTxRecei2 = _context1.v;\n              receipt = _yield$waitForTxRecei2.receipt;\n              if (receipt) {\n                _context1.n = 4;\n                break;\n              }\n              return _context1.a(2, {\n                txHash: txHash\n              });\n            case 4:\n              claimedReward = this.groupingModuleEventClient.parseTxClaimedRewardEvent(receipt);\n              return _context1.a(2, {\n                txHash: txHash,\n                claimedReward: claimedReward\n              });\n            case 5:\n              _context1.p = 5;\n              _t0 = _context1.v;\n              return _context1.a(2, handleError(_t0, \"Failed to claim reward\"));\n          }\n        }, _callee1, this, [[1, 5]]);\n      }));\n      function claimReward(_x1) {\n        return _claimReward.apply(this, arguments);\n      }\n      return claimReward;\n    }()\n    /**\n     * Collects royalties into the pool, making them claimable by group member IPs.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L38 | `CollectedRoyaltiesToGroupPool`} event.\n     */\n    )\n  }, {\n    key: \"collectRoyalties\",\n    value: (function () {\n      var _collectRoyalties = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10(_ref9) {\n        var groupIpId, currencyToken, txOptions, collectRoyaltiesParam, txHash, _yield$waitForTxRecei3, receipt, collectedRoyalties, _t1;\n        return _regenerator().w(function (_context10) {\n          while (1) switch (_context10.p = _context10.n) {\n            case 0:\n              groupIpId = _ref9.groupIpId, currencyToken = _ref9.currencyToken, txOptions = _ref9.txOptions;\n              _context10.p = 1;\n              collectRoyaltiesParam = {\n                groupId: validateAddress(groupIpId),\n                token: validateAddress(currencyToken)\n              };\n              _context10.n = 2;\n              return this.groupingModuleClient.collectRoyalties(collectRoyaltiesParam);\n            case 2:\n              txHash = _context10.v;\n              _context10.n = 3;\n              return waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              });\n            case 3:\n              _yield$waitForTxRecei3 = _context10.v;\n              receipt = _yield$waitForTxRecei3.receipt;\n              if (receipt) {\n                _context10.n = 4;\n                break;\n              }\n              return _context10.a(2, {\n                txHash: txHash\n              });\n            case 4:\n              collectedRoyalties = this.groupingModuleEventClient.parseTxCollectedRoyaltiesToGroupPoolEvent(receipt)[0].amount;\n              return _context10.a(2, {\n                txHash: txHash,\n                collectedRoyalties: collectedRoyalties\n              });\n            case 5:\n              _context10.p = 5;\n              _t1 = _context10.v;\n              return _context10.a(2, handleError(_t1, \"Failed to collect royalties\"));\n          }\n        }, _callee10, this, [[1, 5]]);\n      }));\n      function collectRoyalties(_x10) {\n        return _collectRoyalties.apply(this, arguments);\n      }\n      return collectRoyalties;\n    }())\n  }, {\n    key: \"getLicenseData\",\n    value: function getLicenseData(licenseData) {\n      var _this2 = this;\n      var isArray = Array.isArray(licenseData);\n      if (isArray && licenseData.length === 0 || !licenseData) {\n        throw new Error(\"License data is required.\");\n      }\n      var licenseDataArray = isArray ? licenseData : [licenseData];\n      return licenseDataArray.map(function (item) {\n        return {\n          licenseTemplate: validateAddress(item.licenseTemplate || _this2.licenseTemplateClient.address),\n          licenseTermsId: BigInt(item.licenseTermsId),\n          licensingConfig: validateLicenseConfig(item.licensingConfig)\n        };\n      });\n    }\n  }]);\n}();\n\nvar IPAccountClient = /*#__PURE__*/function () {\n  function IPAccountClient(rpcClient, wallet, chainId) {\n    _classCallCheck(this, IPAccountClient);\n    this.wallet = wallet;\n    this.rpcClient = rpcClient;\n    this.chainId = chainId;\n    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet);\n    this.erc20Client = new Erc20Client(rpcClient, wallet);\n  }\n\n  /**\n   * Executes a transaction from the IP Account.\n   */\n  return _createClass(IPAccountClient, [{\n    key: \"execute\",\n    value: (function () {\n      var _execute = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request) {\n        var _request$txOptions, ipAccountClient, req, txHash, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(request.ipId));\n              req = {\n                to: request.to,\n                value: BigInt(0),\n                data: request.data\n              };\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context.n = 1;\n                break;\n              }\n              return _context.a(2, {\n                encodedTxData: ipAccountClient.executeEncode(_objectSpread2(_objectSpread2({}, req), {}, {\n                  operation: 0\n                }))\n              });\n            case 1:\n              _context.n = 2;\n              return ipAccountClient.execute(_objectSpread2(_objectSpread2({}, req), {}, {\n                operation: 0\n              }));\n            case 2:\n              txHash = _context.v;\n              _context.n = 3;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 3:\n              return _context.a(2, {\n                txHash: txHash\n              });\n            case 4:\n              _context.n = 6;\n              break;\n            case 5:\n              _context.p = 5;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to execute the IP Account transaction\"));\n            case 6:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n    /**\n     * Executes a transaction from the IP Account with a signature.\n     */\n    )\n  }, {\n    key: \"executeWithSig\",\n    value: (function () {\n      var _executeWithSig = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request) {\n        var _request$txOptions2, ipAccountClient, req, txHash, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              _context2.p = 0;\n              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(request.ipId));\n              req = {\n                to: validateAddress(request.to),\n                value: BigInt(request.value || 0),\n                data: request.data,\n                signer: validateAddress(request.signer),\n                deadline: BigInt(request.deadline),\n                signature: request.signature\n              };\n              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {\n                _context2.n = 1;\n                break;\n              }\n              return _context2.a(2, {\n                encodedTxData: ipAccountClient.executeWithSigEncode(req)\n              });\n            case 1:\n              _context2.n = 2;\n              return ipAccountClient.executeWithSig(req);\n            case 2:\n              txHash = _context2.v;\n              _context2.n = 3;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 3:\n              return _context2.a(2, {\n                txHash: txHash\n              });\n            case 4:\n              _context2.n = 6;\n              break;\n            case 5:\n              _context2.p = 5;\n              _t2 = _context2.v;\n              return _context2.a(2, handleError(_t2, \"Failed to execute with signature for the IP Account transaction\"));\n            case 6:\n              return _context2.a(2);\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n      function executeWithSig(_x2) {\n        return _executeWithSig.apply(this, arguments);\n      }\n      return executeWithSig;\n    }()\n    /**\n     * Returns the IPAccount's internal nonce for transaction ordering.\n     */\n    )\n  }, {\n    key: \"getIpAccountNonce\",\n    value: (function () {\n      var _getIpAccountNonce = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(ipId) {\n        var ipAccount, _yield$ipAccount$stat, state, _t3;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(ipId));\n              _context3.n = 1;\n              return ipAccount.state();\n            case 1:\n              _yield$ipAccount$stat = _context3.v;\n              state = _yield$ipAccount$stat.result;\n              return _context3.a(2, state);\n            case 2:\n              _context3.p = 2;\n              _t3 = _context3.v;\n              return _context3.a(2, handleError(_t3, \"Failed to get the IP Account nonce\"));\n          }\n        }, _callee3, this, [[0, 2]]);\n      }));\n      function getIpAccountNonce(_x3) {\n        return _getIpAccountNonce.apply(this, arguments);\n      }\n      return getIpAccountNonce;\n    }()\n    /**\n     * Returns the identifier of the non-fungible token which owns the account\n     */\n    )\n  }, {\n    key: \"getToken\",\n    value: (function () {\n      var _getToken = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(ipId) {\n        var ipAccount, _yield$ipAccount$toke, _yield$ipAccount$toke2, chainId, tokenContract, tokenId, _t4;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              _context4.p = 0;\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(ipId));\n              _context4.n = 1;\n              return ipAccount.token();\n            case 1:\n              _yield$ipAccount$toke = _context4.v;\n              _yield$ipAccount$toke2 = _slicedToArray(_yield$ipAccount$toke, 3);\n              chainId = _yield$ipAccount$toke2[0];\n              tokenContract = _yield$ipAccount$toke2[1];\n              tokenId = _yield$ipAccount$toke2[2];\n              return _context4.a(2, {\n                chainId: chainId,\n                tokenContract: tokenContract,\n                tokenId: tokenId\n              });\n            case 2:\n              _context4.p = 2;\n              _t4 = _context4.v;\n              return _context4.a(2, handleError(_t4, \"Failed to get the token\"));\n          }\n        }, _callee4, this, [[0, 2]]);\n      }));\n      function getToken(_x4) {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }()\n    /**\n     * Sets the metadataURI for an IP asset.\n     */\n    )\n  }, {\n    key: \"setIpMetadata\",\n    value: (function () {\n      var _setIpMetadata = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(_ref) {\n        var ipId, metadataURI, metadataHash, txOptions, data, _yield$this$execute, txHash, _t5;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              ipId = _ref.ipId, metadataURI = _ref.metadataURI, metadataHash = _ref.metadataHash, txOptions = _ref.txOptions;\n              _context5.p = 1;\n              data = (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: coreMetadataModuleAbi,\n                functionName: \"setMetadataURI\",\n                args: [validateAddress(ipId), metadataURI, metadataHash]\n              });\n              _context5.n = 2;\n              return this.execute({\n                ipId: ipId,\n                to: coreMetadataModuleAddress[this.chainId],\n                data: data,\n                value: 0,\n                txOptions: _objectSpread2(_objectSpread2({}, txOptions), {}, {\n                  encodedTxDataOnly: false\n                })\n              });\n            case 2:\n              _yield$this$execute = _context5.v;\n              txHash = _yield$this$execute.txHash;\n              return _context5.a(2, txHash);\n            case 3:\n              _context5.p = 3;\n              _t5 = _context5.v;\n              return _context5.a(2, handleError(_t5, \"Failed to set the IP metadata\"));\n          }\n        }, _callee5, this, [[1, 3]]);\n      }));\n      function setIpMetadata(_x5) {\n        return _setIpMetadata.apply(this, arguments);\n      }\n      return setIpMetadata;\n    }()\n    /**\n     * Transfers ERC20 tokens from the IP Account to the target address.\n     */\n    )\n  }, {\n    key: \"transferErc20\",\n    value: (function () {\n      var _transferErc = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(_ref2) {\n        var _this = this;\n        var ipId, tokens, txOptions, ipAccount, calls, txHash, _t6;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.p = _context6.n) {\n            case 0:\n              ipId = _ref2.ipId, tokens = _ref2.tokens, txOptions = _ref2.txOptions;\n              _context6.p = 1;\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(ipId));\n              calls = tokens.map(function (_ref3) {\n                var token = _ref3.address,\n                  target = _ref3.target,\n                  amount = _ref3.amount;\n                var encodedData;\n                if (validateAddress(token) === WIP_TOKEN_ADDRESS) {\n                  encodedData = _this.wrappedIpClient.transferEncode({\n                    to: validateAddress(target),\n                    amount: BigInt(amount)\n                  }).data;\n                } else {\n                  encodedData = _this.erc20Client.transferEncode({\n                    to: validateAddress(target),\n                    value: BigInt(amount)\n                  }).data;\n                }\n                return {\n                  target: token,\n                  data: encodedData,\n                  value: 0n\n                };\n              });\n              _context6.n = 2;\n              return ipAccount.executeBatch({\n                calls: calls,\n                operation: 0\n              });\n            case 2:\n              txHash = _context6.v;\n              return _context6.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 3:\n              _context6.p = 3;\n              _t6 = _context6.v;\n              return _context6.a(2, handleError(_t6, \"Failed to transfer Erc20\"));\n          }\n        }, _callee6, this, [[1, 3]]);\n      }));\n      function transferErc20(_x6) {\n        return _transferErc.apply(this, arguments);\n      }\n      return transferErc20;\n    }())\n  }]);\n}();\n\nvar SignatureMethodType = /*#__PURE__*/function (SignatureMethodType) {\n  SignatureMethodType[\"REGISTER_IP_AND_MAKE_DERIVATIVE_AND_DEPLOY_ROYALTY_VAULT\"] = \"registerIpAndMakeDerivativeAndDeployRoyaltyVault\";\n  SignatureMethodType[\"DISTRIBUTE_ROYALTY_TOKENS\"] = \"distributeRoyaltyTokens\";\n  SignatureMethodType[\"REGISTER_DERIVATIVE_IP\"] = \"registerDerivativeIp\";\n  SignatureMethodType[\"REGISTER_IP_AND_ATTACH_PIL_TERMS_AND_DEPLOY_ROYALTY_VAULT\"] = \"registerIpAndAttachPilTermsAndDeployRoyaltyVault\";\n  SignatureMethodType[\"REGISTER_IP_AND_ATTACH_PIL_TERMS\"] = \"registerIpAndAttachPilTerms\";\n  SignatureMethodType[\"REGISTER_IP_AND_MAKE_DERIVATIVE_WITH_LICENSE_TOKENS\"] = \"registerIpAndMakeDerivativeWithLicenseTokens\";\n  SignatureMethodType[\"REGISTER_PIL_TERMS_AND_ATTACH\"] = \"registerPilTermsAndAttach\";\n  SignatureMethodType[\"REGISTER\"] = \"register\";\n  SignatureMethodType[\"BATCH_REGISTER_DERIVATIVE\"] = \"batchRegisterDerivative\";\n  return SignatureMethodType;\n}({});\n\n/**\n * Predict the minting license fee.\n *\n * @remarks\n * The method passes `walletAddress` to the `readContract` function so the smart contract can verify\n * if the wallet is the owner of the IP ID. The wallet address is required when using the default license terms ID.\n */\nvar predictMintingLicenseFee = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(_ref) {\n    var predictMintingFeeRequest, rpcClient, chainId, walletAddress, result;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          predictMintingFeeRequest = _ref.predictMintingFeeRequest, rpcClient = _ref.rpcClient, chainId = _ref.chainId, walletAddress = _ref.walletAddress;\n          _context.n = 1;\n          return rpcClient.readContract({\n            abi: licensingModuleAbi,\n            address: licensingModuleAddress[chainId],\n            functionName: \"predictMintingLicenseFee\",\n            args: [predictMintingFeeRequest.licensorIpId, predictMintingFeeRequest.licenseTemplate, predictMintingFeeRequest.licenseTermsId, predictMintingFeeRequest.amount, predictMintingFeeRequest.receiver, predictMintingFeeRequest.royaltyContext],\n            account: walletAddress\n          });\n        case 1:\n          result = _context.v;\n          return _context.a(2, {\n            currencyToken: result[0],\n            tokenAmount: result[1]\n          });\n      }\n    }, _callee);\n  }));\n  return function predictMintingLicenseFee(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar calculateDerivativeMintingFee = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(_ref3) {\n    var derivData, rpcClient, chainId, wallet, sender, walletAddress, totalDerivativeMintingFee, i, derivativeMintingFee;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          derivData = _ref3.derivData, rpcClient = _ref3.rpcClient, chainId = _ref3.chainId, wallet = _ref3.wallet, sender = _ref3.sender;\n          walletAddress = sender || wallet.account.address;\n          totalDerivativeMintingFee = 0n;\n          i = 0;\n        case 1:\n          if (!(i < derivData.parentIpIds.length)) {\n            _context2.n = 4;\n            break;\n          }\n          _context2.n = 2;\n          return calculateLicenseWipMintFee({\n            predictMintingFeeRequest: {\n              licensorIpId: derivData.parentIpIds[i],\n              licenseTemplate: derivData.licenseTemplate,\n              licenseTermsId: derivData.licenseTermsIds[i],\n              receiver: walletAddress,\n              amount: 1n,\n              royaltyContext: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress\n            },\n            rpcClient: rpcClient,\n            chainId: chainId,\n            walletAddress: walletAddress\n          });\n        case 2:\n          derivativeMintingFee = _context2.v;\n          totalDerivativeMintingFee += derivativeMintingFee;\n        case 3:\n          i++;\n          _context2.n = 1;\n          break;\n        case 4:\n          return _context2.a(2, totalDerivativeMintingFee);\n      }\n    }, _callee2);\n  }));\n  return function calculateDerivativeMintingFee(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar calculateLicenseWipMintFee = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(_ref5) {\n    var predictMintingFeeRequest, rpcClient, chainId, walletAddress, fee;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.n) {\n        case 0:\n          predictMintingFeeRequest = _ref5.predictMintingFeeRequest, rpcClient = _ref5.rpcClient, chainId = _ref5.chainId, walletAddress = _ref5.walletAddress;\n          _context3.n = 1;\n          return predictMintingLicenseFee({\n            predictMintingFeeRequest: predictMintingFeeRequest,\n            rpcClient: rpcClient,\n            chainId: chainId,\n            walletAddress: walletAddress\n          });\n        case 1:\n          fee = _context3.v;\n          if (!(fee.currencyToken !== WIP_TOKEN_ADDRESS)) {\n            _context3.n = 2;\n            break;\n          }\n          return _context3.a(2, 0n);\n        case 2:\n          return _context3.a(2, fee.tokenAmount);\n      }\n    }, _callee3);\n  }));\n  return function calculateLicenseWipMintFee(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar calculateSPGWipMintFee = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(spgNftClient) {\n    var token;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          _context4.n = 1;\n          return spgNftClient.mintFeeToken();\n        case 1:\n          token = _context4.v;\n          if (!(token !== WIP_TOKEN_ADDRESS)) {\n            _context4.n = 2;\n            break;\n          }\n          return _context4.a(2, 0n);\n        case 2:\n          _context4.n = 3;\n          return spgNftClient.mintFee();\n        case 3:\n          return _context4.a(2, _context4.v);\n      }\n    }, _callee4);\n  }));\n  return function calculateSPGWipMintFee(_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar generateOperationSignature = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(_ref) {\n    var deadline, ipIdAddress, methodType, ipRoyaltyVault, totalAmount, state, encodeData, wallet, chainId, baseConfig, royaltyTokenDistributionWorkflowsAddr, coreMetadataModuleAddr, licensingModuleAddr, derivativeWorkflowsAddr, licenseAttachmentWorkflowsAddr, registrationWorkflowsAddr, signatureConfigs, signatureRequest, _yield$getSignature, signature, _yield$getPermissionS, _signature;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          deadline = _ref.deadline, ipIdAddress = _ref.ipIdAddress, methodType = _ref.methodType, ipRoyaltyVault = _ref.ipRoyaltyVault, totalAmount = _ref.totalAmount, state = _ref.state, encodeData = _ref.encodeData, wallet = _ref.wallet, chainId = _ref.chainId;\n          baseConfig = {\n            ipId: ipIdAddress,\n            deadline: deadline,\n            state: (0,viem__WEBPACK_IMPORTED_MODULE_14__.toHex)(0, {\n              size: 32\n            }),\n            wallet: wallet,\n            chainId: chain[chainId]\n          }; // Validate required parameters based on method type\n          if (!(methodType === SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS && (!ipRoyaltyVault || !state || !totalAmount || !encodeData))) {\n            _context.n = 1;\n            break;\n          }\n          throw new Error(\"ipRoyaltyVault, state, totalAmount, and encodeData are required for distributing royalty tokens.\");\n        case 1:\n          if (!(methodType === SignatureMethodType.REGISTER_PIL_TERMS_AND_ATTACH && !state)) {\n            _context.n = 2;\n            break;\n          }\n          throw new Error(\"State is required for registering PIL terms and attaching.\");\n        case 2:\n          if (!(methodType === SignatureMethodType.BATCH_REGISTER_DERIVATIVE && (!state || !encodeData))) {\n            _context.n = 3;\n            break;\n          }\n          throw new Error(\"State and encodeData are required for batch registering derivative.\");\n        case 3:\n          // Get contract addresses for the current chain\n          royaltyTokenDistributionWorkflowsAddr = royaltyTokenDistributionWorkflowsAddress[chainId];\n          coreMetadataModuleAddr = coreMetadataModuleAddress[chainId];\n          licensingModuleAddr = licensingModuleAddress[chainId];\n          derivativeWorkflowsAddr = derivativeWorkflowsAddress[chainId];\n          licenseAttachmentWorkflowsAddr = licenseAttachmentWorkflowsAddress[chainId];\n          registrationWorkflowsAddr = registrationWorkflowsAddress[chainId]; // Define signature configurations for each method type\n          signatureConfigs = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_AND_DEPLOY_ROYALTY_VAULT, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            permissions: [{\n              ipId: ipIdAddress,\n              signer: royaltyTokenDistributionWorkflowsAddr,\n              to: coreMetadataModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(coreMetadataModuleAbi, \"setAll\")\n            }, {\n              ipId: ipIdAddress,\n              signer: royaltyTokenDistributionWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"registerDerivative\")\n            }]\n          })), SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            verifyingContract: ipIdAddress,\n            deadline: deadline,\n            state: state,\n            to: ipRoyaltyVault,\n            encodeData: encodeData\n          })), SignatureMethodType.REGISTER_DERIVATIVE_IP, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            permissions: [{\n              ipId: ipIdAddress,\n              signer: derivativeWorkflowsAddr,\n              to: coreMetadataModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(coreMetadataModuleAbi, \"setAll\")\n            }, {\n              ipId: ipIdAddress,\n              signer: derivativeWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"registerDerivative\")\n            }]\n          })), SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS_AND_DEPLOY_ROYALTY_VAULT, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            permissions: [{\n              ipId: ipIdAddress,\n              signer: royaltyTokenDistributionWorkflowsAddr,\n              to: coreMetadataModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(coreMetadataModuleAbi, \"setAll\")\n            }, {\n              ipId: ipIdAddress,\n              signer: royaltyTokenDistributionWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"attachLicenseTerms\")\n            }, {\n              ipId: ipIdAddress,\n              signer: royaltyTokenDistributionWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"setLicensingConfig\")\n            }]\n          })), SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            permissions: [{\n              ipId: ipIdAddress,\n              signer: licenseAttachmentWorkflowsAddr,\n              to: coreMetadataModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(coreMetadataModuleAbi, \"setAll\")\n            }, {\n              ipId: ipIdAddress,\n              signer: licenseAttachmentWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"attachLicenseTerms\")\n            }, {\n              ipId: ipIdAddress,\n              signer: licenseAttachmentWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"setLicensingConfig\")\n            }]\n          })), SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_WITH_LICENSE_TOKENS, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            permissions: [{\n              ipId: ipIdAddress,\n              signer: derivativeWorkflowsAddr,\n              to: coreMetadataModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(coreMetadataModuleAbi, \"setAll\")\n            }, {\n              ipId: ipIdAddress,\n              signer: derivativeWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"registerDerivativeWithLicenseTokens\")\n            }]\n          })), SignatureMethodType.REGISTER_PIL_TERMS_AND_ATTACH, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            state: state,\n            permissions: [{\n              ipId: ipIdAddress,\n              signer: licenseAttachmentWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"attachLicenseTerms\")\n            }, {\n              ipId: ipIdAddress,\n              signer: licenseAttachmentWorkflowsAddr,\n              to: licensingModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(licensingModuleAbi, \"setLicensingConfig\")\n            }]\n          })), SignatureMethodType.REGISTER, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            permissions: [{\n              ipId: ipIdAddress,\n              signer: registrationWorkflowsAddr,\n              to: coreMetadataModuleAddr,\n              permission: AccessPermission.ALLOW,\n              func: getFunctionSignature(coreMetadataModuleAbi, \"setAll\")\n            }]\n          })), SignatureMethodType.BATCH_REGISTER_DERIVATIVE, _objectSpread2(_objectSpread2({}, baseConfig), {}, {\n            state: state,\n            to: licensingModuleAddr,\n            encodeData: encodeData,\n            verifyingContract: ipIdAddress\n          })); // Get the appropriate signature configuration for the requested method type\n          signatureRequest = signatureConfigs[methodType]; // Generate the appropriate signature type based on the method\n          if (!((methodType === SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS || methodType === SignatureMethodType.BATCH_REGISTER_DERIVATIVE) && signatureRequest)) {\n            _context.n = 5;\n            break;\n          }\n          _context.n = 4;\n          return getSignature(signatureRequest);\n        case 4:\n          _yield$getSignature = _context.v;\n          signature = _yield$getSignature.signature;\n          return _context.a(2, signature);\n        case 5:\n          _context.n = 6;\n          return getPermissionSignature(signatureRequest);\n        case 6:\n          _yield$getPermissionS = _context.v;\n          _signature = _yield$getPermissionS.signature;\n          return _context.a(2, _signature);\n        case 7:\n          return _context.a(2);\n      }\n    }, _callee);\n  }));\n  return function generateOperationSignature(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _PILFlavor;\nvar PIL_URIS = {\n  NCSR: \"https://github.com/piplabs/pil-document/blob/998c13e6ee1d04eb817aefd1fe16dfe8be3cd7a2/off-chain-terms/NCSR.json\",\n  COMMERCIAL_USE: \"https://github.com/piplabs/pil-document/blob/9a1f803fcf8101a8a78f1dcc929e6014e144ab56/off-chain-terms/CommercialUse.json\",\n  COMMERCIAL_REMIX: \"https://github.com/piplabs/pil-document/blob/ad67bb632a310d2557f8abcccd428e4c9c798db1/off-chain-terms/CommercialRemix.json\",\n  CC_BY: \"https://github.com/piplabs/pil-document/blob/998c13e6ee1d04eb817aefd1fe16dfe8be3cd7a2/off-chain-terms/CC-BY.json\"\n};\nvar COMMON_DEFAULTS = {\n  transferable: true,\n  royaltyPolicy: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n  defaultMintingFee: 0n,\n  expiration: 0n,\n  commercializerChecker: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n  commercializerCheckerData: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n  commercialRevShare: 0,\n  commercialRevCeiling: 0n,\n  derivativeRevCeiling: 0n,\n  currency: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress\n};\n\n/**\n * Pre-configured Programmable IP License (PIL) flavors for ease of use.\n *\n * The PIL is highly configurable, but these pre-configured license terms (flavors)\n * are the most popular options that cover common use cases.\n *\n * @see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors | PIL Flavors Documentation}\n *\n * @example\n * ```typescript\n * // Create a commercial use license\n * const commercialLicense = PILFlavor.commercialUse({\n *   defaultMintingFee: 1000000000000000000n, // 1 IP minting fee\n *   currencyToken: \"0x1234...\", // currency token\n *   royaltyPolicy: \"LAP\"  // royalty policy\n * });\n *\n * // Create a non-commercial social remixing license\n * const remixLicense = PILFlavor.nonCommercialSocialRemixing();\n * ```\n */\nvar PILFlavor = /*#__PURE__*/_createClass(function PILFlavor() {\n  _classCallCheck(this, PILFlavor);\n});\n_PILFlavor = PILFlavor;\n_defineProperty(PILFlavor, \"_nonComSocialRemixingPIL\", _objectSpread2(_objectSpread2({}, COMMON_DEFAULTS), {}, {\n  commercialUse: false,\n  commercialAttribution: false,\n  derivativesAllowed: true,\n  derivativesAttribution: true,\n  derivativesApproval: false,\n  derivativesReciprocal: true,\n  uri: PIL_URIS.NCSR\n}));\n_defineProperty(PILFlavor, \"_commercialUse\", _objectSpread2(_objectSpread2({}, COMMON_DEFAULTS), {}, {\n  commercialUse: true,\n  commercialAttribution: true,\n  derivativesAllowed: false,\n  derivativesAttribution: false,\n  derivativesApproval: false,\n  derivativesReciprocal: false,\n  uri: PIL_URIS.COMMERCIAL_USE\n}));\n_defineProperty(PILFlavor, \"_commercialRemix\", _objectSpread2(_objectSpread2({}, COMMON_DEFAULTS), {}, {\n  commercialUse: true,\n  commercialAttribution: true,\n  derivativesAllowed: true,\n  derivativesAttribution: true,\n  derivativesApproval: false,\n  derivativesReciprocal: true,\n  uri: PIL_URIS.COMMERCIAL_REMIX\n}));\n_defineProperty(PILFlavor, \"_creativeCommonsAttribution\", _objectSpread2(_objectSpread2({}, COMMON_DEFAULTS), {}, {\n  commercialUse: true,\n  commercialAttribution: true,\n  derivativesAllowed: true,\n  derivativesAttribution: true,\n  derivativesApproval: false,\n  derivativesReciprocal: true,\n  uri: PIL_URIS.CC_BY\n}));\n/**\n * Gets the values to create a Non-Commercial Social Remixing license terms flavor.\n * @see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#non-commercial-social-remixing | Non Commercial Social Remixing}\n */\n_defineProperty(PILFlavor, \"nonCommercialSocialRemixing\", function (request) {\n  return _PILFlavor.validateLicenseTerms(_objectSpread2(_objectSpread2({}, _PILFlavor._nonComSocialRemixingPIL), request === null || request === void 0 ? void 0 : request.override), request === null || request === void 0 ? void 0 : request.chainId);\n});\n/**\n * Gets the values to create a Commercial Use license terms flavor.\n * @see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#commercial-use | Commercial Use}\n */\n_defineProperty(PILFlavor, \"commercialUse\", function (_ref) {\n  var defaultMintingFee = _ref.defaultMintingFee,\n    currency = _ref.currency,\n    royaltyPolicy = _ref.royaltyPolicy,\n    chainId = _ref.chainId,\n    override = _ref.override;\n  return _PILFlavor.validateLicenseTerms(_objectSpread2(_objectSpread2({}, _PILFlavor._commercialUse), {}, {\n    defaultMintingFee: defaultMintingFee,\n    currency: currency,\n    royaltyPolicy: royaltyPolicy\n  }, override), chainId);\n});\n/**\n * Gets the values to create a Commercial Remixing license terms flavor.\n * @see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#commercial-remix | Commercial Remix}\n */\n_defineProperty(PILFlavor, \"commercialRemix\", function (_ref2) {\n  var defaultMintingFee = _ref2.defaultMintingFee,\n    royaltyPolicy = _ref2.royaltyPolicy,\n    currency = _ref2.currency,\n    commercialRevShare = _ref2.commercialRevShare,\n    chainId = _ref2.chainId,\n    override = _ref2.override;\n  return _PILFlavor.validateLicenseTerms(_objectSpread2(_objectSpread2({}, _PILFlavor._commercialRemix), {}, {\n    commercialRevShare: commercialRevShare,\n    defaultMintingFee: defaultMintingFee,\n    currency: currency,\n    royaltyPolicy: royaltyPolicy\n  }, override), chainId);\n});\n/**\n * Gets the values to create a Creative Commons Attribution (CC-BY) license terms flavor.\n * @see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#creative-commons-attribution | Creative Commons Attribution}\n */\n_defineProperty(PILFlavor, \"creativeCommonsAttribution\", function (_ref3) {\n  var royaltyPolicy = _ref3.royaltyPolicy,\n    currency = _ref3.currency,\n    chainId = _ref3.chainId,\n    override = _ref3.override;\n  return _PILFlavor.validateLicenseTerms(_objectSpread2(_objectSpread2({}, _PILFlavor._creativeCommonsAttribution), {}, {\n    currency: currency,\n    royaltyPolicy: royaltyPolicy\n  }, override), chainId);\n});\n_defineProperty(PILFlavor, \"validateLicenseTerms\", function (params, chainId) {\n  var normalized = _objectSpread2(_objectSpread2({}, params), {}, {\n    defaultMintingFee: BigInt(params.defaultMintingFee),\n    expiration: BigInt(params.expiration),\n    commercialRevCeiling: BigInt(params.commercialRevCeiling),\n    derivativeRevCeiling: BigInt(params.derivativeRevCeiling),\n    royaltyPolicy: royaltyPolicyInputToAddress(params.royaltyPolicy, chainId)\n  });\n  var royaltyPolicy = normalized.royaltyPolicy,\n    currency = normalized.currency;\n\n  // Validate royalty policy and currency relationship\n  if (royaltyPolicy !== viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress && currency === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress) {\n    throw new PILFlavorError(\"Royalty policy requires currency token.\");\n  }\n\n  // Validate defaultMintingFee\n  if (normalized.defaultMintingFee < 0n) {\n    throw new PILFlavorError(\"DefaultMintingFee should be greater than or equal to 0.\");\n  }\n  if (normalized.defaultMintingFee > 0n && normalized.royaltyPolicy === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress) {\n    throw new PILFlavorError(\"Royalty policy is required when defaultMintingFee is greater than 0.\");\n  }\n\n  // Validate commercial use and derivatives\n  _PILFlavor.verifyCommercialUse(normalized);\n  _PILFlavor.verifyDerivatives(normalized);\n\n  // Validate and normalize commercialRevShare\n  normalized.commercialRevShare = getRevenueShare(normalized.commercialRevShare);\n  return normalized;\n});\n_defineProperty(PILFlavor, \"verifyCommercialUse\", function (terms) {\n  if (!terms.commercialUse) {\n    var commercialFields = [{\n      field: \"commercialAttribution\",\n      value: terms.commercialAttribution\n    }, {\n      field: \"commercializerChecker\",\n      value: terms.commercializerChecker !== viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress\n    }, {\n      field: \"commercialRevShare\",\n      value: terms.commercialRevShare > 0\n    }, {\n      field: \"commercialRevCeiling\",\n      value: terms.commercialRevCeiling > 0n\n    }, {\n      field: \"derivativeRevCeiling\",\n      value: terms.derivativeRevCeiling > 0n\n    }, {\n      field: \"royaltyPolicy\",\n      value: terms.royaltyPolicy !== viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress\n    }];\n    for (var _i = 0, _commercialFields = commercialFields; _i < _commercialFields.length; _i++) {\n      var _commercialFields$_i = _commercialFields[_i],\n        field = _commercialFields$_i.field,\n        value = _commercialFields$_i.value;\n      if (value) {\n        throw new PILFlavorError(\"Cannot add \".concat(field, \" when commercial use is disabled.\"));\n      }\n    }\n  } else {\n    if (terms.royaltyPolicy === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress) {\n      throw new PILFlavorError(\"Royalty policy is required when commercial use is enabled.\");\n    }\n  }\n});\n_defineProperty(PILFlavor, \"verifyDerivatives\", function (terms) {\n  if (!terms.derivativesAllowed) {\n    var derivativeFields = [{\n      field: \"derivativesAttribution\",\n      value: terms.derivativesAttribution\n    }, {\n      field: \"derivativesApproval\",\n      value: terms.derivativesApproval\n    }, {\n      field: \"derivativesReciprocal\",\n      value: terms.derivativesReciprocal\n    }, {\n      field: \"derivativeRevCeiling\",\n      value: terms.derivativeRevCeiling > 0n\n    }];\n    for (var _i2 = 0, _derivativeFields = derivativeFields; _i2 < _derivativeFields.length; _i2++) {\n      var _derivativeFields$_i = _derivativeFields[_i2],\n        field = _derivativeFields$_i.field,\n        value = _derivativeFields$_i.value;\n      if (value) {\n        throw new PILFlavorError(\"Cannot add \".concat(field, \" when derivative use is disabled.\"));\n      }\n    }\n  }\n});\n\nfunction _regeneratorValues(e) {\n  if (null != e) {\n    var t = e[\"function\" == typeof Symbol && Symbol.iterator || \"@@iterator\"],\n      r = 0;\n    if (t) return t.call(e);\n    if (\"function\" == typeof e.next) return e;\n    if (!isNaN(e.length)) return {\n      next: function () {\n        return e && r >= e.length && (e = void 0), {\n          value: e && e[r++],\n          done: !e\n        };\n      }\n    };\n  }\n  throw new TypeError(typeof e + \" is not iterable\");\n}\n\nfunction _regeneratorKeys(e) {\n  var n = Object(e),\n    r = [];\n  for (var t in n) r.unshift(t);\n  return function e() {\n    for (; r.length;) if ((t = r.pop()) in n) return e.value = t, e.done = false, e;\n    return e.done = true, e;\n  };\n}\n\nvar getPublicMinting = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(spgNftContract, rpcClient) {\n    var spgNftContractImpl;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          spgNftContractImpl = new SpgnftImplReadOnlyClient(rpcClient, spgNftContract);\n          _context.n = 1;\n          return spgNftContractImpl.publicMinting();\n        case 1:\n          return _context.a(2, _context.v);\n      }\n    }, _callee);\n  }));\n  return function getPublicMinting(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar validateLicenseTermsData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(licenseTermsData, rpcClient, chainId) {\n    var licenseTerms, processedLicenseTermsData, maxLicenseTokens, i, licenseTerm, royaltyModuleReadOnlyClient, isWhitelistedArbitrationPolicy, isWhitelistedRoyaltyToken, licensingConfig, maxLicenseTokensValue;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          licenseTerms = [];\n          processedLicenseTermsData = [];\n          maxLicenseTokens = [];\n          i = 0;\n        case 1:\n          if (!(i < licenseTermsData.length)) {\n            _context2.n = 10;\n            break;\n          }\n          licenseTerm = PILFlavor.validateLicenseTerms(licenseTermsData[i].terms, chainId);\n          royaltyModuleReadOnlyClient = new RoyaltyModuleReadOnlyClient(rpcClient);\n          if (!(validateAddress(licenseTerm.royaltyPolicy) !== viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress)) {\n            _context2.n = 3;\n            break;\n          }\n          _context2.n = 2;\n          return royaltyModuleReadOnlyClient.isWhitelistedRoyaltyPolicy({\n            royaltyPolicy: licenseTerm.royaltyPolicy\n          });\n        case 2:\n          isWhitelistedArbitrationPolicy = _context2.v;\n          if (isWhitelistedArbitrationPolicy) {\n            _context2.n = 3;\n            break;\n          }\n          throw new Error(\"The royalty policy \".concat(licenseTerm.royaltyPolicy, \" is not whitelisted.\"));\n        case 3:\n          if (!(validateAddress(licenseTerm.currency) !== viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress)) {\n            _context2.n = 5;\n            break;\n          }\n          _context2.n = 4;\n          return royaltyModuleReadOnlyClient.isWhitelistedRoyaltyToken({\n            token: licenseTerm.currency\n          });\n        case 4:\n          isWhitelistedRoyaltyToken = _context2.v;\n          if (isWhitelistedRoyaltyToken) {\n            _context2.n = 5;\n            break;\n          }\n          throw new Error(\"The currency token \".concat(licenseTerm.currency, \" is not whitelisted.\"));\n        case 5:\n          licensingConfig = validateLicenseConfig(licenseTermsData[i].licensingConfig);\n          if (!(licensingConfig.mintingFee > 0 && licenseTerm.royaltyPolicy === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress)) {\n            _context2.n = 6;\n            break;\n          }\n          throw new Error(\"A royalty policy must be provided when the minting fee is greater than 0.\");\n        case 6:\n          maxLicenseTokensValue = licenseTermsData[i].maxLicenseTokens;\n          if (!(maxLicenseTokensValue !== undefined)) {\n            _context2.n = 8;\n            break;\n          }\n          if (!(maxLicenseTokensValue < 0)) {\n            _context2.n = 7;\n            break;\n          }\n          throw new Error(\"The max license tokens must be greater than or equal to 0.\");\n        case 7:\n          licensingConfig.licensingHook = totalLicenseTokenLimitHookAddress[chainId];\n          maxLicenseTokens[i] = BigInt(maxLicenseTokensValue);\n        case 8:\n          licenseTerms.push(licenseTerm);\n          processedLicenseTermsData.push({\n            terms: licenseTerm,\n            licensingConfig: licensingConfig\n          });\n        case 9:\n          i++;\n          _context2.n = 1;\n          break;\n        case 10:\n          return _context2.a(2, {\n            licenseTerms: licenseTerms,\n            licenseTermsData: processedLicenseTermsData,\n            maxLicenseTokens: maxLicenseTokens\n          });\n      }\n    }, _callee2);\n  }));\n  return function validateLicenseTermsData(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getRoyaltyShares = function getRoyaltyShares(royaltyShares) {\n  var actualTotal = 0;\n  var sum = 0;\n  var shares = royaltyShares.map(function (share) {\n    if (share.percentage <= 0) {\n      throw new Error(\"The percentage of the royalty shares must be greater than 0.\");\n    }\n    if (share.percentage > 100) {\n      throw new Error(\"The percentage of the royalty shares must be less than or equal to 100.\");\n    }\n    sum += share.percentage;\n    if (sum > 100) {\n      throw new Error(\"The sum of the royalty shares cannot exceeds 100.\");\n    }\n    var value = share.percentage / 100 * royaltySharesTotalSupply;\n    actualTotal += value;\n    return _objectSpread2(_objectSpread2({}, share), {}, {\n      percentage: value\n    });\n  });\n  return {\n    royaltyShares: shares,\n    totalAmount: actualTotal\n  };\n};\nvar validateDerivativeData = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(_ref3) {\n    var derivativeDataInput, rpcClient, wallet, chainId, licenseTemplateAddress, ipAssetRegistryClient, licenseRegistryReadOnlyClient, derivativeData, i, parentId, isParentIpRegistered, isAttachedLicenseTerms, _yield$licenseRegistr, royaltyPercent;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.n) {\n        case 0:\n          derivativeDataInput = _ref3.derivativeDataInput, rpcClient = _ref3.rpcClient, wallet = _ref3.wallet, chainId = _ref3.chainId;\n          licenseTemplateAddress = piLicenseTemplateAddress[chainId];\n          ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);\n          licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);\n          derivativeData = {\n            parentIpIds: derivativeDataInput.parentIpIds,\n            licenseTermsIds: derivativeDataInput.licenseTermsIds.map(function (id) {\n              return BigInt(id);\n            }),\n            licenseTemplate: validateAddress(derivativeDataInput.licenseTemplate || licenseTemplateAddress),\n            royaltyContext: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n            maxMintingFee: BigInt(derivativeDataInput.maxMintingFee || 0),\n            maxRts: Number(derivativeDataInput.maxRts === undefined ? MAX_ROYALTY_TOKEN : derivativeDataInput.maxRts),\n            maxRevenueShare: getRevenueShare(derivativeDataInput.maxRevenueShare === undefined ? 100 : derivativeDataInput.maxRevenueShare, RevShareType.MAX_REVENUE_SHARE)\n          };\n          if (!(derivativeData.parentIpIds.length === 0)) {\n            _context3.n = 1;\n            break;\n          }\n          throw new Error(\"The parent IP IDs must be provided.\");\n        case 1:\n          if (!(derivativeData.licenseTermsIds.length === 0)) {\n            _context3.n = 2;\n            break;\n          }\n          throw new Error(\"The license terms IDs must be provided.\");\n        case 2:\n          if (!(derivativeData.parentIpIds.length !== derivativeData.licenseTermsIds.length)) {\n            _context3.n = 3;\n            break;\n          }\n          throw new Error(\"The number of parent IP IDs must match the number of license terms IDs.\");\n        case 3:\n          if (!(derivativeData.maxMintingFee < 0)) {\n            _context3.n = 4;\n            break;\n          }\n          throw new Error(\"The maxMintingFee must be greater than 0.\");\n        case 4:\n          validateMaxRts(derivativeData.maxRts);\n          i = 0;\n        case 5:\n          if (!(i < derivativeData.parentIpIds.length)) {\n            _context3.n = 12;\n            break;\n          }\n          parentId = derivativeData.parentIpIds[i];\n          _context3.n = 6;\n          return ipAssetRegistryClient.isRegistered({\n            id: validateAddress(parentId)\n          });\n        case 6:\n          isParentIpRegistered = _context3.v;\n          if (isParentIpRegistered) {\n            _context3.n = 7;\n            break;\n          }\n          throw new Error(\"The parent IP with id \".concat(parentId, \" is not registered.\"));\n        case 7:\n          _context3.n = 8;\n          return licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({\n            ipId: parentId,\n            licenseTemplate: derivativeData.licenseTemplate,\n            licenseTermsId: derivativeData.licenseTermsIds[i]\n          });\n        case 8:\n          isAttachedLicenseTerms = _context3.v;\n          if (isAttachedLicenseTerms) {\n            _context3.n = 9;\n            break;\n          }\n          throw new Error(\"License terms id \".concat(derivativeData.licenseTermsIds[i], \" must be attached to the parent ipId \").concat(derivativeData.parentIpIds[i], \" before registering derivative.\"));\n        case 9:\n          _context3.n = 10;\n          return licenseRegistryReadOnlyClient.getRoyaltyPercent({\n            ipId: parentId,\n            licenseTemplate: derivativeData.licenseTemplate,\n            licenseTermsId: derivativeData.licenseTermsIds[i]\n          });\n        case 10:\n          _yield$licenseRegistr = _context3.v;\n          royaltyPercent = _yield$licenseRegistr.royaltyPercent;\n          if (!(derivativeData.maxRevenueShare !== 0 && royaltyPercent > derivativeData.maxRevenueShare)) {\n            _context3.n = 11;\n            break;\n          }\n          throw new Error(\"The royalty percent for the parent IP with id \".concat(parentId, \" is greater than the maximum revenue share \").concat(derivativeData.maxRevenueShare, \".\"));\n        case 11:\n          i++;\n          _context3.n = 5;\n          break;\n        case 12:\n          return _context3.a(2, derivativeData);\n      }\n    }, _callee3);\n  }));\n  return function validateDerivativeData(_x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar validateMaxRts = function validateMaxRts(maxRts) {\n  if (isNaN(maxRts)) {\n    throw new Error(\"The maxRts must be a number.\");\n  }\n  if (maxRts < 0 || maxRts > MAX_ROYALTY_TOKEN) {\n    throw new Error(\"The maxRts must be greater than 0 and less than \".concat(MAX_ROYALTY_TOKEN, \".\"));\n  }\n};\nvar getIpIdAddress = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(_ref5) {\n    var nftContract, tokenId, rpcClient, wallet, chainId, ipAssetRegistryClient, ipId;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          nftContract = _ref5.nftContract, tokenId = _ref5.tokenId, rpcClient = _ref5.rpcClient, wallet = _ref5.wallet, chainId = _ref5.chainId;\n          ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);\n          _context4.n = 1;\n          return ipAssetRegistryClient.ipId({\n            chainId: BigInt(chain[chainId]),\n            tokenContract: validateAddress(nftContract),\n            tokenId: BigInt(tokenId)\n          });\n        case 1:\n          ipId = _context4.v;\n          return _context4.a(2, ipId);\n      }\n    }, _callee4);\n  }));\n  return function getIpIdAddress(_x7) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar getCalculatedDeadline = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(rpcClient, requestDeadline) {\n    var blockTimestamp;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          _context5.n = 1;\n          return rpcClient.getBlock();\n        case 1:\n          blockTimestamp = _context5.v.timestamp;\n          return _context5.a(2, getDeadline(blockTimestamp, requestDeadline));\n      }\n    }, _callee5);\n  }));\n  return function getCalculatedDeadline(_x8, _x9) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar mergeSpenders = function mergeSpenders(previousSpenders, newSpenders) {\n  if (!newSpenders || newSpenders.length === 0) {\n    return previousSpenders;\n  }\n  return newSpenders.reduce(function (acc, spender) {\n    if (!spender || !spender.address) {\n      return acc;\n    }\n    var existingSpender = acc.find(function (s) {\n      return s.address === spender.address;\n    });\n    if (!existingSpender) {\n      acc.push(_objectSpread2(_objectSpread2({}, spender), {}, {\n        amount: spender.amount || 0n\n      }));\n    } else {\n      existingSpender.amount = (existingSpender.amount || 0n) + (spender.amount || 0n);\n    }\n    return acc;\n  }, _toConsumableArray(previousSpenders));\n};\nvar hasMinterRole = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(spgNftContract, rpcClient, walletAddress) {\n    var spgNftContractImpl, minterRole;\n    return _regenerator().w(function (_context6) {\n      while (1) switch (_context6.n) {\n        case 0:\n          spgNftContractImpl = new SpgnftImplReadOnlyClient(rpcClient, spgNftContract);\n          minterRole = (0,viem__WEBPACK_IMPORTED_MODULE_14__.toHex)(1, {\n            size: 32\n          });\n          _context6.n = 1;\n          return spgNftContractImpl.hasRole({\n            role: minterRole,\n            account: walletAddress\n          });\n        case 1:\n          return _context6.a(2, _context6.v);\n      }\n    }, _callee6);\n  }));\n  return function hasMinterRole(_x0, _x1, _x10) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\n/**\n * Aggregates the registration requests for the given workflow responses.\n *\n * This function combines multiple workflow responses into a consolidated request structure,\n * aggregating:\n * - Token spenders and their allowances\n * - Total fees required for all operations\n * - Encoded transaction data\n * - Contract calls to be executed\n *\n * @remarks\n * The function handles two execution modes:\n * 1. If `disableMulticallWhenPossible` is true or a workflow response supports multicall3\n *    (indicated by `isUseMulticall3`), individual contract calls are added to the `contractCall` array.\n * 2. Otherwise, it concatenates all `encodedTxData` and passes them as parameters to the\n *    workflowClient's `multicall` method, optimizing gas usage by batching transactions.\n *\n * This approach allows for flexible transaction handling based on contract capabilities\n * and user preferences.\n */\nvar aggregateTransformIpRegistrationWorkflow = function aggregateTransformIpRegistrationWorkflow(transferWorkflowRequests, multicall3Address, disableMulticallWhenPossible) {\n  var aggregateRegistrationRequest = {};\n  var _iterator = _createForOfIteratorHelper(transferWorkflowRequests),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var _currentRequest$extra;\n      var res = _step.value;\n      var spenders = res.spenders,\n        totalFees = res.totalFees,\n        encodedTxData = res.encodedTxData,\n        workflowClient = res.workflowClient,\n        isUseMulticall3 = res.isUseMulticall3,\n        extraData = res.extraData;\n      var shouldUseMulticall = isUseMulticall3;\n      if (disableMulticallWhenPossible) {\n        shouldUseMulticall = false;\n      }\n      var targetAddress = shouldUseMulticall ? multicall3Address : workflowClient.address;\n      if (!aggregateRegistrationRequest[targetAddress]) {\n        aggregateRegistrationRequest[targetAddress] = {\n          spenders: [],\n          totalFees: 0n,\n          encodedTxData: [],\n          contractCall: [],\n          extraData: []\n        };\n      }\n      var currentRequest = aggregateRegistrationRequest[targetAddress];\n      currentRequest.spenders = mergeSpenders(currentRequest.spenders, spenders || []);\n      currentRequest.totalFees += totalFees || 0n;\n      currentRequest.encodedTxData = currentRequest.encodedTxData.concat(encodedTxData);\n      currentRequest.extraData = (_currentRequest$extra = currentRequest.extraData) === null || _currentRequest$extra === void 0 ? void 0 : _currentRequest$extra.concat(extraData || undefined);\n      if (isUseMulticall3 || disableMulticallWhenPossible) {\n        currentRequest.contractCall = currentRequest.contractCall.concat(res.contractCall);\n      } else {\n        currentRequest.contractCall = [function () {\n          return workflowClient.multicall({\n            data: currentRequest.encodedTxData.map(function (tx) {\n              return tx.data;\n            })\n          });\n        }];\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return aggregateRegistrationRequest;\n};\nvar handleMulticall = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(_ref) {\n    var transferWorkflowRequests, multicall3Address, wipOptions, rpcClient, wallet, walletAddress, aggregateRegistrationRequest, txResponses, _loop2, key, _t2, _t3;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.n) {\n        case 0:\n          transferWorkflowRequests = _ref.transferWorkflowRequests, multicall3Address = _ref.multicall3Address, wipOptions = _ref.wipOptions, rpcClient = _ref.rpcClient, wallet = _ref.wallet, walletAddress = _ref.walletAddress;\n          aggregateRegistrationRequest = aggregateTransformIpRegistrationWorkflow(transferWorkflowRequests, multicall3Address, (wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.useMulticallWhenPossible) === false);\n          txResponses = [];\n          _loop2 = /*#__PURE__*/_regenerator().m(function _loop2() {\n            var _aggregateRegistratio, spenders, totalFees, encodedTxData, contractCall, contractCalls, useMulticallWhenPossible, txResponse;\n            return _regenerator().w(function (_context2) {\n              while (1) switch (_context2.n) {\n                case 0:\n                  _aggregateRegistratio = aggregateRegistrationRequest[key], spenders = _aggregateRegistratio.spenders, totalFees = _aggregateRegistratio.totalFees, encodedTxData = _aggregateRegistratio.encodedTxData, contractCall = _aggregateRegistratio.contractCall;\n                  contractCalls = /*#__PURE__*/function () {\n                    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n                      var txHashes, _iterator2, _step2, call, txHash, _t;\n                      return _regenerator().w(function (_context) {\n                        while (1) switch (_context.p = _context.n) {\n                          case 0:\n                            txHashes = [];\n                            _iterator2 = _createForOfIteratorHelper(contractCall);\n                            _context.p = 1;\n                            _iterator2.s();\n                          case 2:\n                            if ((_step2 = _iterator2.n()).done) {\n                              _context.n = 5;\n                              break;\n                            }\n                            call = _step2.value;\n                            _context.n = 3;\n                            return call();\n                          case 3:\n                            txHash = _context.v;\n                            txHashes.push(txHash);\n                          case 4:\n                            _context.n = 2;\n                            break;\n                          case 5:\n                            _context.n = 7;\n                            break;\n                          case 6:\n                            _context.p = 6;\n                            _t = _context.v;\n                            _iterator2.e(_t);\n                          case 7:\n                            _context.p = 7;\n                            _iterator2.f();\n                            return _context.f(7);\n                          case 8:\n                            return _context.a(2, txHashes);\n                        }\n                      }, _callee, null, [[1, 6, 7, 8]]);\n                    }));\n                    return function contractCalls() {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }();\n                  useMulticallWhenPossible = key === multicall3Address ? true : false;\n                  _context2.n = 1;\n                  return contractCallWithFees({\n                    totalFees: totalFees,\n                    options: {\n                      wipOptions: _objectSpread2(_objectSpread2({}, wipOptions), {}, {\n                        useMulticallWhenPossible: useMulticallWhenPossible\n                      })\n                    },\n                    multicall3Address: multicall3Address,\n                    rpcClient: rpcClient,\n                    tokenSpenders: spenders,\n                    contractCall: contractCalls,\n                    sender: walletAddress,\n                    wallet: wallet,\n                    encodedTxs: encodedTxData\n                  });\n                case 1:\n                  txResponse = _context2.v;\n                  txResponses.push.apply(txResponses, _toConsumableArray(Array.isArray(txResponse) ? txResponse : [txResponse]));\n                case 2:\n                  return _context2.a(2);\n              }\n            }, _loop2);\n          });\n          _t2 = _regeneratorKeys(aggregateRegistrationRequest);\n        case 1:\n          if ((_t3 = _t2()).done) {\n            _context3.n = 3;\n            break;\n          }\n          key = _t3.value;\n          return _context3.d(_regeneratorValues(_loop2()), 2);\n        case 2:\n          _context3.n = 1;\n          break;\n        case 3:\n          return _context3.a(2, {\n            response: txResponses,\n            aggregateRegistrationRequest: aggregateRegistrationRequest\n          });\n      }\n    }, _callee2);\n  }));\n  return function handleMulticall(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * Transforms the registration request to the appropriate format based on workflow type.\n *\n * @remarks\n * This utility function serves as the entry point for processing both `register*` and\n * `mintAndRegister*` workflows. It analyzes the request structure and routes it to the\n * appropriate handler:\n *\n * - For minting + registration workflows (containing `spgNftContract`): Routes to `handleMintAndRegisterRequest`\n * - For registration-only workflows (containing `nftContract` and `tokenId`): Routes to `handleRegisterRequest`\n *\n * Each handler then applies the necessary transformations, validates inputs, calculates fees,\n * generates required signatures, and prepares the transaction data for submission.\n *\n * @throws Error if the request doesn't match any supported workflow pattern\n */\n\nvar transformRegistrationRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(_ref) {\n    var request, rpcClient, wallet, chainId;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          request = _ref.request, rpcClient = _ref.rpcClient, wallet = _ref.wallet, chainId = _ref.chainId;\n          if (!(\"spgNftContract\" in request)) {\n            _context.n = 1;\n            break;\n          }\n          return _context.a(2, handleMintAndRegisterRequest({\n            request: request,\n            rpcClient: rpcClient,\n            wallet: wallet,\n            chainId: chainId\n          }));\n        case 1:\n          if (!(\"nftContract\" in request && \"tokenId\" in request)) {\n            _context.n = 2;\n            break;\n          }\n          return _context.a(2, handleRegisterRequest({\n            request: request,\n            rpcClient: rpcClient,\n            wallet: wallet,\n            chainId: chainId\n          }));\n        case 2:\n          throw new Error(\"Invalid registration request type\");\n        case 3:\n          return _context.a(2);\n      }\n    }, _callee);\n  }));\n  return function transformRegistrationRequest(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * Handles a request for the `register*` contract methods.\n *\n * @remarks\n * This method processes various IP registration workflows including:\n *\n * - {@link registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens} - Registers derivative IP with license terms and royalty distribution\n * - {@link registerIpAndAttachPilTerms} - Registers IP and attaches PIL (Programmable IP License) terms\n * - {@link registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens} - Registers IP with license terms and royalty distribution\n * - {@link registerDerivativeIp} - Registers a derivative work based on existing IP\n * - {@link registerIpAndMakeDerivativeAndDeployRoyaltyVault} - Registers IP, creates derivative, and deploys royalty vault\n *\n * Key features:\n * - Automatically calculates all required license fees\n * - Generates appropriate operation signatures based on workflow type using EIP-712\n * - Does not support `multicall3` integration because the signature signer must be the transaction caller\n * - Uses SPG's native transaction handling for multicall\n * - Validates all input parameters\n */\nvar handleRegisterRequest = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(_ref3) {\n    var request, rpcClient, wallet, chainId, ipIdAddress, baseRequest, calculatedDeadline, royaltyTokenDistributionWorkflowsClient, licenseAttachmentWorkflowsClient, derivativeWorkflowsClient, _yield$validateLicens, licenseTermsData, maxLicenseTokens, requestWithTerms, derivData, totalFees;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          request = _ref3.request, rpcClient = _ref3.rpcClient, wallet = _ref3.wallet, chainId = _ref3.chainId;\n          _context2.n = 1;\n          return getIpIdAddress({\n            nftContract: validateAddress(request.nftContract),\n            tokenId: BigInt(request.tokenId),\n            rpcClient: rpcClient,\n            wallet: wallet,\n            chainId: chainId\n          });\n        case 1:\n          ipIdAddress = _context2.v;\n          baseRequest = {\n            nftContract: validateAddress(request.nftContract),\n            tokenId: BigInt(request.tokenId),\n            ipMetadata: getIpMetadataForWorkflow(request.ipMetadata)\n          };\n          _context2.n = 2;\n          return getCalculatedDeadline(rpcClient, request.deadline);\n        case 2:\n          calculatedDeadline = _context2.v;\n          royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);\n          licenseAttachmentWorkflowsClient = new LicenseAttachmentWorkflowsClient(rpcClient, wallet);\n          derivativeWorkflowsClient = new DerivativeWorkflowsClient(rpcClient, wallet);\n          if (!(\"licenseTermsData\" in request)) {\n            _context2.n = 7;\n            break;\n          }\n          _context2.n = 3;\n          return validateLicenseTermsData(request.licenseTermsData, rpcClient, chainId);\n        case 3:\n          _yield$validateLicens = _context2.v;\n          licenseTermsData = _yield$validateLicens.licenseTermsData;\n          maxLicenseTokens = _yield$validateLicens.maxLicenseTokens;\n          requestWithTerms = _objectSpread2(_objectSpread2({}, baseRequest), {}, {\n            licenseTermsData: licenseTermsData\n          });\n          if (!(\"royaltyShares\" in request)) {\n            _context2.n = 5;\n            break;\n          }\n          _context2.n = 4;\n          return transferRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest({\n            request: requestWithTerms,\n            royaltyTokenDistributionWorkflowsClient: royaltyTokenDistributionWorkflowsClient,\n            chainId: chainId,\n            wallet: wallet,\n            calculatedDeadline: calculatedDeadline,\n            ipIdAddress: ipIdAddress,\n            royaltyShares: request.royaltyShares,\n            maxLicenseTokens: maxLicenseTokens\n          });\n        case 4:\n          return _context2.a(2, _context2.v);\n        case 5:\n          _context2.n = 6;\n          return transferRegisterIpAndAttachPilTermsRequest({\n            request: requestWithTerms,\n            licenseAttachmentWorkflowsClient: licenseAttachmentWorkflowsClient,\n            calculatedDeadline: calculatedDeadline,\n            ipIdAddress: ipIdAddress,\n            wallet: wallet,\n            chainId: chainId,\n            maxLicenseTokens: maxLicenseTokens\n          });\n        case 6:\n          return _context2.a(2, _context2.v);\n        case 7:\n          if (!(\"derivData\" in request)) {\n            _context2.n = 13;\n            break;\n          }\n          _context2.n = 8;\n          return validateDerivativeData({\n            derivativeDataInput: request.derivData,\n            rpcClient: rpcClient,\n            chainId: chainId,\n            wallet: wallet\n          });\n        case 8:\n          derivData = _context2.v;\n          _context2.n = 9;\n          return calculateDerivativeMintingFee({\n            derivData: derivData,\n            rpcClient: rpcClient,\n            chainId: chainId,\n            wallet: wallet\n          });\n        case 9:\n          totalFees = _context2.v;\n          if (!(\"royaltyShares\" in request)) {\n            _context2.n = 11;\n            break;\n          }\n          _context2.n = 10;\n          return transferRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest({\n            request: _objectSpread2(_objectSpread2({}, baseRequest), {}, {\n              derivData: derivData\n            }),\n            calculatedDeadline: calculatedDeadline,\n            ipIdAddress: ipIdAddress,\n            wallet: wallet,\n            chainId: chainId,\n            royaltyTokenDistributionWorkflowsClient: royaltyTokenDistributionWorkflowsClient,\n            totalFees: totalFees,\n            royaltyShares: request.royaltyShares\n          });\n        case 10:\n          return _context2.a(2, _context2.v);\n        case 11:\n          _context2.n = 12;\n          return transferRegisterDerivativeIpRequest({\n            request: _objectSpread2(_objectSpread2({}, baseRequest), {}, {\n              derivData: derivData\n            }),\n            calculatedDeadline: calculatedDeadline,\n            ipIdAddress: ipIdAddress,\n            wallet: wallet,\n            chainId: chainId,\n            derivativeWorkflowsClient: derivativeWorkflowsClient,\n            totalFees: totalFees\n          });\n        case 12:\n          return _context2.a(2, _context2.v);\n        case 13:\n          throw new Error(\"Invalid register request type\");\n        case 14:\n          return _context2.a(2);\n      }\n    }, _callee2);\n  }));\n  return function handleRegisterRequest(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n/**\n * Transforms a request for the `registerDerivativeIp` contract method.\n */\nvar transferRegisterDerivativeIpRequest = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(_ref5) {\n    var request, calculatedDeadline, ipIdAddress, wallet, chainId, derivativeWorkflowsClient, totalFees, signature, transformRequest;\n    return _regenerator().w(function (_context3) {\n      while (1) switch (_context3.n) {\n        case 0:\n          request = _ref5.request, calculatedDeadline = _ref5.calculatedDeadline, ipIdAddress = _ref5.ipIdAddress, wallet = _ref5.wallet, chainId = _ref5.chainId, derivativeWorkflowsClient = _ref5.derivativeWorkflowsClient, totalFees = _ref5.totalFees;\n          _context3.n = 1;\n          return generateOperationSignature({\n            ipIdAddress: ipIdAddress,\n            methodType: SignatureMethodType.REGISTER_DERIVATIVE_IP,\n            deadline: calculatedDeadline,\n            wallet: wallet,\n            chainId: chainId\n          });\n        case 1:\n          signature = _context3.v;\n          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {\n            sigMetadataAndRegister: {\n              signer: wallet.account.address,\n              deadline: calculatedDeadline,\n              signature: signature\n            }\n          });\n          return _context3.a(2, {\n            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n            transformRequest: transformRequest,\n            isUseMulticall3: false,\n            spenders: [{\n              address: derivativeWorkflowsClient.address,\n              amount: totalFees\n            }],\n            totalFees: totalFees,\n            contractCall: function contractCall() {\n              return derivativeWorkflowsClient.registerIpAndMakeDerivative(transformRequest);\n            },\n            workflowClient: derivativeWorkflowsClient,\n            encodedTxData: {\n              to: derivativeWorkflowsClient.address,\n              data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: derivativeWorkflowsAbi,\n                functionName: \"registerIpAndMakeDerivative\",\n                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.derivData, transformRequest.ipMetadata, transformRequest.sigMetadataAndRegister]\n              })\n            }\n          });\n      }\n    }, _callee3);\n  }));\n  return function transferRegisterDerivativeIpRequest(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\n/**\n * Transforms a request for the `registerIpAndAttachPilTermsAndDeployRoyaltyVault` contract method.\n */\nvar transferRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(_ref7) {\n    var request, royaltyTokenDistributionWorkflowsClient, chainId, wallet, calculatedDeadline, ipIdAddress, royaltyShares, maxLicenseTokens, signature, transformRequest;\n    return _regenerator().w(function (_context4) {\n      while (1) switch (_context4.n) {\n        case 0:\n          request = _ref7.request, royaltyTokenDistributionWorkflowsClient = _ref7.royaltyTokenDistributionWorkflowsClient, chainId = _ref7.chainId, wallet = _ref7.wallet, calculatedDeadline = _ref7.calculatedDeadline, ipIdAddress = _ref7.ipIdAddress, royaltyShares = _ref7.royaltyShares, maxLicenseTokens = _ref7.maxLicenseTokens;\n          _context4.n = 1;\n          return generateOperationSignature({\n            ipIdAddress: ipIdAddress,\n            methodType: SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS_AND_DEPLOY_ROYALTY_VAULT,\n            deadline: calculatedDeadline,\n            wallet: wallet,\n            chainId: chainId\n          });\n        case 1:\n          signature = _context4.v;\n          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {\n            sigMetadataAndAttachAndConfig: {\n              signer: wallet.account.address,\n              deadline: calculatedDeadline,\n              signature: signature\n            }\n          });\n          return _context4.a(2, {\n            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n            transformRequest: transformRequest,\n            isUseMulticall3: false,\n            contractCall: function contractCall() {\n              return royaltyTokenDistributionWorkflowsClient.registerIpAndAttachPilTermsAndDeployRoyaltyVault(transformRequest);\n            },\n            workflowClient: royaltyTokenDistributionWorkflowsClient,\n            encodedTxData: {\n              to: royaltyTokenDistributionWorkflowsClient.address,\n              data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: royaltyTokenDistributionWorkflowsAbi,\n                functionName: \"registerIpAndAttachPILTermsAndDeployRoyaltyVault\",\n                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.ipMetadata, transformRequest.licenseTermsData, transformRequest.sigMetadataAndAttachAndConfig]\n              })\n            },\n            extraData: {\n              royaltyShares: royaltyShares,\n              deadline: calculatedDeadline,\n              maxLicenseTokens: maxLicenseTokens,\n              licenseTermsData: request.licenseTermsData\n            }\n          });\n      }\n    }, _callee4);\n  }));\n  return function transferRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest(_x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\n/**\n * Transforms a request for the `registerIpAndAttachPilTerms` contract method.\n */\nvar transferRegisterIpAndAttachPilTermsRequest = /*#__PURE__*/function () {\n  var _ref0 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(_ref9) {\n    var request, licenseAttachmentWorkflowsClient, calculatedDeadline, ipIdAddress, wallet, chainId, maxLicenseTokens, signature, transformRequest;\n    return _regenerator().w(function (_context5) {\n      while (1) switch (_context5.n) {\n        case 0:\n          request = _ref9.request, licenseAttachmentWorkflowsClient = _ref9.licenseAttachmentWorkflowsClient, calculatedDeadline = _ref9.calculatedDeadline, ipIdAddress = _ref9.ipIdAddress, wallet = _ref9.wallet, chainId = _ref9.chainId, maxLicenseTokens = _ref9.maxLicenseTokens;\n          _context5.n = 1;\n          return generateOperationSignature({\n            ipIdAddress: ipIdAddress,\n            methodType: SignatureMethodType.REGISTER_IP_AND_ATTACH_PIL_TERMS,\n            deadline: calculatedDeadline,\n            wallet: wallet,\n            chainId: chainId\n          });\n        case 1:\n          signature = _context5.v;\n          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {\n            sigMetadataAndAttachAndConfig: {\n              signer: wallet.account.address,\n              deadline: calculatedDeadline,\n              signature: signature\n            }\n          });\n          return _context5.a(2, {\n            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n            transformRequest: transformRequest,\n            isUseMulticall3: false,\n            contractCall: function contractCall() {\n              return licenseAttachmentWorkflowsClient.registerIpAndAttachPilTerms(transformRequest);\n            },\n            workflowClient: licenseAttachmentWorkflowsClient,\n            encodedTxData: {\n              to: licenseAttachmentWorkflowsClient.address,\n              data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: licenseAttachmentWorkflowsAbi,\n                functionName: \"registerIpAndAttachPILTerms\",\n                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.ipMetadata, transformRequest.licenseTermsData, transformRequest.sigMetadataAndAttachAndConfig]\n              })\n            },\n            extraData: {\n              maxLicenseTokens: maxLicenseTokens,\n              licenseTermsData: request.licenseTermsData\n            }\n          });\n      }\n    }, _callee5);\n  }));\n  return function transferRegisterIpAndAttachPilTermsRequest(_x5) {\n    return _ref0.apply(this, arguments);\n  };\n}();\n\n/**\n * Transforms a request for the `registerIpAndMakeDerivativeAndDeployRoyaltyVault` contract method.\n */\nvar transferRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest = /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(_ref1) {\n    var request, calculatedDeadline, ipIdAddress, wallet, chainId, royaltyTokenDistributionWorkflowsClient, totalFees, royaltyShares, signature, transformRequest;\n    return _regenerator().w(function (_context6) {\n      while (1) switch (_context6.n) {\n        case 0:\n          request = _ref1.request, calculatedDeadline = _ref1.calculatedDeadline, ipIdAddress = _ref1.ipIdAddress, wallet = _ref1.wallet, chainId = _ref1.chainId, royaltyTokenDistributionWorkflowsClient = _ref1.royaltyTokenDistributionWorkflowsClient, totalFees = _ref1.totalFees, royaltyShares = _ref1.royaltyShares;\n          _context6.n = 1;\n          return generateOperationSignature({\n            ipIdAddress: ipIdAddress,\n            methodType: SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_AND_DEPLOY_ROYALTY_VAULT,\n            deadline: calculatedDeadline,\n            wallet: wallet,\n            chainId: chainId\n          });\n        case 1:\n          signature = _context6.v;\n          transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {\n            sigMetadataAndRegister: {\n              signer: wallet.account.address,\n              deadline: calculatedDeadline,\n              signature: signature\n            }\n          });\n          return _context6.a(2, {\n            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n            transformRequest: transformRequest,\n            isUseMulticall3: false,\n            spenders: [{\n              address: royaltyTokenDistributionWorkflowsClient.address,\n              amount: totalFees\n            }],\n            totalFees: totalFees,\n            contractCall: function contractCall() {\n              return royaltyTokenDistributionWorkflowsClient.registerIpAndMakeDerivativeAndDeployRoyaltyVault(transformRequest);\n            },\n            workflowClient: royaltyTokenDistributionWorkflowsClient,\n            encodedTxData: {\n              to: royaltyTokenDistributionWorkflowsClient.address,\n              data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: royaltyTokenDistributionWorkflowsAbi,\n                functionName: \"registerIpAndMakeDerivativeAndDeployRoyaltyVault\",\n                args: [transformRequest.nftContract, transformRequest.tokenId, transformRequest.ipMetadata, transformRequest.derivData, transformRequest.sigMetadataAndRegister]\n              })\n            },\n            extraData: {\n              royaltyShares: royaltyShares,\n              deadline: calculatedDeadline\n            }\n          });\n      }\n    }, _callee6);\n  }));\n  return function transferRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest(_x6) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\n/**\n * Handles a request for the `mintAndRegister*` contract methods.\n *\n * @remarks\n * This method processes various mint and register workflows including:\n *\n * - {@link mintAndRegisterIpAndMakeDerivative} - Mints NFT and registers IP with derivative creation\n * - {@link mintAndRegisterIpAssetWithPilTerms} - Mints NFT and registers IP with PIL terms\n * - {@link mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens} - Mints, registers, attaches terms and distributes royalties\n * - {@link mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens} - Mints, registers with derivative and distributes royalties\n *\n * Key features and optimizations:\n * - Automatically calculates all required fees (SPG mint fees and license mint fees)\n * - Transaction batching strategy varies by contract type:\n *   - Public minting contracts: Uses `multicall3` for gas-efficient batching\n *   - Private minting contracts: Uses SPG's native `multicall` implementation\n *   - Special case: {@link mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens} always\n *     uses SPG's native multicall due to specific signature requirements\n */\nvar handleMintAndRegisterRequest = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(_ref11) {\n    var _request$allowDuplica;\n    var request, rpcClient, wallet, chainId, royaltyTokenDistributionWorkflowsClient, licenseAttachmentWorkflowsClient, derivativeWorkflowsClient, isPublicMinting, nftMintFee, baseRequest, _yield$validateLicens2, licenseTermsData, maxLicenseTokens, requestWithTerms, derivData, totalDerivativeMintingFee, requestWithDeriv;\n    return _regenerator().w(function (_context7) {\n      while (1) switch (_context7.n) {\n        case 0:\n          request = _ref11.request, rpcClient = _ref11.rpcClient, wallet = _ref11.wallet, chainId = _ref11.chainId;\n          royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);\n          licenseAttachmentWorkflowsClient = new LicenseAttachmentWorkflowsClient(rpcClient, wallet);\n          derivativeWorkflowsClient = new DerivativeWorkflowsClient(rpcClient, wallet);\n          _context7.n = 1;\n          return getPublicMinting(request.spgNftContract, rpcClient);\n        case 1:\n          isPublicMinting = _context7.v;\n          _context7.n = 2;\n          return calculateSPGWipMintFee(new SpgnftImplReadOnlyClient(rpcClient, request.spgNftContract));\n        case 2:\n          nftMintFee = _context7.v;\n          baseRequest = {\n            spgNftContract: validateAddress(request.spgNftContract),\n            recipient: validateAddress(request.recipient || wallet.account.address),\n            ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),\n            allowDuplicates: (_request$allowDuplica = request.allowDuplicates) !== null && _request$allowDuplica !== void 0 ? _request$allowDuplica : true\n          };\n          if (!(\"licenseTermsData\" in request)) {\n            _context7.n = 5;\n            break;\n          }\n          _context7.n = 3;\n          return validateLicenseTermsData(request.licenseTermsData, rpcClient, chainId);\n        case 3:\n          _yield$validateLicens2 = _context7.v;\n          licenseTermsData = _yield$validateLicens2.licenseTermsData;\n          maxLicenseTokens = _yield$validateLicens2.maxLicenseTokens;\n          requestWithTerms = _objectSpread2(_objectSpread2({}, baseRequest), {}, {\n            licenseTermsData: licenseTermsData\n          });\n          if (!(\"royaltyShares\" in request)) {\n            _context7.n = 4;\n            break;\n          }\n          return _context7.a(2, transformMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest({\n            request: _objectSpread2(_objectSpread2({}, requestWithTerms), {}, {\n              royaltyShares: request.royaltyShares\n            }),\n            royaltyTokenDistributionWorkflowsClient: royaltyTokenDistributionWorkflowsClient,\n            nftMintFee: nftMintFee,\n            maxLicenseTokens: maxLicenseTokens\n          }));\n        case 4:\n          return _context7.a(2, transferMintAndRegisterIpAssetWithPilTermsRequest({\n            request: _objectSpread2(_objectSpread2({}, requestWithTerms), {}, {\n              licenseTermsData: licenseTermsData\n            }),\n            licenseAttachmentWorkflowsClient: licenseAttachmentWorkflowsClient,\n            nftMintFee: nftMintFee,\n            isPublicMinting: isPublicMinting,\n            maxLicenseTokens: maxLicenseTokens\n          }));\n        case 5:\n          if (!(\"derivData\" in request)) {\n            _context7.n = 9;\n            break;\n          }\n          _context7.n = 6;\n          return validateDerivativeData({\n            derivativeDataInput: request.derivData,\n            rpcClient: rpcClient,\n            wallet: wallet,\n            chainId: chainId\n          });\n        case 6:\n          derivData = _context7.v;\n          _context7.n = 7;\n          return calculateDerivativeMintingFee({\n            derivData: derivData,\n            rpcClient: rpcClient,\n            chainId: chainId,\n            wallet: wallet\n          });\n        case 7:\n          totalDerivativeMintingFee = _context7.v;\n          requestWithDeriv = _objectSpread2(_objectSpread2({}, baseRequest), {}, {\n            derivData: derivData\n          });\n          if (!(\"royaltyShares\" in request)) {\n            _context7.n = 8;\n            break;\n          }\n          return _context7.a(2, transferMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest({\n            request: _objectSpread2(_objectSpread2({}, requestWithDeriv), {}, {\n              royaltyShares: request.royaltyShares\n            }),\n            nftMintFee: nftMintFee,\n            isPublicMinting: isPublicMinting,\n            totalDerivativeMintingFee: totalDerivativeMintingFee,\n            royaltyTokenDistributionWorkflowsClient: royaltyTokenDistributionWorkflowsClient\n          }));\n        case 8:\n          return _context7.a(2, transferMintAndRegisterIpAndMakeDerivativeRequest({\n            request: _objectSpread2(_objectSpread2({}, requestWithDeriv), {}, {\n              derivData: derivData\n            }),\n            derivativeWorkflowsClient: derivativeWorkflowsClient,\n            nftMintFee: nftMintFee,\n            isPublicMinting: isPublicMinting,\n            totalDerivativeMintingFee: totalDerivativeMintingFee\n          }));\n        case 9:\n          throw new Error(\"Invalid mint and register request type\");\n        case 10:\n          return _context7.a(2);\n      }\n    }, _callee7);\n  }));\n  return function handleMintAndRegisterRequest(_x7) {\n    return _ref12.apply(this, arguments);\n  };\n}();\n\n/**\n * Transforms a request for the `mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens` contract method.\n */\nvar transformMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest = function transformMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest(_ref13) {\n  var request = _ref13.request,\n    royaltyTokenDistributionWorkflowsClient = _ref13.royaltyTokenDistributionWorkflowsClient,\n    nftMintFee = _ref13.nftMintFee,\n    maxLicenseTokens = _ref13.maxLicenseTokens;\n  var _getRoyaltyShares = getRoyaltyShares(request.royaltyShares),\n    royaltyShares = _getRoyaltyShares.royaltyShares;\n  var transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {\n    royaltyShares: royaltyShares\n  });\n  return {\n    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n    transformRequest: transformRequest,\n    // Because mint tokens is given `msg.sender` as the recipient, so we need to set `useMulticall3` to false.\n    isUseMulticall3: false,\n    contractCall: function contractCall() {\n      return royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(transformRequest);\n    },\n    spenders: [{\n      address: transformRequest.spgNftContract,\n      amount: nftMintFee\n    }],\n    totalFees: nftMintFee,\n    encodedTxData: {\n      to: royaltyTokenDistributionWorkflowsClient.address,\n      data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n        abi: royaltyTokenDistributionWorkflowsAbi,\n        functionName: \"mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens\",\n        args: [transformRequest.spgNftContract, transformRequest.recipient, transformRequest.ipMetadata, transformRequest.licenseTermsData, transformRequest.royaltyShares, transformRequest.allowDuplicates]\n      })\n    },\n    workflowClient: royaltyTokenDistributionWorkflowsClient,\n    extraData: {\n      maxLicenseTokens: maxLicenseTokens,\n      licenseTermsData: transformRequest.licenseTermsData\n    }\n  };\n};\n\n/**\n * Transforms a request for the `mintAndRegisterIpAssetWithPilTerms` contract method.\n */\nvar transferMintAndRegisterIpAssetWithPilTermsRequest = function transferMintAndRegisterIpAssetWithPilTermsRequest(_ref14) {\n  var request = _ref14.request,\n    licenseAttachmentWorkflowsClient = _ref14.licenseAttachmentWorkflowsClient,\n    nftMintFee = _ref14.nftMintFee,\n    isPublicMinting = _ref14.isPublicMinting,\n    maxLicenseTokens = _ref14.maxLicenseTokens;\n  return {\n    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n    transformRequest: request,\n    isUseMulticall3: isPublicMinting,\n    spenders: [{\n      address: request.spgNftContract,\n      amount: nftMintFee\n    }],\n    totalFees: nftMintFee,\n    encodedTxData: {\n      to: licenseAttachmentWorkflowsClient.address,\n      data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n        abi: licenseAttachmentWorkflowsAbi,\n        functionName: \"mintAndRegisterIpAndAttachPILTerms\",\n        args: [request.spgNftContract, request.recipient, request.ipMetadata, request.licenseTermsData, request.allowDuplicates]\n      })\n    },\n    contractCall: function contractCall() {\n      return licenseAttachmentWorkflowsClient.mintAndRegisterIpAndAttachPilTerms(request);\n    },\n    workflowClient: licenseAttachmentWorkflowsClient,\n    extraData: {\n      maxLicenseTokens: maxLicenseTokens,\n      licenseTermsData: request.licenseTermsData\n    }\n  };\n};\n\n/**\n * Transforms a request for the `mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens` contract method.\n */\nvar transferMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest = function transferMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest(_ref15) {\n  var request = _ref15.request,\n    nftMintFee = _ref15.nftMintFee,\n    isPublicMinting = _ref15.isPublicMinting,\n    totalDerivativeMintingFee = _ref15.totalDerivativeMintingFee,\n    royaltyTokenDistributionWorkflowsClient = _ref15.royaltyTokenDistributionWorkflowsClient;\n  var _getRoyaltyShares2 = getRoyaltyShares(request.royaltyShares),\n    royaltyShares = _getRoyaltyShares2.royaltyShares;\n  /**\n   * TODO: Consider the scenario where the SPG token is WIP and the derivative token is ERC20.\n   * The SDK should handle both cases in the `contractCallWithFees` method.\n   * Currently, it only supports WIP tokens and does not handle ERC20 tokens, such as approving ERC20 tokens.\n   */\n  var transformRequest = _objectSpread2(_objectSpread2({}, request), {}, {\n    royaltyShares: royaltyShares\n  });\n  return {\n    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n    transformRequest: transformRequest,\n    isUseMulticall3: isPublicMinting,\n    spenders: [{\n      address: royaltyTokenDistributionWorkflowsClient.address,\n      amount: totalDerivativeMintingFee\n    }, {\n      address: request.spgNftContract,\n      amount: nftMintFee\n    }],\n    totalFees: totalDerivativeMintingFee + nftMintFee,\n    encodedTxData: {\n      to: royaltyTokenDistributionWorkflowsClient.address,\n      data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n        abi: royaltyTokenDistributionWorkflowsAbi,\n        functionName: \"mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens\",\n        args: [request.spgNftContract, request.recipient, request.ipMetadata, request.derivData, request.royaltyShares, request.allowDuplicates]\n      })\n    },\n    workflowClient: royaltyTokenDistributionWorkflowsClient,\n    contractCall: function contractCall() {\n      return royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(transformRequest);\n    }\n  };\n};\n/**\n * Transforms a request for the `mintAndRegisterIpAndMakeDerivative` contract method.\n */\n\nvar transferMintAndRegisterIpAndMakeDerivativeRequest = function transferMintAndRegisterIpAndMakeDerivativeRequest(_ref16) {\n  var request = _ref16.request,\n    derivativeWorkflowsClient = _ref16.derivativeWorkflowsClient,\n    nftMintFee = _ref16.nftMintFee,\n    isPublicMinting = _ref16.isPublicMinting,\n    totalDerivativeMintingFee = _ref16.totalDerivativeMintingFee;\n  return {\n    // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n    transformRequest: request,\n    isUseMulticall3: isPublicMinting,\n    spenders: [{\n      address: derivativeWorkflowsClient.address,\n      amount: totalDerivativeMintingFee\n    }, {\n      address: request.spgNftContract,\n      amount: nftMintFee\n    }],\n    totalFees: totalDerivativeMintingFee + nftMintFee,\n    encodedTxData: {\n      to: derivativeWorkflowsClient.address,\n      data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n        abi: derivativeWorkflowsAbi,\n        functionName: \"mintAndRegisterIpAndMakeDerivative\",\n        args: [request.spgNftContract, request.derivData, request.ipMetadata, request.recipient, request.allowDuplicates]\n      })\n    },\n    contractCall: function contractCall() {\n      return derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivative(request);\n    },\n    workflowClient: derivativeWorkflowsClient\n  };\n};\n\n/**\n * Transforms a request for the `distributeRoyaltyTokens` contract method.\n */\nvar transferDistributeRoyaltyTokensRequest = /*#__PURE__*/function () {\n  var _ref18 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(_ref17) {\n    var request, rpcClient, wallet, chainId, ipId, deadline, ipRoyaltyVault, totalAmount, calculatedDeadline, ipRoyaltyVaultImpl, balance, royaltyTokenDistributionWorkflowsClient, ipAccount, _yield$ipAccount$stat, state, signatureApproveRoyaltyTokens, transformRequest;\n    return _regenerator().w(function (_context8) {\n      while (1) switch (_context8.n) {\n        case 0:\n          request = _ref17.request, rpcClient = _ref17.rpcClient, wallet = _ref17.wallet, chainId = _ref17.chainId;\n          ipId = request.ipId, deadline = request.deadline, ipRoyaltyVault = request.ipRoyaltyVault, totalAmount = request.totalAmount;\n          _context8.n = 1;\n          return getCalculatedDeadline(rpcClient, deadline);\n        case 1:\n          calculatedDeadline = _context8.v;\n          ipRoyaltyVaultImpl = new IpRoyaltyVaultImplReadOnlyClient(rpcClient, ipRoyaltyVault);\n          _context8.n = 2;\n          return ipRoyaltyVaultImpl.balanceOf({\n            account: ipId\n          });\n        case 2:\n          balance = _context8.v;\n          royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);\n          if (!(BigInt(balance) < BigInt(totalAmount))) {\n            _context8.n = 3;\n            break;\n          }\n          throw new Error(\"The balance of the IP account in the IP Royalty Vault is insufficient to distribute the royalty tokens.\");\n        case 3:\n          ipAccount = new IpAccountImplClient(rpcClient, wallet, validateAddress(ipId));\n          _context8.n = 4;\n          return ipAccount.state();\n        case 4:\n          _yield$ipAccount$stat = _context8.v;\n          state = _yield$ipAccount$stat.result;\n          _context8.n = 5;\n          return generateOperationSignature({\n            ipIdAddress: ipId,\n            methodType: SignatureMethodType.DISTRIBUTE_ROYALTY_TOKENS,\n            deadline: calculatedDeadline,\n            ipRoyaltyVault: ipRoyaltyVault,\n            totalAmount: totalAmount,\n            state: state,\n            encodeData: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n              abi: ipRoyaltyVaultImplAbi,\n              functionName: \"approve\",\n              args: [royaltyTokenDistributionWorkflowsAddress[chainId], BigInt(totalAmount)]\n            }),\n            wallet: wallet,\n            chainId: chainId\n          });\n        case 5:\n          signatureApproveRoyaltyTokens = _context8.v;\n          transformRequest = {\n            ipId: ipId,\n            royaltyShares: request.royaltyShares,\n            sigApproveRoyaltyTokens: {\n              signer: wallet.account.address,\n              deadline: calculatedDeadline,\n              signature: signatureApproveRoyaltyTokens\n            }\n          };\n          return _context8.a(2, {\n            // The `TransformIpRegistrationWorkflowResponse` is a union of all the possible requests, so we need to explicitly cast the type.\n            transformRequest: transformRequest,\n            isUseMulticall3: false,\n            contractCall: function contractCall() {\n              return royaltyTokenDistributionWorkflowsClient.distributeRoyaltyTokens(transformRequest);\n            },\n            workflowClient: royaltyTokenDistributionWorkflowsClient,\n            encodedTxData: {\n              to: royaltyTokenDistributionWorkflowsAddress[chainId],\n              data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: royaltyTokenDistributionWorkflowsAbi,\n                functionName: \"distributeRoyaltyTokens\",\n                args: [transformRequest.ipId, transformRequest.royaltyShares, transformRequest.sigApproveRoyaltyTokens]\n              })\n            }\n          });\n      }\n    }, _callee8);\n  }));\n  return function transferDistributeRoyaltyTokensRequest(_x8) {\n    return _ref18.apply(this, arguments);\n  };\n}();\nvar prepareRoyaltyTokensDistributionRequests = /*#__PURE__*/function () {\n  var _ref20 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(_ref19) {\n    var royaltyDistributionRequests, ipRegisteredLog, ipRoyaltyVault, rpcClient, wallet, chainId, results, _iterator, _step, _loop, _t;\n    return _regenerator().w(function (_context0) {\n      while (1) switch (_context0.p = _context0.n) {\n        case 0:\n          royaltyDistributionRequests = _ref19.royaltyDistributionRequests, ipRegisteredLog = _ref19.ipRegisteredLog, ipRoyaltyVault = _ref19.ipRoyaltyVault, rpcClient = _ref19.rpcClient, wallet = _ref19.wallet, chainId = _ref19.chainId;\n          if (!(royaltyDistributionRequests.length === 0)) {\n            _context0.n = 1;\n            break;\n          }\n          return _context0.a(2, []);\n        case 1:\n          results = [];\n          _iterator = _createForOfIteratorHelper(royaltyDistributionRequests);\n          _context0.p = 2;\n          _loop = /*#__PURE__*/_regenerator().m(function _loop() {\n            var req, filterIpIdAndTokenId, _req$royaltyShares, _getRoyaltyShares3, royaltyShares, totalAmount, calculatedDeadline, response;\n            return _regenerator().w(function (_context9) {\n              while (1) switch (_context9.n) {\n                case 0:\n                  req = _step.value;\n                  filterIpIdAndTokenId = ipRegisteredLog.find(function (_ref21) {\n                    var tokenContract = _ref21.tokenContract,\n                      tokenId = _ref21.tokenId;\n                    return tokenContract === req.nftContract && tokenId === req.tokenId;\n                  });\n                  if (!filterIpIdAndTokenId) {\n                    _context9.n = 3;\n                    break;\n                  }\n                  _getRoyaltyShares3 = getRoyaltyShares((_req$royaltyShares = req.royaltyShares) !== null && _req$royaltyShares !== void 0 ? _req$royaltyShares : []), royaltyShares = _getRoyaltyShares3.royaltyShares, totalAmount = _getRoyaltyShares3.totalAmount;\n                  _context9.n = 1;\n                  return getCalculatedDeadline(rpcClient, req.deadline);\n                case 1:\n                  calculatedDeadline = _context9.v;\n                  _context9.n = 2;\n                  return transferDistributeRoyaltyTokensRequest({\n                    request: {\n                      ipId: filterIpIdAndTokenId.ipId,\n                      ipRoyaltyVault: ipRoyaltyVault.find(function (item) {\n                        return item.ipId === filterIpIdAndTokenId.ipId;\n                      }).ipRoyaltyVault,\n                      royaltyShares: royaltyShares,\n                      totalAmount: totalAmount,\n                      deadline: calculatedDeadline\n                    },\n                    rpcClient: rpcClient,\n                    wallet: wallet,\n                    chainId: chainId\n                  });\n                case 2:\n                  response = _context9.v;\n                  results.push(response);\n                case 3:\n                  return _context9.a(2);\n              }\n            }, _loop);\n          });\n          _iterator.s();\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context0.n = 5;\n            break;\n          }\n          return _context0.d(_regeneratorValues(_loop()), 4);\n        case 4:\n          _context0.n = 3;\n          break;\n        case 5:\n          _context0.n = 7;\n          break;\n        case 6:\n          _context0.p = 6;\n          _t = _context0.v;\n          _iterator.e(_t);\n        case 7:\n          _context0.p = 7;\n          _iterator.f();\n          return _context0.f(7);\n        case 8:\n          return _context0.a(2, results);\n      }\n    }, _callee9, null, [[2, 6, 7, 8]]);\n  }));\n  return function prepareRoyaltyTokensDistributionRequests(_x9) {\n    return _ref20.apply(this, arguments);\n  };\n}();\n\nvar IPAssetClient = /*#__PURE__*/function () {\n  function IPAssetClient(rpcClient, wallet, chainId) {\n    _classCallCheck(this, IPAssetClient);\n    this.licensingModuleClient = new LicensingModuleClient(rpcClient, wallet);\n    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);\n    this.licenseTemplateClient = new PiLicenseTemplateClient(rpcClient, wallet);\n    this.licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);\n    this.licenseTokenReadOnlyClient = new LicenseTokenReadOnlyClient(rpcClient);\n    this.accessControllerClient = new AccessControllerClient(rpcClient, wallet);\n    this.coreMetadataModuleClient = new CoreMetadataModuleClient(rpcClient, wallet);\n    this.registrationWorkflowsClient = new RegistrationWorkflowsClient(rpcClient, wallet);\n    this.licenseAttachmentWorkflowsClient = new LicenseAttachmentWorkflowsClient(rpcClient, wallet);\n    this.derivativeWorkflowsClient = new DerivativeWorkflowsClient(rpcClient, wallet);\n    this.royaltyTokenDistributionWorkflowsClient = new RoyaltyTokenDistributionWorkflowsClient(rpcClient, wallet);\n    this.royaltyModuleEventClient = new RoyaltyModuleEventClient(rpcClient);\n    this.wipClient = new WrappedIpClient(rpcClient, wallet);\n    this.multicall3Client = new Multicall3Client(rpcClient, wallet);\n    this.spgNftClient = new SpgnftImplReadOnlyClient(rpcClient);\n    this.totalLicenseTokenLimitHookClient = new TotalLicenseTokenLimitHookClient(rpcClient, wallet);\n    this.rpcClient = rpcClient;\n    this.wallet = wallet;\n    this.chainId = chainId;\n    this.walletAddress = this.wallet.account.address;\n  }\n  return _createClass(IPAssetClient, [{\n    key: \"generateCreatorMetadata\",\n    value: function generateCreatorMetadata(creator) {\n      return creator;\n    }\n  }, {\n    key: \"generateIpMetadata\",\n    value: function generateIpMetadata(metadata) {\n      return metadata;\n    }\n\n    /**\n     * Registers an NFT as IP, creating a corresponding IP record.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n  }, {\n    key: \"register\",\n    value: (function () {\n      var _register = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request) {\n        var _request$txOptions, tokenId, ipIdAddress, isRegistered, object, calculatedDeadline, signature, txHash, txReceipt, log, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              tokenId = BigInt(request.tokenId);\n              _context.n = 1;\n              return getIpIdAddress({\n                nftContract: request.nftContract,\n                tokenId: tokenId,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              ipIdAddress = _context.v;\n              _context.n = 2;\n              return this.isRegistered(ipIdAddress);\n            case 2:\n              isRegistered = _context.v;\n              if (!isRegistered) {\n                _context.n = 3;\n                break;\n              }\n              return _context.a(2, {\n                ipId: ipIdAddress\n              });\n            case 3:\n              object = {\n                tokenId: tokenId,\n                nftContract: validateAddress(request.nftContract),\n                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),\n                sigMetadata: {\n                  signer: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n                  deadline: BigInt(0),\n                  signature: viem__WEBPACK_IMPORTED_MODULE_16__.zeroHash\n                }\n              };\n              if (!request.ipMetadata) {\n                _context.n = 6;\n                break;\n              }\n              _context.n = 4;\n              return getCalculatedDeadline(this.rpcClient, request.deadline);\n            case 4:\n              calculatedDeadline = _context.v;\n              _context.n = 5;\n              return generateOperationSignature({\n                ipIdAddress: ipIdAddress,\n                methodType: SignatureMethodType.REGISTER,\n                deadline: calculatedDeadline,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 5:\n              signature = _context.v;\n              object.sigMetadata = {\n                signer: validateAddress(this.walletAddress),\n                deadline: calculatedDeadline,\n                signature: signature\n              };\n            case 6:\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context.n = 9;\n                break;\n              }\n              if (!request.ipMetadata) {\n                _context.n = 7;\n                break;\n              }\n              return _context.a(2, {\n                encodedTxData: this.registrationWorkflowsClient.registerIpEncode(object)\n              });\n            case 7:\n              return _context.a(2, {\n                encodedTxData: this.ipAssetRegistryClient.registerEncode({\n                  tokenContract: object.nftContract,\n                  tokenId: object.tokenId,\n                  chainid: BigInt(this.chainId)\n                })\n              });\n            case 8:\n              _context.n = 15;\n              break;\n            case 9:\n              if (!request.ipMetadata) {\n                _context.n = 11;\n                break;\n              }\n              _context.n = 10;\n              return this.registrationWorkflowsClient.registerIp(object);\n            case 10:\n              txHash = _context.v;\n              _context.n = 13;\n              break;\n            case 11:\n              _context.n = 12;\n              return this.ipAssetRegistryClient.register({\n                tokenContract: object.nftContract,\n                tokenId: object.tokenId,\n                chainid: BigInt(this.chainId)\n              });\n            case 12:\n              txHash = _context.v;\n            case 13:\n              _context.n = 14;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 14:\n              txReceipt = _context.v;\n              log = this.getIpIdAndTokenIdsFromEvent(txReceipt)[0];\n              return _context.a(2, _objectSpread2({\n                txHash: txHash\n              }, log));\n            case 15:\n              _context.n = 17;\n              break;\n            case 16:\n              _context.p = 16;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to register IP\"));\n            case 17:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 16]]);\n      }));\n      function register(_x) {\n        return _register.apply(this, arguments);\n      }\n      return register;\n    }()\n    /**\n     * Batch registers an NFT as IP, creating a corresponding IP record.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"batchRegister\",\n    value: (function () {\n      var _batchRegister = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(request) {\n        var _this = this;\n        var contracts, spgContracts, encodedTxData, _iterator, _step, arg, result, spgTxHash, txHash, results, processTransaction, _t2, _t3, _t4;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              contracts = [];\n              spgContracts = [];\n              _iterator = _createForOfIteratorHelper(request.args);\n              _context3.p = 1;\n              _iterator.s();\n            case 2:\n              if ((_step = _iterator.n()).done) {\n                _context3.n = 8;\n                break;\n              }\n              arg = _step.value;\n              _context3.p = 3;\n              _context3.n = 4;\n              return this.register(_objectSpread2(_objectSpread2({}, arg), {}, {\n                txOptions: {\n                  encodedTxDataOnly: true\n                }\n              }));\n            case 4:\n              result = _context3.v;\n              encodedTxData = result.encodedTxData.data;\n              _context3.n = 6;\n              break;\n            case 5:\n              _context3.p = 5;\n              _t2 = _context3.v;\n              throw new Error(_t2.message.replace(\"Failed to register IP:\", \"\").trim());\n            case 6:\n              if (arg.ipMetadata) {\n                spgContracts.push(encodedTxData);\n              } else {\n                contracts.push({\n                  target: this.ipAssetRegistryClient.address,\n                  allowFailure: false,\n                  callData: encodedTxData\n                });\n              }\n            case 7:\n              _context3.n = 2;\n              break;\n            case 8:\n              _context3.n = 10;\n              break;\n            case 9:\n              _context3.p = 9;\n              _t3 = _context3.v;\n              _iterator.e(_t3);\n            case 10:\n              _context3.p = 10;\n              _iterator.f();\n              return _context3.f(10);\n            case 11:\n              if (!(spgContracts.length > 0)) {\n                _context3.n = 13;\n                break;\n              }\n              _context3.n = 12;\n              return this.registrationWorkflowsClient.multicall({\n                data: spgContracts\n              });\n            case 12:\n              spgTxHash = _context3.v;\n            case 13:\n              if (!(contracts.length > 0)) {\n                _context3.n = 15;\n                break;\n              }\n              _context3.n = 14;\n              return this.multicall3Client.aggregate3({\n                calls: contracts\n              });\n            case 14:\n              txHash = _context3.v;\n            case 15:\n              results = [];\n              processTransaction = /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(hash, contractType) {\n                  var txReceipt, eventResults;\n                  return _regenerator().w(function (_context2) {\n                    while (1) switch (_context2.n) {\n                      case 0:\n                        _context2.n = 1;\n                        return _this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                          hash: hash\n                        }));\n                      case 1:\n                        txReceipt = _context2.v;\n                        eventResults = _this.getIpIdAndTokenIdsFromEvent(txReceipt, contractType);\n                        results.push.apply(results, _toConsumableArray(eventResults));\n                      case 2:\n                        return _context2.a(2);\n                    }\n                  }, _callee2);\n                }));\n                return function processTransaction(_x3, _x4) {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              if (!txHash) {\n                _context3.n = 16;\n                break;\n              }\n              _context3.n = 16;\n              return processTransaction(txHash, \"nftContract\");\n            case 16:\n              if (!spgTxHash) {\n                _context3.n = 17;\n                break;\n              }\n              _context3.n = 17;\n              return processTransaction(spgTxHash, \"spgNftContract\");\n            case 17:\n              return _context3.a(2, {\n                txHash: txHash,\n                spgTxHash: spgTxHash,\n                results: results\n              });\n            case 18:\n              _context3.p = 18;\n              _t4 = _context3.v;\n              return _context3.a(2, handleError(_t4, \"Failed to batch register IP\"));\n          }\n        }, _callee3, this, [[3, 5], [1, 9, 10, 11], [0, 18]]);\n      }));\n      function batchRegister(_x2) {\n        return _batchRegister.apply(this, arguments);\n      }\n      return batchRegister;\n    }()\n    /**\n     * Registers a derivative directly with parent IP's license terms, without needing license tokens,\n     * and attaches the license terms of the parent IPs to the derivative IP.\n     * The license terms must be attached to the parent IP before calling this function.\n     * All IPs attached default license terms by default.\n     * The derivative IP owner must be the caller or an authorized operator.\n     */\n    )\n  }, {\n    key: \"registerDerivative\",\n    value: (function () {\n      var _registerDerivative = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(request) {\n        var _this2 = this;\n        var _request$txOptions2, isChildIpIdRegistered, derivativeData, object, encodedTxData, _request$options, contractCall, _t5;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              _context4.p = 0;\n              _context4.n = 1;\n              return this.isRegistered(request.childIpId);\n            case 1:\n              isChildIpIdRegistered = _context4.v;\n              if (isChildIpIdRegistered) {\n                _context4.n = 2;\n                break;\n              }\n              throw new Error(\"The child IP with id \".concat(request.childIpId, \" is not registered.\"));\n            case 2:\n              _context4.n = 3;\n              return validateDerivativeData({\n                derivativeDataInput: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 3:\n              derivativeData = _context4.v;\n              object = _objectSpread2({\n                childIpId: request.childIpId\n              }, derivativeData);\n              encodedTxData = this.licensingModuleClient.registerDerivativeEncode(object);\n              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {\n                _context4.n = 4;\n                break;\n              }\n              return _context4.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 4:\n              contractCall = function contractCall() {\n                return _this2.licensingModuleClient.registerDerivative(object);\n              };\n              return _context4.a(2, this.handleRegistrationWithFees({\n                sender: this.walletAddress,\n                derivData: object,\n                contractCall: contractCall,\n                txOptions: request.txOptions,\n                encodedTxs: [encodedTxData],\n                spgSpenderAddress: this.royaltyModuleEventClient.address,\n                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.wipOptions), {}, {\n                  useMulticallWhenPossible: false\n                })\n              }));\n            case 5:\n              _context4.n = 7;\n              break;\n            case 6:\n              _context4.p = 6;\n              _t5 = _context4.v;\n              return _context4.a(2, handleError(_t5, \"Failed to register derivative\"));\n            case 7:\n              return _context4.a(2);\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n      function registerDerivative(_x5) {\n        return _registerDerivative.apply(this, arguments);\n      }\n      return registerDerivative;\n    }()\n    /**\n     * Batch registers a derivative directly with parent IP's license terms.\n     */\n    )\n  }, {\n    key: \"batchRegisterDerivative\",\n    value: (function () {\n      var _batchRegisterDerivative = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(request) {\n        var contracts, licenseModuleAddress, _iterator2, _step2, arg, calculatedDeadline, ipAccount, data, _yield$ipAccount$stat, state, signature, txHash, _t6, _t7, _t8;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              contracts = [];\n              licenseModuleAddress = validateAddress(this.licensingModuleClient.address);\n              _iterator2 = _createForOfIteratorHelper(request.args);\n              _context5.p = 1;\n              _iterator2.s();\n            case 2:\n              if ((_step2 = _iterator2.n()).done) {\n                _context5.n = 11;\n                break;\n              }\n              arg = _step2.value;\n              _context5.p = 3;\n              _context5.n = 4;\n              return this.registerDerivative(_objectSpread2(_objectSpread2({}, arg), {}, {\n                txOptions: {\n                  encodedTxDataOnly: true\n                }\n              }));\n            case 4:\n              _context5.n = 6;\n              break;\n            case 5:\n              _context5.p = 5;\n              _t6 = _context5.v;\n              throw new Error(_t6.message.replace(\"Failed to register derivative:\", \"\").trim());\n            case 6:\n              _context5.n = 7;\n              return getCalculatedDeadline(this.rpcClient, request.deadline);\n            case 7:\n              calculatedDeadline = _context5.v;\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, validateAddress(arg.childIpId));\n              data = (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: licensingModuleAbi,\n                functionName: \"registerDerivative\",\n                args: [arg.childIpId, arg.parentIpIds, arg.licenseTermsIds.map(function (id) {\n                  return BigInt(id);\n                }), arg.licenseTemplate || this.licenseTemplateClient.address, viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress, BigInt(arg.maxMintingFee || 0), Number(arg.maxRts === undefined ? MAX_ROYALTY_TOKEN : arg.maxRts), getRevenueShare(arg.maxRevenueShare === undefined ? 100 : arg.maxRevenueShare, RevShareType.MAX_REVENUE_SHARE)]\n              });\n              _context5.n = 8;\n              return ipAccount.state();\n            case 8:\n              _yield$ipAccount$stat = _context5.v;\n              state = _yield$ipAccount$stat.result;\n              _context5.n = 9;\n              return generateOperationSignature({\n                ipIdAddress: arg.childIpId,\n                methodType: SignatureMethodType.BATCH_REGISTER_DERIVATIVE,\n                state: state,\n                encodeData: data,\n                deadline: calculatedDeadline,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 9:\n              signature = _context5.v;\n              contracts.push({\n                target: arg.childIpId,\n                allowFailure: false,\n                callData: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                  abi: ipAccountImplAbi,\n                  functionName: \"executeWithSig\",\n                  args: [licenseModuleAddress, BigInt(0), data, this.wallet.account.address, calculatedDeadline, signature]\n                })\n              });\n            case 10:\n              _context5.n = 2;\n              break;\n            case 11:\n              _context5.n = 13;\n              break;\n            case 12:\n              _context5.p = 12;\n              _t7 = _context5.v;\n              _iterator2.e(_t7);\n            case 13:\n              _context5.p = 13;\n              _iterator2.f();\n              return _context5.f(13);\n            case 14:\n              _context5.n = 15;\n              return this.multicall3Client.aggregate3({\n                calls: contracts\n              });\n            case 15:\n              txHash = _context5.v;\n              _context5.n = 16;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 16:\n              return _context5.a(2, {\n                txHash: txHash\n              });\n            case 17:\n              _context5.p = 17;\n              _t8 = _context5.v;\n              return _context5.a(2, handleError(_t8, \"Failed to batch register derivative\"));\n          }\n        }, _callee5, this, [[3, 5], [1, 12, 13, 14], [0, 17]]);\n      }));\n      function batchRegisterDerivative(_x6) {\n        return _batchRegisterDerivative.apply(this, arguments);\n      }\n      return batchRegisterDerivative;\n    }()\n    /**\n     * Registers a derivative with license tokens. The derivative IP is registered with license tokens minted from the parent IP's license terms.\n     * The license terms of the parent IPs issued with license tokens are attached to the derivative IP.\n     * The caller must be the derivative IP owner or an authorized operator.\n     */\n    )\n  }, {\n    key: \"registerDerivativeWithLicenseTokens\",\n    value: (function () {\n      var _registerDerivativeWithLicenseTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(request) {\n        var _request$txOptions3, req, isChildIpIdRegistered, txHash, _t9;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.p = _context6.n) {\n            case 0:\n              _context6.p = 0;\n              req = {\n                childIpId: validateAddress(request.childIpId),\n                licenseTokenIds: request.licenseTokenIds.map(function (id) {\n                  return BigInt(id);\n                }),\n                royaltyContext: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n                maxRts: Number(request.maxRts)\n              };\n              validateMaxRts(req.maxRts);\n              _context6.n = 1;\n              return this.isRegistered(request.childIpId);\n            case 1:\n              isChildIpIdRegistered = _context6.v;\n              if (isChildIpIdRegistered) {\n                _context6.n = 2;\n                break;\n              }\n              throw new Error(\"The child IP with id \".concat(request.childIpId, \" is not registered.\"));\n            case 2:\n              if (!(request.licenseTokenIds.length === 0)) {\n                _context6.n = 3;\n                break;\n              }\n              throw new Error(\"The licenseTokenIds must be provided.\");\n            case 3:\n              _context6.n = 4;\n              return this.validateLicenseTokenIds(request.licenseTokenIds);\n            case 4:\n              request.licenseTokenIds = _context6.v;\n              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {\n                _context6.n = 5;\n                break;\n              }\n              return _context6.a(2, {\n                encodedTxData: this.licensingModuleClient.registerDerivativeWithLicenseTokensEncode(req)\n              });\n            case 5:\n              _context6.n = 6;\n              return this.licensingModuleClient.registerDerivativeWithLicenseTokens(req);\n            case 6:\n              txHash = _context6.v;\n              _context6.n = 7;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 7:\n              return _context6.a(2, {\n                txHash: txHash\n              });\n            case 8:\n              _context6.n = 10;\n              break;\n            case 9:\n              _context6.p = 9;\n              _t9 = _context6.v;\n              return _context6.a(2, handleError(_t9, \"Failed to register derivative with license tokens\"));\n            case 10:\n              return _context6.a(2);\n          }\n        }, _callee6, this, [[0, 9]]);\n      }));\n      function registerDerivativeWithLicenseTokens(_x7) {\n        return _registerDerivativeWithLicenseTokens.apply(this, arguments);\n      }\n      return registerDerivativeWithLicenseTokens;\n    }()\n    /**\n     * Mint an NFT from a collection and register it as an IP.\n     *\n     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} events.\n     */\n    )\n  }, {\n    key: \"mintAndRegisterIpAssetWithPilTerms\",\n    value: (function () {\n      var _mintAndRegisterIpAssetWithPilTerms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(request) {\n        var _this3 = this;\n        var _request$txOptions4, _request$options2, _yield$validateLicens, licenseTerms, _yield$transformRegis, transformRequest, encodedTxData, contractCall, rsp, computedLicenseTermsIds, maxLicenseTokensTxHashes, _t0;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.p = _context7.n) {\n            case 0:\n              _context7.p = 0;\n              _context7.n = 1;\n              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient, this.chainId);\n            case 1:\n              _yield$validateLicens = _context7.v;\n              licenseTerms = _yield$validateLicens.licenseTerms;\n              _context7.n = 2;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 2:\n              _yield$transformRegis = _context7.v;\n              transformRequest = _yield$transformRegis.transformRequest;\n              encodedTxData = this.licenseAttachmentWorkflowsClient.mintAndRegisterIpAndAttachPilTermsEncode(transformRequest);\n              if (!((_request$txOptions4 = request.txOptions) !== null && _request$txOptions4 !== void 0 && _request$txOptions4.encodedTxDataOnly)) {\n                _context7.n = 3;\n                break;\n              }\n              return _context7.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 3:\n              contractCall = function contractCall() {\n                return _this3.licenseAttachmentWorkflowsClient.mintAndRegisterIpAndAttachPilTerms(transformRequest);\n              };\n              _context7.n = 4;\n              return this.handleRegistrationWithFees({\n                wipOptions: (_request$options2 = request.options) === null || _request$options2 === void 0 ? void 0 : _request$options2.wipOptions,\n                sender: this.walletAddress,\n                spgNftContract: transformRequest.spgNftContract,\n                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                txOptions: request.txOptions\n              });\n            case 4:\n              rsp = _context7.v;\n              _context7.n = 5;\n              return this.getLicenseTermsId(licenseTerms);\n            case 5:\n              computedLicenseTermsIds = _context7.v;\n              _context7.n = 6;\n              return this.setMaxLicenseTokens({\n                maxLicenseTokensData: request.licenseTermsData,\n                licensorIpId: rsp.ipId,\n                licenseTermsIds: computedLicenseTermsIds\n              });\n            case 6:\n              maxLicenseTokensTxHashes = _context7.v;\n              return _context7.a(2, _objectSpread2(_objectSpread2({}, rsp), {}, {\n                licenseTermsIds: computedLicenseTermsIds\n              }, maxLicenseTokensTxHashes.length > 0 && {\n                maxLicenseTokensTxHashes: maxLicenseTokensTxHashes\n              }));\n            case 7:\n              _context7.p = 7;\n              _t0 = _context7.v;\n              return _context7.a(2, handleError(_t0, \"Failed to mint and register IP and attach PIL terms\"));\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n      function mintAndRegisterIpAssetWithPilTerms(_x8) {\n        return _mintAndRegisterIpAssetWithPilTerms.apply(this, arguments);\n      }\n      return mintAndRegisterIpAssetWithPilTerms;\n    }()\n    /**\n     * Batch mint an NFT from a collection and register it as an IP.\n     *\n     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} events.\n     */\n    )\n  }, {\n    key: \"batchMintAndRegisterIpAssetWithPilTerms\",\n    value: (function () {\n      var _batchMintAndRegisterIpAssetWithPilTerms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(request) {\n        var calldata, _iterator3, _step3, arg, result, txHash, txReceipt, results, j, licenseTerms, licenseTermsData, i, licenseTerm, licenseTermsIds, maxLicenseTokensTxHashes, _t1, _t10;\n        return _regenerator().w(function (_context8) {\n          while (1) switch (_context8.p = _context8.n) {\n            case 0:\n              _context8.p = 0;\n              calldata = [];\n              _iterator3 = _createForOfIteratorHelper(request.args);\n              _context8.p = 1;\n              _iterator3.s();\n            case 2:\n              if ((_step3 = _iterator3.n()).done) {\n                _context8.n = 5;\n                break;\n              }\n              arg = _step3.value;\n              _context8.n = 3;\n              return this.mintAndRegisterIpAssetWithPilTerms(_objectSpread2(_objectSpread2({}, arg), {}, {\n                txOptions: {\n                  encodedTxDataOnly: true\n                }\n              }));\n            case 3:\n              result = _context8.v;\n              calldata.push(result.encodedTxData.data);\n            case 4:\n              _context8.n = 2;\n              break;\n            case 5:\n              _context8.n = 7;\n              break;\n            case 6:\n              _context8.p = 6;\n              _t1 = _context8.v;\n              _iterator3.e(_t1);\n            case 7:\n              _context8.p = 7;\n              _iterator3.f();\n              return _context8.f(7);\n            case 8:\n              _context8.n = 9;\n              return this.licenseAttachmentWorkflowsClient.multicall({\n                data: calldata\n              });\n            case 9:\n              txHash = _context8.v;\n              _context8.n = 10;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 10:\n              txReceipt = _context8.v;\n              results = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(txReceipt).map(function (log) {\n                return {\n                  ipId: log.ipId,\n                  tokenId: log.tokenId,\n                  spgNftContract: log.tokenContract,\n                  licenseTermsIds: []\n                };\n              }); // Due to emit event log by sequence, we need to get license terms id from request.args\n              j = 0;\n            case 11:\n              if (!(j < request.args.length)) {\n                _context8.n = 15;\n                break;\n              }\n              licenseTerms = [];\n              licenseTermsData = request.args[j].licenseTermsData;\n              for (i = 0; i < licenseTermsData.length; i++) {\n                licenseTerm = PILFlavor.validateLicenseTerms(licenseTermsData[i].terms, this.chainId);\n                licenseTerms.push(licenseTerm);\n              }\n              _context8.n = 12;\n              return this.getLicenseTermsId(licenseTerms);\n            case 12:\n              licenseTermsIds = _context8.v;\n              results[j].licenseTermsIds = licenseTermsIds;\n              _context8.n = 13;\n              return this.setMaxLicenseTokens({\n                maxLicenseTokensData: licenseTermsData,\n                licensorIpId: results[j].ipId,\n                licenseTermsIds: licenseTermsIds\n              });\n            case 13:\n              maxLicenseTokensTxHashes = _context8.v;\n              if (maxLicenseTokensTxHashes.length > 0) {\n                results[j].maxLicenseTokensTxHashes = maxLicenseTokensTxHashes;\n              }\n            case 14:\n              j++;\n              _context8.n = 11;\n              break;\n            case 15:\n              return _context8.a(2, {\n                txHash: txHash,\n                results: results\n              });\n            case 16:\n              _context8.p = 16;\n              _t10 = _context8.v;\n              return _context8.a(2, handleError(_t10, \"Failed to batch mint and register IP and attach PIL terms\"));\n          }\n        }, _callee8, this, [[1, 6, 7, 8], [0, 16]]);\n      }));\n      function batchMintAndRegisterIpAssetWithPilTerms(_x9) {\n        return _batchMintAndRegisterIpAssetWithPilTerms.apply(this, arguments);\n      }\n      return batchMintAndRegisterIpAssetWithPilTerms;\n    }()\n    /**\n     * Register a given NFT as an IP and attach Programmable IP License Terms.\n     *\n     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} events.\n     */\n    )\n  }, {\n    key: \"registerIpAndAttachPilTerms\",\n    value: (function () {\n      var _registerIpAndAttachPilTerms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(request) {\n        var _request$txOptions5, ipIdAddress, isRegistered, _yield$validateLicens2, licenseTerms, _yield$transformRegis2, _transformRequest, txHash, txReceipt, log, licenseTermsIds, maxLicenseTokensTxHashes, _t11;\n        return _regenerator().w(function (_context9) {\n          while (1) switch (_context9.p = _context9.n) {\n            case 0:\n              _context9.p = 0;\n              request.tokenId = BigInt(request.tokenId);\n              _context9.n = 1;\n              return getIpIdAddress({\n                nftContract: request.nftContract,\n                tokenId: request.tokenId,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              ipIdAddress = _context9.v;\n              _context9.n = 2;\n              return this.isRegistered(ipIdAddress);\n            case 2:\n              isRegistered = _context9.v;\n              if (!isRegistered) {\n                _context9.n = 3;\n                break;\n              }\n              throw new Error(\"The NFT with id \".concat(request.tokenId, \" is already registered as IP.\"));\n            case 3:\n              _context9.n = 4;\n              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient, this.chainId);\n            case 4:\n              _yield$validateLicens2 = _context9.v;\n              licenseTerms = _yield$validateLicens2.licenseTerms;\n              _context9.n = 5;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 5:\n              _yield$transformRegis2 = _context9.v;\n              _transformRequest = _yield$transformRegis2.transformRequest;\n              if (!((_request$txOptions5 = request.txOptions) !== null && _request$txOptions5 !== void 0 && _request$txOptions5.encodedTxDataOnly)) {\n                _context9.n = 6;\n                break;\n              }\n              return _context9.a(2, {\n                encodedTxData: this.licenseAttachmentWorkflowsClient.registerIpAndAttachPilTermsEncode(_transformRequest)\n              });\n            case 6:\n              _context9.n = 7;\n              return this.licenseAttachmentWorkflowsClient.registerIpAndAttachPilTerms(_transformRequest);\n            case 7:\n              txHash = _context9.v;\n              _context9.n = 8;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 8:\n              txReceipt = _context9.v;\n              log = this.getIpIdAndTokenIdsFromEvent(txReceipt)[0];\n              _context9.n = 9;\n              return this.getLicenseTermsId(licenseTerms);\n            case 9:\n              licenseTermsIds = _context9.v;\n              _context9.n = 10;\n              return this.setMaxLicenseTokens({\n                maxLicenseTokensData: request.licenseTermsData,\n                licensorIpId: log.ipId,\n                licenseTermsIds: licenseTermsIds\n              });\n            case 10:\n              maxLicenseTokensTxHashes = _context9.v;\n              return _context9.a(2, _objectSpread2(_objectSpread2({\n                txHash: txHash,\n                licenseTermsIds: licenseTermsIds\n              }, maxLicenseTokensTxHashes.length > 0 && {\n                maxLicenseTokensTxHashes: maxLicenseTokensTxHashes\n              }), log));\n            case 11:\n              _context9.n = 13;\n              break;\n            case 12:\n              _context9.p = 12;\n              _t11 = _context9.v;\n              return _context9.a(2, handleError(_t11, \"Failed to register IP and attach PIL terms\"));\n            case 13:\n              return _context9.a(2);\n          }\n        }, _callee9, this, [[0, 12]]);\n      }));\n      function registerIpAndAttachPilTerms(_x0) {\n        return _registerIpAndAttachPilTerms.apply(this, arguments);\n      }\n      return registerIpAndAttachPilTerms;\n    }()\n    /**\n     * Register the given NFT as a derivative IP with metadata without using license tokens.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerDerivativeIp\",\n    value: (function () {\n      var _registerDerivativeIp = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0(request) {\n        var _this4 = this;\n        var _request$txOptions6, _request$options3, tokenId, ipIdAddress, isRegistered, _yield$transformRegis3, _transformRequest2, encodedTxData, contractCall, _t12;\n        return _regenerator().w(function (_context0) {\n          while (1) switch (_context0.p = _context0.n) {\n            case 0:\n              _context0.p = 0;\n              tokenId = BigInt(request.tokenId);\n              _context0.n = 1;\n              return getIpIdAddress({\n                nftContract: request.nftContract,\n                tokenId: tokenId,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              ipIdAddress = _context0.v;\n              _context0.n = 2;\n              return this.isRegistered(ipIdAddress);\n            case 2:\n              isRegistered = _context0.v;\n              if (!isRegistered) {\n                _context0.n = 3;\n                break;\n              }\n              throw new Error(\"The NFT with id \".concat(tokenId, \" is already registered as IP.\"));\n            case 3:\n              _context0.n = 4;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 4:\n              _yield$transformRegis3 = _context0.v;\n              _transformRequest2 = _yield$transformRegis3.transformRequest;\n              encodedTxData = this.derivativeWorkflowsClient.registerIpAndMakeDerivativeEncode(_transformRequest2);\n              if (!((_request$txOptions6 = request.txOptions) !== null && _request$txOptions6 !== void 0 && _request$txOptions6.encodedTxDataOnly)) {\n                _context0.n = 5;\n                break;\n              }\n              return _context0.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 5:\n              contractCall = function contractCall() {\n                return _this4.derivativeWorkflowsClient.registerIpAndMakeDerivative(_transformRequest2);\n              };\n              return _context0.a(2, this.handleRegistrationWithFees({\n                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options3 = request.options) === null || _request$options3 === void 0 ? void 0 : _request$options3.wipOptions), {}, {\n                  useMulticallWhenPossible: false\n                }),\n                sender: this.walletAddress,\n                spgSpenderAddress: this.derivativeWorkflowsClient.address,\n                derivData: _transformRequest2.derivData,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                txOptions: request.txOptions\n              }));\n            case 6:\n              _context0.p = 6;\n              _t12 = _context0.v;\n              return _context0.a(2, handleError(_t12, \"Failed to register derivative IP\"));\n          }\n        }, _callee0, this, [[0, 6]]);\n      }));\n      function registerDerivativeIp(_x1) {\n        return _registerDerivativeIp.apply(this, arguments);\n      }\n      return registerDerivativeIp;\n    }()\n    /**\n     * Mint an NFT from a collection and register it as a derivative IP without license tokens.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"mintAndRegisterIpAndMakeDerivative\",\n    value: (function () {\n      var _mintAndRegisterIpAndMakeDerivative = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(request) {\n        var _this5 = this;\n        var _request$txOptions7, _request$options4, spgNftContract, _yield$transformRegis4, _transformRequest3, encodedTxData, contractCall, _t13;\n        return _regenerator().w(function (_context1) {\n          while (1) switch (_context1.p = _context1.n) {\n            case 0:\n              _context1.p = 0;\n              spgNftContract = validateAddress(request.spgNftContract);\n              _context1.n = 1;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              _yield$transformRegis4 = _context1.v;\n              _transformRequest3 = _yield$transformRegis4.transformRequest;\n              encodedTxData = this.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivativeEncode(_transformRequest3);\n              if (!((_request$txOptions7 = request.txOptions) !== null && _request$txOptions7 !== void 0 && _request$txOptions7.encodedTxDataOnly)) {\n                _context1.n = 2;\n                break;\n              }\n              return _context1.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 2:\n              contractCall = function contractCall() {\n                return _this5.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivative(_transformRequest3);\n              };\n              return _context1.a(2, this.handleRegistrationWithFees({\n                wipOptions: (_request$options4 = request.options) === null || _request$options4 === void 0 ? void 0 : _request$options4.wipOptions,\n                sender: this.walletAddress,\n                spgSpenderAddress: this.derivativeWorkflowsClient.address,\n                spgNftContract: spgNftContract,\n                derivData: _transformRequest3.derivData,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                txOptions: request.txOptions\n              }));\n            case 3:\n              _context1.p = 3;\n              _t13 = _context1.v;\n              return _context1.a(2, handleError(_t13, \"Failed to mint and register IP and make derivative\"));\n          }\n        }, _callee1, this, [[0, 3]]);\n      }));\n      function mintAndRegisterIpAndMakeDerivative(_x10) {\n        return _mintAndRegisterIpAndMakeDerivative.apply(this, arguments);\n      }\n      return mintAndRegisterIpAndMakeDerivative;\n    }()\n    /**\n     * Batch mint an NFT from a collection and register it as a derivative IP without license tokens.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"batchMintAndRegisterIpAndMakeDerivative\",\n    value: (function () {\n      var _batchMintAndRegisterIpAndMakeDerivative = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10(request) {\n        var calldata, _iterator4, _step4, arg, result, txHash, txReceipt, _t14, _t15, _t16;\n        return _regenerator().w(function (_context10) {\n          while (1) switch (_context10.p = _context10.n) {\n            case 0:\n              _context10.p = 0;\n              calldata = [];\n              _iterator4 = _createForOfIteratorHelper(request.args);\n              _context10.p = 1;\n              _iterator4.s();\n            case 2:\n              if ((_step4 = _iterator4.n()).done) {\n                _context10.n = 7;\n                break;\n              }\n              arg = _step4.value;\n              _context10.p = 3;\n              _context10.n = 4;\n              return this.mintAndRegisterIpAndMakeDerivative(_objectSpread2(_objectSpread2({}, arg), {}, {\n                txOptions: {\n                  encodedTxDataOnly: true\n                }\n              }));\n            case 4:\n              result = _context10.v;\n              calldata.push(result.encodedTxData.data);\n              _context10.n = 6;\n              break;\n            case 5:\n              _context10.p = 5;\n              _t14 = _context10.v;\n              throw new Error(_t14.message.replace(\"Failed to mint and register IP and make derivative: \", \"\").trim());\n            case 6:\n              _context10.n = 2;\n              break;\n            case 7:\n              _context10.n = 9;\n              break;\n            case 8:\n              _context10.p = 8;\n              _t15 = _context10.v;\n              _iterator4.e(_t15);\n            case 9:\n              _context10.p = 9;\n              _iterator4.f();\n              return _context10.f(9);\n            case 10:\n              _context10.n = 11;\n              return this.derivativeWorkflowsClient.multicall({\n                data: calldata\n              });\n            case 11:\n              txHash = _context10.v;\n              _context10.n = 12;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 12:\n              txReceipt = _context10.v;\n              return _context10.a(2, {\n                txHash: txHash,\n                results: this.getIpIdAndTokenIdsFromEvent(txReceipt, \"spgNftContract\")\n              });\n            case 13:\n              _context10.p = 13;\n              _t16 = _context10.v;\n              return _context10.a(2, handleError(_t16, \"Failed to batch mint and register IP and make derivative\"));\n          }\n        }, _callee10, this, [[3, 5], [1, 8, 9, 10], [0, 13]]);\n      }));\n      function batchMintAndRegisterIpAndMakeDerivative(_x11) {\n        return _batchMintAndRegisterIpAndMakeDerivative.apply(this, arguments);\n      }\n      return batchMintAndRegisterIpAndMakeDerivative;\n    }()\n    /**\n     * Mint an NFT from a SPGNFT collection and register it with metadata as an IP.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"mintAndRegisterIp\",\n    value: (function () {\n      var _mintAndRegisterIp = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11(request) {\n        var _this6 = this;\n        var _request$txOptions8, _request$options5, _object, encodedTxData, contractCall, _t17;\n        return _regenerator().w(function (_context11) {\n          while (1) switch (_context11.p = _context11.n) {\n            case 0:\n              _context11.p = 0;\n              _object = {\n                spgNftContract: validateAddress(request.spgNftContract),\n                recipient: validateAddress(request.recipient || this.walletAddress),\n                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),\n                allowDuplicates: request.allowDuplicates || true\n              };\n              encodedTxData = this.registrationWorkflowsClient.mintAndRegisterIpEncode(_object);\n              if (!((_request$txOptions8 = request.txOptions) !== null && _request$txOptions8 !== void 0 && _request$txOptions8.encodedTxDataOnly)) {\n                _context11.n = 1;\n                break;\n              }\n              return _context11.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 1:\n              contractCall = function contractCall() {\n                return _this6.registrationWorkflowsClient.mintAndRegisterIp(_object);\n              };\n              return _context11.a(2, this.handleRegistrationWithFees({\n                sender: this.walletAddress,\n                spgSpenderAddress: this.registrationWorkflowsClient.address,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                spgNftContract: _object.spgNftContract,\n                txOptions: request.txOptions,\n                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options5 = request.options) === null || _request$options5 === void 0 ? void 0 : _request$options5.wipOptions), {}, {\n                  useMulticallWhenPossible: false\n                })\n              }));\n            case 2:\n              _context11.p = 2;\n              _t17 = _context11.v;\n              return _context11.a(2, handleError(_t17, \"Failed to mint and register IP\"));\n          }\n        }, _callee11, this, [[0, 2]]);\n      }));\n      function mintAndRegisterIp(_x12) {\n        return _mintAndRegisterIp.apply(this, arguments);\n      }\n      return mintAndRegisterIp;\n    }()\n    /**\n     * Batch mints NFTs from SPGNFT collections and registers them as IP assets.\n     *\n     * Optimizes transaction processing by grouping requests and automatically selecting the most efficient multicall strategy:\n     * - Uses `multicall3` for public minting contracts.\n     * - Uses `SPG's multicall` for private minting contracts.\n     *\n     * @remark\n     * For private minting, verifies the `caller` has the `minter role` and avoids `multicall3` batching to ensure correct `msg.sender`.\n     *\n     * Automatically manages minting fees, including wrapping IP tokens into WIP tokens if balances are insufficient, and checks or sets allowances for all spenders as needed.\n     * The `multicall` and token handling behavior can be configured via `wipOptions`.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"batchMintAndRegisterIp\",\n    value: (function () {\n      var _batchMintAndRegisterIp = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14(request) {\n        var _this7 = this;\n        var publicMintEncodedTxs, publicMintSpenders, privateMintEncodedTxs, privateMintSpenders, publicMintFeesTotal, privateMintFeesTotal, _iterator5, _step5, req, registrationRequest, isPublicMinting, nftMintFee, encodeTx, isMinterRole, handlePublicMintTransactions, handlePrivateMintTransactions, transactionResponses, publicMintResponse, privateMintResponse, _t18, _t19, _t20, _t21;\n        return _regenerator().w(function (_context14) {\n          while (1) switch (_context14.p = _context14.n) {\n            case 0:\n              _context14.p = 0;\n              publicMintEncodedTxs = [];\n              publicMintSpenders = [];\n              privateMintEncodedTxs = [];\n              privateMintSpenders = [];\n              publicMintFeesTotal = 0n;\n              privateMintFeesTotal = 0n;\n              _iterator5 = _createForOfIteratorHelper(request.requests);\n              _context14.p = 1;\n              _iterator5.s();\n            case 2:\n              if ((_step5 = _iterator5.n()).done) {\n                _context14.n = 9;\n                break;\n              }\n              req = _step5.value;\n              registrationRequest = {\n                spgNftContract: validateAddress(req.spgNftContract),\n                recipient: validateAddress(req.recipient || this.walletAddress),\n                ipMetadata: getIpMetadataForWorkflow(req.ipMetadata),\n                allowDuplicates: req.allowDuplicates || true\n              };\n              _context14.n = 3;\n              return getPublicMinting(req.spgNftContract, this.rpcClient);\n            case 3:\n              isPublicMinting = _context14.v;\n              _context14.n = 4;\n              return calculateSPGWipMintFee(new SpgnftImplReadOnlyClient(this.rpcClient, registrationRequest.spgNftContract));\n            case 4:\n              nftMintFee = _context14.v;\n              encodeTx = {\n                to: this.registrationWorkflowsClient.address,\n                data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                  abi: registrationWorkflowsAbi,\n                  functionName: \"mintAndRegisterIp\",\n                  args: [registrationRequest.spgNftContract, registrationRequest.recipient, registrationRequest.ipMetadata, registrationRequest.allowDuplicates]\n                })\n              };\n              if (!isPublicMinting) {\n                _context14.n = 5;\n                break;\n              }\n              publicMintFeesTotal += nftMintFee;\n              publicMintSpenders = mergeSpenders(publicMintSpenders, [{\n                address: registrationRequest.spgNftContract,\n                amount: nftMintFee\n              }]);\n              publicMintEncodedTxs.push(encodeTx);\n              _context14.n = 8;\n              break;\n            case 5:\n              _context14.n = 6;\n              return hasMinterRole(registrationRequest.spgNftContract, this.rpcClient, this.walletAddress);\n            case 6:\n              isMinterRole = _context14.v;\n              if (isMinterRole) {\n                _context14.n = 7;\n                break;\n              }\n              throw new Error(\"Caller \".concat(this.walletAddress, \" does not have the minter role for \").concat(registrationRequest.spgNftContract));\n            case 7:\n              privateMintFeesTotal += nftMintFee;\n              privateMintSpenders = mergeSpenders(privateMintSpenders, [{\n                address: registrationRequest.spgNftContract,\n                amount: nftMintFee\n              }]);\n              privateMintEncodedTxs.push(encodeTx);\n            case 8:\n              _context14.n = 2;\n              break;\n            case 9:\n              _context14.n = 11;\n              break;\n            case 10:\n              _context14.p = 10;\n              _t18 = _context14.v;\n              _iterator5.e(_t18);\n            case 11:\n              _context14.p = 11;\n              _iterator5.f();\n              return _context14.f(11);\n            case 12:\n              handlePublicMintTransactions = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {\n                  return _regenerator().w(function (_context12) {\n                    while (1) switch (_context12.n) {\n                      case 0:\n                        _context12.n = 1;\n                        return contractCallWithFees({\n                          totalFees: publicMintFeesTotal,\n                          options: {\n                            wipOptions: request.wipOptions\n                          },\n                          multicall3Address: _this7.multicall3Client.address,\n                          rpcClient: _this7.rpcClient,\n                          tokenSpenders: publicMintSpenders,\n                          contractCall: function contractCall() {\n                            return _this7.registrationWorkflowsClient.multicall({\n                              data: publicMintEncodedTxs.map(function (tx) {\n                                return tx.data;\n                              })\n                            });\n                          },\n                          sender: _this7.walletAddress,\n                          wallet: _this7.wallet,\n                          txOptions: request.txOptions,\n                          encodedTxs: publicMintEncodedTxs\n                        });\n                      case 1:\n                        return _context12.a(2, _context12.v);\n                    }\n                  }, _callee12);\n                }));\n                return function handlePublicMintTransactions() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n              handlePrivateMintTransactions = /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {\n                  return _regenerator().w(function (_context13) {\n                    while (1) switch (_context13.n) {\n                      case 0:\n                        _context13.n = 1;\n                        return contractCallWithFees({\n                          totalFees: privateMintFeesTotal,\n                          options: {\n                            wipOptions: _objectSpread2(_objectSpread2({}, request.wipOptions), {}, {\n                              useMulticallWhenPossible: false\n                            })\n                          },\n                          multicall3Address: _this7.multicall3Client.address,\n                          rpcClient: _this7.rpcClient,\n                          tokenSpenders: privateMintSpenders,\n                          contractCall: function contractCall() {\n                            return _this7.registrationWorkflowsClient.multicall({\n                              data: privateMintEncodedTxs.map(function (tx) {\n                                return tx.data;\n                              })\n                            });\n                          },\n                          sender: _this7.walletAddress,\n                          wallet: _this7.wallet,\n                          txOptions: request.txOptions,\n                          encodedTxs: privateMintEncodedTxs\n                        });\n                      case 1:\n                        return _context13.a(2, _context13.v);\n                    }\n                  }, _callee13);\n                }));\n                return function handlePrivateMintTransactions() {\n                  return _ref3.apply(this, arguments);\n                };\n              }();\n              transactionResponses = [];\n              if (!(privateMintEncodedTxs.length === 0)) {\n                _context14.n = 14;\n                break;\n              }\n              _context14.n = 13;\n              return handlePublicMintTransactions();\n            case 13:\n              _t19 = _context14.v;\n              transactionResponses = [_t19];\n              _context14.n = 19;\n              break;\n            case 14:\n              if (!(publicMintEncodedTxs.length === 0)) {\n                _context14.n = 16;\n                break;\n              }\n              _context14.n = 15;\n              return handlePrivateMintTransactions();\n            case 15:\n              _t20 = _context14.v;\n              transactionResponses = [_t20];\n              _context14.n = 19;\n              break;\n            case 16:\n              _context14.n = 17;\n              return handlePublicMintTransactions();\n            case 17:\n              publicMintResponse = _context14.v;\n              _context14.n = 18;\n              return handlePrivateMintTransactions();\n            case 18:\n              privateMintResponse = _context14.v;\n              transactionResponses = [publicMintResponse, privateMintResponse];\n            case 19:\n              return _context14.a(2, {\n                registrationResults: transactionResponses.map(function (r) {\n                  return {\n                    txHash: r.txHash,\n                    receipt: r.receipt,\n                    ipIdsAndTokenIds: _this7.getIpIdAndTokenIdsFromEvent(r.receipt, \"spgNftContract\")\n                  };\n                })\n              });\n            case 20:\n              _context14.p = 20;\n              _t21 = _context14.v;\n              return _context14.a(2, handleError(_t21, \"Failed to batch mint and register IP\"));\n          }\n        }, _callee14, this, [[1, 10, 11, 12], [0, 20]]);\n      }));\n      function batchMintAndRegisterIp(_x13) {\n        return _batchMintAndRegisterIp.apply(this, arguments);\n      }\n      return batchMintAndRegisterIp;\n    }()\n    /**\n     * Register Programmable IP License Terms (if unregistered) and attach it to IP.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} event.\n     */\n    )\n  }, {\n    key: \"registerPilTermsAndAttach\",\n    value: (function () {\n      var _registerPilTermsAndAttach = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15(request) {\n        var _request$txOptions9, ipId, isRegistered, _yield$validateLicens3, licenseTerms, licenseTermsData, calculatedDeadline, ipAccount, _yield$ipAccount$stat2, state, signature, _object2, txHash, licenseTermsIds, maxLicenseTokensTxHashes, _t22;\n        return _regenerator().w(function (_context15) {\n          while (1) switch (_context15.p = _context15.n) {\n            case 0:\n              _context15.p = 0;\n              ipId = request.ipId;\n              _context15.n = 1;\n              return this.isRegistered(ipId);\n            case 1:\n              isRegistered = _context15.v;\n              if (isRegistered) {\n                _context15.n = 2;\n                break;\n              }\n              throw new Error(\"The IP with id \".concat(ipId, \" is not registered.\"));\n            case 2:\n              _context15.n = 3;\n              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient, this.chainId);\n            case 3:\n              _yield$validateLicens3 = _context15.v;\n              licenseTerms = _yield$validateLicens3.licenseTerms;\n              licenseTermsData = _yield$validateLicens3.licenseTermsData;\n              _context15.n = 4;\n              return getCalculatedDeadline(this.rpcClient, request.deadline);\n            case 4:\n              calculatedDeadline = _context15.v;\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, ipId);\n              _context15.n = 5;\n              return ipAccount.state();\n            case 5:\n              _yield$ipAccount$stat2 = _context15.v;\n              state = _yield$ipAccount$stat2.result;\n              _context15.n = 6;\n              return generateOperationSignature({\n                ipIdAddress: ipId,\n                methodType: SignatureMethodType.REGISTER_PIL_TERMS_AND_ATTACH,\n                deadline: calculatedDeadline,\n                state: state,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 6:\n              signature = _context15.v;\n              _object2 = {\n                ipId: ipId,\n                licenseTermsData: licenseTermsData,\n                sigAttachAndConfig: {\n                  signer: validateAddress(this.walletAddress),\n                  deadline: calculatedDeadline,\n                  signature: signature\n                }\n              };\n              if (!((_request$txOptions9 = request.txOptions) !== null && _request$txOptions9 !== void 0 && _request$txOptions9.encodedTxDataOnly)) {\n                _context15.n = 7;\n                break;\n              }\n              return _context15.a(2, {\n                encodedTxData: this.licenseAttachmentWorkflowsClient.registerPilTermsAndAttachEncode(_object2)\n              });\n            case 7:\n              _context15.n = 8;\n              return this.licenseAttachmentWorkflowsClient.registerPilTermsAndAttach(_object2);\n            case 8:\n              txHash = _context15.v;\n              _context15.n = 9;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 9:\n              _context15.n = 10;\n              return this.getLicenseTermsId(licenseTerms);\n            case 10:\n              licenseTermsIds = _context15.v;\n              _context15.n = 11;\n              return this.setMaxLicenseTokens({\n                maxLicenseTokensData: request.licenseTermsData,\n                licensorIpId: ipId,\n                licenseTermsIds: licenseTermsIds\n              });\n            case 11:\n              maxLicenseTokensTxHashes = _context15.v;\n              return _context15.a(2, _objectSpread2({\n                txHash: txHash,\n                licenseTermsIds: licenseTermsIds\n              }, maxLicenseTokensTxHashes.length > 0 && {\n                maxLicenseTokensTxHashes: maxLicenseTokensTxHashes\n              }));\n            case 12:\n              _context15.n = 14;\n              break;\n            case 13:\n              _context15.p = 13;\n              _t22 = _context15.v;\n              return _context15.a(2, handleError(_t22, \"Failed to register PIL terms and attach\"));\n            case 14:\n              return _context15.a(2);\n          }\n        }, _callee15, this, [[0, 13]]);\n      }));\n      function registerPilTermsAndAttach(_x14) {\n        return _registerPilTermsAndAttach.apply(this, arguments);\n      }\n      return registerPilTermsAndAttach;\n    }()\n    /**\n     * Mint an NFT from a collection and register it as a derivative IP using license tokens.\n     * Requires caller to have the minter role or the SPG NFT to allow public minting. Caller must own the license tokens and have approved DerivativeWorkflows to transfer them.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"mintAndRegisterIpAndMakeDerivativeWithLicenseTokens\",\n    value: (function () {\n      var _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee17(request) {\n        var _this8 = this;\n        var _request$txOptions0, _request$options6, licenseTokenIds, _object3, encodedTxData, contractCall, _t23;\n        return _regenerator().w(function (_context17) {\n          while (1) switch (_context17.p = _context17.n) {\n            case 0:\n              _context17.p = 0;\n              _context17.n = 1;\n              return this.validateLicenseTokenIds(request.licenseTokenIds);\n            case 1:\n              licenseTokenIds = _context17.v;\n              _object3 = {\n                spgNftContract: validateAddress(request.spgNftContract),\n                recipient: validateAddress(request.recipient || this.walletAddress),\n                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),\n                licenseTokenIds: licenseTokenIds,\n                royaltyContext: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n                maxRts: Number(request.maxRts),\n                allowDuplicates: request.allowDuplicates || true\n              };\n              validateMaxRts(_object3.maxRts);\n              encodedTxData = this.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivativeWithLicenseTokensEncode(_object3);\n              if (!((_request$txOptions0 = request.txOptions) !== null && _request$txOptions0 !== void 0 && _request$txOptions0.encodedTxDataOnly)) {\n                _context17.n = 2;\n                break;\n              }\n              return _context17.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 2:\n              contractCall = /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16() {\n                  return _regenerator().w(function (_context16) {\n                    while (1) switch (_context16.n) {\n                      case 0:\n                        return _context16.a(2, _this8.derivativeWorkflowsClient.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(_object3));\n                    }\n                  }, _callee16);\n                }));\n                return function contractCall() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n              return _context17.a(2, this.handleRegistrationWithFees({\n                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options6 = request.options) === null || _request$options6 === void 0 ? void 0 : _request$options6.wipOptions), {}, {\n                  // need to disable multicall to avoid needing to transfer the license\n                  // token to the multicall contract.\n                  useMulticallWhenPossible: false\n                }),\n                sender: this.walletAddress,\n                spgNftContract: _object3.spgNftContract,\n                spgSpenderAddress: this.derivativeWorkflowsClient.address,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                txOptions: request.txOptions\n              }));\n            case 3:\n              _context17.p = 3;\n              _t23 = _context17.v;\n              return _context17.a(2, handleError(_t23, \"Failed to mint and register IP and make derivative with license tokens\"));\n          }\n        }, _callee17, this, [[0, 3]]);\n      }));\n      function mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(_x15) {\n        return _mintAndRegisterIpAndMakeDerivativeWithLicenseTokens.apply(this, arguments);\n      }\n      return mintAndRegisterIpAndMakeDerivativeWithLicenseTokens;\n    }()\n    /**\n     * Register the given NFT as a derivative IP using license tokens.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerIpAndMakeDerivativeWithLicenseTokens\",\n    value: (function () {\n      var _registerIpAndMakeDerivativeWithLicenseTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee18(request) {\n        var _request$txOptions1, tokenId, ipIdAddress, isRegistered, licenseTokenIds, calculatedDeadline, signature, _object4, txHash, receipt, log, _t24;\n        return _regenerator().w(function (_context18) {\n          while (1) switch (_context18.p = _context18.n) {\n            case 0:\n              _context18.p = 0;\n              tokenId = BigInt(request.tokenId);\n              _context18.n = 1;\n              return getIpIdAddress({\n                nftContract: request.nftContract,\n                tokenId: tokenId,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              ipIdAddress = _context18.v;\n              _context18.n = 2;\n              return this.isRegistered(ipIdAddress);\n            case 2:\n              isRegistered = _context18.v;\n              if (!isRegistered) {\n                _context18.n = 3;\n                break;\n              }\n              throw new Error(\"The NFT with id \".concat(tokenId, \" is already registered as IP.\"));\n            case 3:\n              _context18.n = 4;\n              return this.validateLicenseTokenIds(request.licenseTokenIds);\n            case 4:\n              licenseTokenIds = _context18.v;\n              _context18.n = 5;\n              return getCalculatedDeadline(this.rpcClient, request.deadline);\n            case 5:\n              calculatedDeadline = _context18.v;\n              _context18.n = 6;\n              return generateOperationSignature({\n                ipIdAddress: ipIdAddress,\n                methodType: SignatureMethodType.REGISTER_IP_AND_MAKE_DERIVATIVE_WITH_LICENSE_TOKENS,\n                deadline: calculatedDeadline,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 6:\n              signature = _context18.v;\n              _object4 = _objectSpread2(_objectSpread2({}, request), {}, {\n                tokenId: tokenId,\n                licenseTokenIds: licenseTokenIds,\n                royaltyContext: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n                ipMetadata: getIpMetadataForWorkflow(request.ipMetadata),\n                sigMetadataAndRegister: {\n                  signer: validateAddress(this.walletAddress),\n                  deadline: calculatedDeadline,\n                  signature: signature\n                },\n                maxRts: Number(request.maxRts)\n              });\n              validateMaxRts(_object4.maxRts);\n              if (!((_request$txOptions1 = request.txOptions) !== null && _request$txOptions1 !== void 0 && _request$txOptions1.encodedTxDataOnly)) {\n                _context18.n = 7;\n                break;\n              }\n              return _context18.a(2, {\n                encodedTxData: this.derivativeWorkflowsClient.registerIpAndMakeDerivativeWithLicenseTokensEncode(_object4)\n              });\n            case 7:\n              _context18.n = 8;\n              return this.derivativeWorkflowsClient.registerIpAndMakeDerivativeWithLicenseTokens(_object4);\n            case 8:\n              txHash = _context18.v;\n              _context18.n = 9;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 9:\n              receipt = _context18.v;\n              log = this.getIpIdAndTokenIdsFromEvent(receipt)[0];\n              return _context18.a(2, _objectSpread2({\n                txHash: txHash\n              }, log));\n            case 10:\n              _context18.n = 12;\n              break;\n            case 11:\n              _context18.p = 11;\n              _t24 = _context18.v;\n              return _context18.a(2, handleError(_t24, \"Failed to register IP and make derivative with license tokens\"));\n            case 12:\n              return _context18.a(2);\n          }\n        }, _callee18, this, [[0, 11]]);\n      }));\n      function registerIpAndMakeDerivativeWithLicenseTokens(_x16) {\n        return _registerIpAndMakeDerivativeWithLicenseTokens.apply(this, arguments);\n      }\n      return registerIpAndMakeDerivativeWithLicenseTokens;\n    }()\n    /**\n     * Register the given NFT and attach license terms and distribute royalty\n     * tokens. In order to successfully distribute royalty tokens, the first\n     * license terms attached to the IP must be a commercial license.\n     *\n     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/royalty/IRoyaltyModule.sol#L88 | `IpRoyaltyVaultDeployed`} events.\n     */\n    )\n  }, {\n    key: \"registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens\",\n    value: (function () {\n      var _registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee19(request) {\n        var _getRoyaltyShares, royaltyShares, totalAmount, _yield$validateLicens4, licenseTerms, calculatedDeadline, ipIdAddress, isRegistered, _yield$transformRegis5, _transformRequest4, registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash, txReceipt, ipId, licenseTermsIds, ipRoyaltyVault, distributeRoyaltyTokensTxHash, maxLicenseTokensTxHashes, _t25;\n        return _regenerator().w(function (_context19) {\n          while (1) switch (_context19.p = _context19.n) {\n            case 0:\n              _context19.p = 0;\n              _getRoyaltyShares = getRoyaltyShares(request.royaltyShares), royaltyShares = _getRoyaltyShares.royaltyShares, totalAmount = _getRoyaltyShares.totalAmount;\n              _context19.n = 1;\n              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient, this.chainId);\n            case 1:\n              _yield$validateLicens4 = _context19.v;\n              licenseTerms = _yield$validateLicens4.licenseTerms;\n              _context19.n = 2;\n              return getCalculatedDeadline(this.rpcClient, request.deadline);\n            case 2:\n              calculatedDeadline = _context19.v;\n              _context19.n = 3;\n              return getIpIdAddress({\n                nftContract: validateAddress(request.nftContract),\n                tokenId: BigInt(request.tokenId),\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 3:\n              ipIdAddress = _context19.v;\n              _context19.n = 4;\n              return this.isRegistered(ipIdAddress);\n            case 4:\n              isRegistered = _context19.v;\n              if (!isRegistered) {\n                _context19.n = 5;\n                break;\n              }\n              throw new Error(\"The NFT with id \".concat(request.tokenId, \" is already registered as IP.\"));\n            case 5:\n              _context19.n = 6;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 6:\n              _yield$transformRegis5 = _context19.v;\n              _transformRequest4 = _yield$transformRegis5.transformRequest;\n              _context19.n = 7;\n              return this.royaltyTokenDistributionWorkflowsClient.registerIpAndAttachPilTermsAndDeployRoyaltyVault(_transformRequest4);\n            case 7:\n              registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash = _context19.v;\n              _context19.n = 8;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash\n              }));\n            case 8:\n              txReceipt = _context19.v;\n              ipId = this.getIpIdAndTokenIdsFromEvent(txReceipt)[0].ipId;\n              _context19.n = 9;\n              return this.getLicenseTermsId(licenseTerms);\n            case 9:\n              licenseTermsIds = _context19.v;\n              ipRoyaltyVault = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(txReceipt)[0].ipRoyaltyVault;\n              _context19.n = 10;\n              return this.distributeRoyaltyTokens({\n                ipId: ipId,\n                deadline: calculatedDeadline,\n                ipRoyaltyVault: ipRoyaltyVault,\n                royaltyShares: royaltyShares,\n                totalAmount: totalAmount,\n                txOptions: request.txOptions\n              });\n            case 10:\n              distributeRoyaltyTokensTxHash = _context19.v;\n              _context19.n = 11;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: distributeRoyaltyTokensTxHash\n              }));\n            case 11:\n              _context19.n = 12;\n              return this.setMaxLicenseTokens({\n                maxLicenseTokensData: request.licenseTermsData,\n                licensorIpId: ipId,\n                licenseTermsIds: licenseTermsIds\n              });\n            case 12:\n              maxLicenseTokensTxHashes = _context19.v;\n              return _context19.a(2, _objectSpread2({\n                registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash: registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash,\n                distributeRoyaltyTokensTxHash: distributeRoyaltyTokensTxHash,\n                ipId: ipId,\n                licenseTermsIds: licenseTermsIds,\n                ipRoyaltyVault: ipRoyaltyVault\n              }, maxLicenseTokensTxHashes.length > 0 && {\n                maxLicenseTokensTxHashes: maxLicenseTokensTxHashes\n              }));\n            case 13:\n              _context19.p = 13;\n              _t25 = _context19.v;\n              return _context19.a(2, handleError(_t25, \"Failed to register IP and attach license terms and distribute royalty tokens\"));\n          }\n        }, _callee19, this, [[0, 13]]);\n      }));\n      function registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens(_x17) {\n        return _registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens.apply(this, arguments);\n      }\n      return registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens;\n    }()\n    /**\n     * Register the given NFT as a derivative IP and attach license terms and distribute royalty tokens.  In order to successfully distribute royalty tokens, the license terms attached to the IP must be\n     * a commercial license.\n     *\n     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/royalty/IRoyaltyModule.sol#L88| `IpRoyaltyVaultDeployed`} events.\n     */\n    )\n  }, {\n    key: \"registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens\",\n    value: (function () {\n      var _registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee20(request) {\n        var _this9 = this;\n        var _request$options7, ipIdAddress, _yield$transformRegis6, _transformRequest5, _getRoyaltyShares2, royaltyShares, totalAmount, isRegistered, encodedTxData, contractCall, _yield$this$handleReg, txHash, ipId, tokenId, receipt, ipRoyaltyVault, distributeRoyaltyTokensTxHash, _t26;\n        return _regenerator().w(function (_context20) {\n          while (1) switch (_context20.p = _context20.n) {\n            case 0:\n              _context20.p = 0;\n              _context20.n = 1;\n              return getIpIdAddress({\n                nftContract: validateAddress(request.nftContract),\n                tokenId: BigInt(request.tokenId),\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              ipIdAddress = _context20.v;\n              _context20.n = 2;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 2:\n              _yield$transformRegis6 = _context20.v;\n              _transformRequest5 = _yield$transformRegis6.transformRequest;\n              _getRoyaltyShares2 = getRoyaltyShares(request.royaltyShares), royaltyShares = _getRoyaltyShares2.royaltyShares, totalAmount = _getRoyaltyShares2.totalAmount;\n              _context20.n = 3;\n              return this.isRegistered(ipIdAddress);\n            case 3:\n              isRegistered = _context20.v;\n              if (!isRegistered) {\n                _context20.n = 4;\n                break;\n              }\n              throw new Error(\"The NFT with id \".concat(request.tokenId, \" is already registered as IP.\"));\n            case 4:\n              encodedTxData = this.royaltyTokenDistributionWorkflowsClient.registerIpAndMakeDerivativeAndDeployRoyaltyVaultEncode(_transformRequest5);\n              contractCall = function contractCall() {\n                return _this9.royaltyTokenDistributionWorkflowsClient.registerIpAndMakeDerivativeAndDeployRoyaltyVault(_transformRequest5);\n              };\n              _context20.n = 5;\n              return this.handleRegistrationWithFees({\n                wipOptions: _objectSpread2(_objectSpread2({}, (_request$options7 = request.options) === null || _request$options7 === void 0 ? void 0 : _request$options7.wipOptions), {}, {\n                  useMulticallWhenPossible: false\n                }),\n                sender: this.walletAddress,\n                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,\n                derivData: _transformRequest5.derivData,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                txOptions: _objectSpread2({}, request.txOptions)\n              });\n            case 5:\n              _yield$this$handleReg = _context20.v;\n              txHash = _yield$this$handleReg.txHash;\n              ipId = _yield$this$handleReg.ipId;\n              tokenId = _yield$this$handleReg.tokenId;\n              receipt = _yield$this$handleReg.receipt;\n              if (!(tokenId === undefined || !ipId || !receipt)) {\n                _context20.n = 6;\n                break;\n              }\n              throw new Error(\"Failed to register derivative ip and deploy royalty vault.\");\n            case 6:\n              ipRoyaltyVault = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(receipt).filter(function (item) {\n                return item.ipId === ipId;\n              })[0].ipRoyaltyVault;\n              _context20.n = 7;\n              return this.distributeRoyaltyTokens({\n                ipId: ipId,\n                deadline: request.deadline,\n                ipRoyaltyVault: ipRoyaltyVault,\n                royaltyShares: royaltyShares,\n                totalAmount: totalAmount,\n                txOptions: request.txOptions\n              });\n            case 7:\n              distributeRoyaltyTokensTxHash = _context20.v;\n              _context20.n = 8;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: distributeRoyaltyTokensTxHash\n              }));\n            case 8:\n              return _context20.a(2, {\n                registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash: txHash,\n                distributeRoyaltyTokensTxHash: distributeRoyaltyTokensTxHash,\n                ipId: ipId,\n                tokenId: tokenId,\n                ipRoyaltyVault: ipRoyaltyVault\n              });\n            case 9:\n              _context20.p = 9;\n              _t26 = _context20.v;\n              return _context20.a(2, handleError(_t26, \"Failed to register derivative IP and attach license terms and distribute royalty tokens\"));\n          }\n        }, _callee20, this, [[0, 9]]);\n      }));\n      function registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens(_x18) {\n        return _registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens.apply(this, arguments);\n      }\n      return registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens;\n    }()\n    /**\n     * Mint an NFT and register the IP, attach PIL terms, and distribute royalty tokens.\n     *\n     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/royalty/IRoyaltyModule.sol#L88| `IpRoyaltyVaultDeployed`} events.\n     */\n    )\n  }, {\n    key: \"mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens\",\n    value: (function () {\n      var _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee21(request) {\n        var _this0 = this;\n        var _request$options8, _yield$validateLicens5, licenseTerms, _yield$transformRegis7, _transformRequest6, encodedTxData, contractCall, _yield$this$handleReg2, txHash, ipId, tokenId, receipt, licenseTermsIds, ipRoyaltyVault, maxLicenseTokensTxHashes, _t27;\n        return _regenerator().w(function (_context21) {\n          while (1) switch (_context21.p = _context21.n) {\n            case 0:\n              _context21.p = 0;\n              _context21.n = 1;\n              return validateLicenseTermsData(request.licenseTermsData, this.rpcClient, this.chainId);\n            case 1:\n              _yield$validateLicens5 = _context21.v;\n              licenseTerms = _yield$validateLicens5.licenseTerms;\n              _context21.n = 2;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 2:\n              _yield$transformRegis7 = _context21.v;\n              _transformRequest6 = _yield$transformRegis7.transformRequest;\n              encodedTxData = this.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensEncode(_transformRequest6);\n              contractCall = function contractCall() {\n                return _this0.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(_transformRequest6);\n              };\n              _context21.n = 3;\n              return this.handleRegistrationWithFees({\n                wipOptions: (_request$options8 = request.options) === null || _request$options8 === void 0 ? void 0 : _request$options8.wipOptions,\n                sender: this.walletAddress,\n                spgNftContract: _transformRequest6.spgNftContract,\n                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                txOptions: request.txOptions\n              });\n            case 3:\n              _yield$this$handleReg2 = _context21.v;\n              txHash = _yield$this$handleReg2.txHash;\n              ipId = _yield$this$handleReg2.ipId;\n              tokenId = _yield$this$handleReg2.tokenId;\n              receipt = _yield$this$handleReg2.receipt;\n              if (receipt) {\n                _context21.n = 4;\n                break;\n              }\n              return _context21.a(2, {\n                txHash: txHash\n              });\n            case 4:\n              _context21.n = 5;\n              return this.getLicenseTermsId(licenseTerms);\n            case 5:\n              licenseTermsIds = _context21.v;\n              ipRoyaltyVault = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(receipt)[0].ipRoyaltyVault;\n              _context21.n = 6;\n              return this.setMaxLicenseTokens({\n                maxLicenseTokensData: request.licenseTermsData,\n                licensorIpId: ipId,\n                licenseTermsIds: licenseTermsIds\n              });\n            case 6:\n              maxLicenseTokensTxHashes = _context21.v;\n              return _context21.a(2, _objectSpread2({\n                txHash: txHash,\n                ipId: ipId,\n                licenseTermsIds: licenseTermsIds,\n                ipRoyaltyVault: ipRoyaltyVault,\n                tokenId: tokenId\n              }, maxLicenseTokensTxHashes.length > 0 && {\n                maxLicenseTokensTxHashes: maxLicenseTokensTxHashes\n              }));\n            case 7:\n              _context21.p = 7;\n              _t27 = _context21.v;\n              return _context21.a(2, handleError(_t27, \"Failed to mint and register IP and attach PIL terms and distribute royalty tokens\"));\n          }\n        }, _callee21, this, [[0, 7]]);\n      }));\n      function mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(_x19) {\n        return _mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens.apply(this, arguments);\n      }\n      return mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens;\n    }()\n    /**\n     * Mint an NFT and register the IP, make a derivative, and distribute royalty tokens.\n     *\n     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.\n     */\n    )\n  }, {\n    key: \"mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens\",\n    value: (function () {\n      var _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee22(request) {\n        var _this1 = this;\n        var _request$options9, _yield$transformRegis8, _transformRequest7, encodedTxData, contractCall, _t28;\n        return _regenerator().w(function (_context22) {\n          while (1) switch (_context22.p = _context22.n) {\n            case 0:\n              _context22.p = 0;\n              _context22.n = 1;\n              return transformRegistrationRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              _yield$transformRegis8 = _context22.v;\n              _transformRequest7 = _yield$transformRegis8.transformRequest;\n              encodedTxData = this.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensEncode(_transformRequest7);\n              contractCall = function contractCall() {\n                return _this1.royaltyTokenDistributionWorkflowsClient.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(_transformRequest7);\n              };\n              _context22.n = 2;\n              return this.handleRegistrationWithFees({\n                spgNftContract: _transformRequest7.spgNftContract,\n                wipOptions: (_request$options9 = request.options) === null || _request$options9 === void 0 ? void 0 : _request$options9.wipOptions,\n                sender: this.walletAddress,\n                spgSpenderAddress: this.royaltyTokenDistributionWorkflowsClient.address,\n                derivData: _transformRequest7.derivData,\n                encodedTxs: [encodedTxData],\n                contractCall: contractCall,\n                txOptions: request.txOptions\n              });\n            case 2:\n              return _context22.a(2, _context22.v);\n            case 3:\n              _context22.p = 3;\n              _t28 = _context22.v;\n              return _context22.a(2, handleError(_t28, \"Failed to mint and register IP and make derivative and distribute royalty tokens\"));\n          }\n        }, _callee22, this, [[0, 3]]);\n      }));\n      function mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(_x20) {\n        return _mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens.apply(this, arguments);\n      }\n      return mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens;\n    }())\n  }, {\n    key: \"distributeRoyaltyTokens\",\n    value: function () {\n      var _distributeRoyaltyTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee23(request) {\n        var _yield$transferDistri, transformRequest, txHash;\n        return _regenerator().w(function (_context23) {\n          while (1) switch (_context23.n) {\n            case 0:\n              _context23.n = 1;\n              return transferDistributeRoyaltyTokensRequest({\n                request: request,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 1:\n              _yield$transferDistri = _context23.v;\n              transformRequest = _yield$transferDistri.transformRequest;\n              _context23.n = 2;\n              return this.royaltyTokenDistributionWorkflowsClient.distributeRoyaltyTokens(transformRequest);\n            case 2:\n              txHash = _context23.v;\n              _context23.n = 3;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 3:\n              return _context23.a(2, txHash);\n          }\n        }, _callee23, this);\n      }));\n      function distributeRoyaltyTokens(_x21) {\n        return _distributeRoyaltyTokens.apply(this, arguments);\n      }\n      return distributeRoyaltyTokens;\n    }()\n  }, {\n    key: \"isRegistered\",\n    value: function () {\n      var _isRegistered = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee24(ipId) {\n        return _regenerator().w(function (_context24) {\n          while (1) switch (_context24.n) {\n            case 0:\n              _context24.n = 1;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(ipId)\n              });\n            case 1:\n              return _context24.a(2, _context24.v);\n          }\n        }, _callee24, this);\n      }));\n      function isRegistered(_x22) {\n        return _isRegistered.apply(this, arguments);\n      }\n      return isRegistered;\n    }()\n    /**\n     * Batch register multiple IP assets in optimized transactions, supporting various registration methods:\n     * - {@link mintAndRegisterIpAndMakeDerivative}\n     * - {@link mintAndRegisterIpAssetWithPilTerms}\n     * - {@link mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens}\n     * - {@link mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens}\n     * - {@link registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens}\n     * - {@link registerIpAndAttachPilTerms}\n     * - {@link registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens}\n     * - {@link registerDerivativeIp}\n     *\n     * This method optimizes transaction processing by:\n     * 1. Transforming all requests into appropriate workflow formats\n     * 2. Grouping related workflow requests together\n     * 3. Intelligently selecting between multicall3 and SPG's multicall based on compatibility\n     *\n     * The batching strategy significantly reduces gas costs and improves transaction throughput\n     * by minimizing the number of separate blockchain transactions. It also handles complex\n     * workflows like royalty token distribution automatically.\n     *\n     * The method supports automatic token handling for minting fees:\n     * - If the wallet's IP token balance is insufficient to cover minting fees, it automatically wraps native IP tokens into WIP tokens.\n     * - It checks allowances for all required spenders and automatically approves them if their current allowance is lower than needed.\n     * - These automatic processes can be configured through the `wipOptions` parameter to control behavior like multicall usage and approval settings.\n     *\n     * @remark Multicall selection logic:\n     *\n     * 1. For `mintAndRegister*` methods:\n     *    - When `spgNftContract` has public minting disabled: Uses SPG's multicall\n     *    - When `spgNftContract` has public minting enabled: Uses multicall3\n     *    - Exception: {@link mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens} always uses\n     *      SPG's multicall due to contract logic\n     *\n     * 2. For `register*` methods:\n     *    - Always uses SPG's multicall for batching registration operations\n     */\n  }, {\n    key: \"batchRegisterIpAssetsWithOptimizedWorkflows\",\n    value: (function () {\n      var _batchRegisterIpAssetsWithOptimizedWorkflows = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee25(request) {\n        var _request$options0, _request$options10, transferWorkflowRequests, _iterator6, _step6, req, res, royaltyDistributionRequests, _yield$handleMultical, txResponses, aggregateRegistrationRequest, responses, royaltyTokensDistributionRequests, _iterator7, _step7, _step7$value, txHash, receipt, iPRegisteredLog, ipRoyaltyVaultEvent, response, distributeRoyaltyTokensTxHashes, _request$options1, _yield$handleMultical2, txResponse, registrationResults, _t29, _t30, _t31;\n        return _regenerator().w(function (_context25) {\n          while (1) switch (_context25.p = _context25.n) {\n            case 0:\n              _context25.p = 0;\n              // Transform requests into workflow format\n              transferWorkflowRequests = [];\n              _iterator6 = _createForOfIteratorHelper(request.requests);\n              _context25.p = 1;\n              _iterator6.s();\n            case 2:\n              if ((_step6 = _iterator6.n()).done) {\n                _context25.n = 5;\n                break;\n              }\n              req = _step6.value;\n              _context25.n = 3;\n              return transformRegistrationRequest({\n                request: req,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 3:\n              res = _context25.v;\n              transferWorkflowRequests.push(res);\n            case 4:\n              _context25.n = 2;\n              break;\n            case 5:\n              _context25.n = 7;\n              break;\n            case 6:\n              _context25.p = 6;\n              _t29 = _context25.v;\n              _iterator6.e(_t29);\n            case 7:\n              _context25.p = 7;\n              _iterator6.f();\n              return _context25.f(7);\n            case 8:\n              /**\n               * Extract royalty distribution requests from workflow responses that contain royalty shares\n               * We need to handle `distributeRoyaltyTokens` separately because this method requires\n               * a signature with the royalty vault address, which is only available after the initial registration\n               */\n              royaltyDistributionRequests = transferWorkflowRequests.filter(function (res) {\n                var _res$extraData;\n                return (_res$extraData = res.extraData) === null || _res$extraData === void 0 ? void 0 : _res$extraData.royaltyShares;\n              }).map(function (res) {\n                return {\n                  nftContract: res.transformRequest.nftContract,\n                  tokenId: res.transformRequest.tokenId,\n                  royaltyShares: res.extraData.royaltyShares,\n                  deadline: res.extraData.deadline\n                };\n              }); // Process initial registration transactions\n              _context25.n = 9;\n              return handleMulticall({\n                transferWorkflowRequests: transferWorkflowRequests,\n                multicall3Address: this.multicall3Client.address,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                walletAddress: this.walletAddress,\n                wipOptions: (_request$options0 = request.options) === null || _request$options0 === void 0 ? void 0 : _request$options0.wipOptions,\n                chainId: this.chainId\n              });\n            case 9:\n              _yield$handleMultical = _context25.v;\n              txResponses = _yield$handleMultical.response;\n              aggregateRegistrationRequest = _yield$handleMultical.aggregateRegistrationRequest;\n              responses = [];\n              royaltyTokensDistributionRequests = []; // Process each transaction response\n              _iterator7 = _createForOfIteratorHelper(txResponses);\n              _context25.p = 10;\n              _iterator7.s();\n            case 11:\n              if ((_step7 = _iterator7.n()).done) {\n                _context25.n = 14;\n                break;\n              }\n              _step7$value = _step7.value, txHash = _step7$value.txHash, receipt = _step7$value.receipt;\n              iPRegisteredLog = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(receipt);\n              ipRoyaltyVaultEvent = this.royaltyModuleEventClient.parseTxIpRoyaltyVaultDeployedEvent(receipt); // Prepare royalty distribution if needed\n              _context25.n = 12;\n              return prepareRoyaltyTokensDistributionRequests({\n                royaltyDistributionRequests: royaltyDistributionRequests,\n                ipRegisteredLog: iPRegisteredLog,\n                ipRoyaltyVault: ipRoyaltyVaultEvent,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId\n              });\n            case 12:\n              response = _context25.v;\n              royaltyTokensDistributionRequests.push.apply(royaltyTokensDistributionRequests, _toConsumableArray(response));\n              responses.push({\n                txHash: txHash,\n                receipt: receipt,\n                ipAssetsWithLicenseTerms: iPRegisteredLog.map(function (log) {\n                  return {\n                    ipId: log.ipId,\n                    tokenId: log.tokenId\n                  };\n                })\n              });\n            case 13:\n              _context25.n = 11;\n              break;\n            case 14:\n              _context25.n = 16;\n              break;\n            case 15:\n              _context25.p = 15;\n              _t30 = _context25.v;\n              _iterator7.e(_t30);\n            case 16:\n              _context25.p = 16;\n              _iterator7.f();\n              return _context25.f(16);\n            case 17:\n              if (!(royaltyTokensDistributionRequests.length > 0)) {\n                _context25.n = 19;\n                break;\n              }\n              _context25.n = 18;\n              return handleMulticall({\n                transferWorkflowRequests: royaltyTokensDistributionRequests,\n                multicall3Address: this.multicall3Client.address,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                walletAddress: this.walletAddress,\n                wipOptions: (_request$options1 = request.options) === null || _request$options1 === void 0 ? void 0 : _request$options1.wipOptions,\n                chainId: this.chainId\n              });\n            case 18:\n              _yield$handleMultical2 = _context25.v;\n              txResponse = _yield$handleMultical2.response;\n              distributeRoyaltyTokensTxHashes = txResponse.map(function (tx) {\n                return tx.txHash;\n              });\n            case 19:\n              _context25.n = 20;\n              return this.processResponses(responses, aggregateRegistrationRequest, ((_request$options10 = request.options) === null || _request$options10 === void 0 || (_request$options10 = _request$options10.wipOptions) === null || _request$options10 === void 0 ? void 0 : _request$options10.useMulticallWhenPossible) !== false);\n            case 20:\n              registrationResults = _context25.v;\n              return _context25.a(2, _objectSpread2({\n                registrationResults: registrationResults\n              }, distributeRoyaltyTokensTxHashes && {\n                distributeRoyaltyTokensTxHashes: distributeRoyaltyTokensTxHashes\n              }));\n            case 21:\n              _context25.p = 21;\n              _t31 = _context25.v;\n              return _context25.a(2, handleError(_t31, \"Failed to batch register IP assets with optimized workflows\"));\n          }\n        }, _callee25, this, [[10, 15, 16, 17], [1, 6, 7, 8], [0, 21]]);\n      }));\n      function batchRegisterIpAssetsWithOptimizedWorkflows(_x23) {\n        return _batchRegisterIpAssetsWithOptimizedWorkflows.apply(this, arguments);\n      }\n      return batchRegisterIpAssetsWithOptimizedWorkflows;\n    }())\n  }, {\n    key: \"getLicenseTermsId\",\n    value: function () {\n      var _getLicenseTermsId = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee26(licenseTerms) {\n        var licenseTermsIds, _iterator8, _step8, licenseTerm, licenseRes, _t32;\n        return _regenerator().w(function (_context26) {\n          while (1) switch (_context26.p = _context26.n) {\n            case 0:\n              licenseTermsIds = [];\n              _iterator8 = _createForOfIteratorHelper(licenseTerms);\n              _context26.p = 1;\n              _iterator8.s();\n            case 2:\n              if ((_step8 = _iterator8.n()).done) {\n                _context26.n = 5;\n                break;\n              }\n              licenseTerm = _step8.value;\n              _context26.n = 3;\n              return this.licenseTemplateClient.getLicenseTermsId({\n                terms: licenseTerm\n              });\n            case 3:\n              licenseRes = _context26.v;\n              licenseTermsIds.push(licenseRes.selectedLicenseTermsId);\n            case 4:\n              _context26.n = 2;\n              break;\n            case 5:\n              _context26.n = 7;\n              break;\n            case 6:\n              _context26.p = 6;\n              _t32 = _context26.v;\n              _iterator8.e(_t32);\n            case 7:\n              _context26.p = 7;\n              _iterator8.f();\n              return _context26.f(7);\n            case 8:\n              return _context26.a(2, licenseTermsIds);\n          }\n        }, _callee26, this, [[1, 6, 7, 8]]);\n      }));\n      function getLicenseTermsId(_x24) {\n        return _getLicenseTermsId.apply(this, arguments);\n      }\n      return getLicenseTermsId;\n    }()\n  }, {\n    key: \"validateLicenseTokenIds\",\n    value: function () {\n      var _validateLicenseTokenIds = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee27(licenseTokenIds) {\n        var newLicenseTokenIds, _iterator9, _step9, licenseTokenId, tokenOwnerAddress, _t33;\n        return _regenerator().w(function (_context27) {\n          while (1) switch (_context27.p = _context27.n) {\n            case 0:\n              if (!(licenseTokenIds.length === 0)) {\n                _context27.n = 1;\n                break;\n              }\n              throw new Error(\"License token IDs must be provided.\");\n            case 1:\n              newLicenseTokenIds = licenseTokenIds.map(function (id) {\n                return BigInt(id);\n              });\n              _iterator9 = _createForOfIteratorHelper(newLicenseTokenIds);\n              _context27.p = 2;\n              _iterator9.s();\n            case 3:\n              if ((_step9 = _iterator9.n()).done) {\n                _context27.n = 6;\n                break;\n              }\n              licenseTokenId = _step9.value;\n              _context27.n = 4;\n              return this.licenseTokenReadOnlyClient.ownerOf({\n                tokenId: licenseTokenId\n              });\n            case 4:\n              tokenOwnerAddress = _context27.v;\n              if (tokenOwnerAddress) {\n                _context27.n = 5;\n                break;\n              }\n              throw new Error(\"License token id \".concat(licenseTokenId, \" must be owned by the caller.\"));\n            case 5:\n              _context27.n = 3;\n              break;\n            case 6:\n              _context27.n = 8;\n              break;\n            case 7:\n              _context27.p = 7;\n              _t33 = _context27.v;\n              _iterator9.e(_t33);\n            case 8:\n              _context27.p = 8;\n              _iterator9.f();\n              return _context27.f(8);\n            case 9:\n              return _context27.a(2, newLicenseTokenIds);\n          }\n        }, _callee27, this, [[2, 7, 8, 9]]);\n      }));\n      function validateLicenseTokenIds(_x25) {\n        return _validateLicenseTokenIds.apply(this, arguments);\n      }\n      return validateLicenseTokenIds;\n    }()\n  }, {\n    key: \"getIpIdAndTokenIdsFromEvent\",\n    value: function getIpIdAndTokenIdsFromEvent(txReceipt, key) {\n      var ipRegisteredLog = this.ipAssetRegistryClient.parseTxIpRegisteredEvent(txReceipt);\n      return ipRegisteredLog.map(function (log) {\n        var baseResult = {\n          ipId: log.ipId,\n          tokenId: log.tokenId\n        };\n        if (key) {\n          return _objectSpread2(_objectSpread2({}, baseResult), {}, _defineProperty({}, key, log.tokenContract));\n        }\n        return baseResult;\n      });\n    }\n  }, {\n    key: \"handleRegistrationWithFees\",\n    value: function () {\n      var _handleRegistrationWithFees = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee28(_ref5) {\n        var _wipOptions$useMultic, _this$getIpIdAndToken, _event$ipId, _event$tokenId;\n        var sender, derivData, spgNftContract, spgSpenderAddress, txOptions, wipOptions, encodedTxs, contractCall, totalFees, wipSpenders, useMulticallWhenPossible, nftMintFee, publicMinting, totalDerivativeMintingFee, _yield$contractCallWi, txHash, receipt, event;\n        return _regenerator().w(function (_context28) {\n          while (1) switch (_context28.n) {\n            case 0:\n              sender = _ref5.sender, derivData = _ref5.derivData, spgNftContract = _ref5.spgNftContract, spgSpenderAddress = _ref5.spgSpenderAddress, txOptions = _ref5.txOptions, wipOptions = _ref5.wipOptions, encodedTxs = _ref5.encodedTxs, contractCall = _ref5.contractCall;\n              totalFees = 0n;\n              wipSpenders = [];\n              useMulticallWhenPossible = (_wipOptions$useMultic = wipOptions === null || wipOptions === void 0 ? void 0 : wipOptions.useMulticallWhenPossible) !== null && _wipOptions$useMultic !== void 0 ? _wipOptions$useMultic : true; // get spg minting fee\n              if (!spgNftContract) {\n                _context28.n = 3;\n                break;\n              }\n              _context28.n = 1;\n              return calculateSPGWipMintFee(new SpgnftImplReadOnlyClient(this.rpcClient, spgNftContract));\n            case 1:\n              nftMintFee = _context28.v;\n              _context28.n = 2;\n              return getPublicMinting(spgNftContract, this.rpcClient);\n            case 2:\n              publicMinting = _context28.v;\n              /**\n               * If the SPG NFT contract's public minting is disabled, we need to check if the caller has the `minter role`.\n               * When public minting is disabled, we can't use multicall because we need to perform additional role checks\n               * that aren't compatible with batched transactions.\n               *\n               * This is because role-based access control requires the transaction's msg.sender to be verified directly,\n               * which is not preserved when using multicall (where the multicall contract becomes the sender).\n               */\n              if (!publicMinting) {\n                useMulticallWhenPossible = false;\n              }\n              totalFees += nftMintFee;\n              wipSpenders.push({\n                address: spgNftContract,\n                amount: nftMintFee\n              });\n            case 3:\n              if (!derivData) {\n                _context28.n = 5;\n                break;\n              }\n              _context28.n = 4;\n              return calculateDerivativeMintingFee({\n                derivData: derivData,\n                rpcClient: this.rpcClient,\n                wallet: this.wallet,\n                chainId: this.chainId,\n                sender: sender\n              });\n            case 4:\n              totalDerivativeMintingFee = _context28.v;\n              totalFees += totalDerivativeMintingFee;\n              if (totalDerivativeMintingFee > 0) {\n                wipSpenders.push({\n                  address: spgSpenderAddress,\n                  amount: totalDerivativeMintingFee\n                });\n              }\n            case 5:\n              if (!(totalFees < 0)) {\n                _context28.n = 6;\n                break;\n              }\n              throw new Error(\"Total fees for registering derivative should never be negative: \".concat(totalFees));\n            case 6:\n              _context28.n = 7;\n              return contractCallWithFees({\n                totalFees: totalFees,\n                options: {\n                  wipOptions: _objectSpread2(_objectSpread2({}, wipOptions), {}, {\n                    useMulticallWhenPossible: useMulticallWhenPossible\n                  })\n                },\n                multicall3Address: this.multicall3Client.address,\n                rpcClient: this.rpcClient,\n                tokenSpenders: wipSpenders,\n                contractCall: contractCall,\n                sender: sender,\n                wallet: this.wallet,\n                txOptions: txOptions,\n                encodedTxs: encodedTxs\n              });\n            case 7:\n              _yield$contractCallWi = _context28.v;\n              txHash = _yield$contractCallWi.txHash;\n              receipt = _yield$contractCallWi.receipt;\n              event = (_this$getIpIdAndToken = this.getIpIdAndTokenIdsFromEvent(receipt)) === null || _this$getIpIdAndToken === void 0 ? void 0 : _this$getIpIdAndToken[0];\n              return _context28.a(2, _objectSpread2({\n                txHash: txHash,\n                receipt: receipt\n              }, event && {\n                ipId: (_event$ipId = event.ipId) !== null && _event$ipId !== void 0 ? _event$ipId : undefined,\n                tokenId: (_event$tokenId = event.tokenId) !== null && _event$tokenId !== void 0 ? _event$tokenId : undefined\n              }));\n          }\n        }, _callee28, this);\n      }));\n      function handleRegistrationWithFees(_x26) {\n        return _handleRegistrationWithFees.apply(this, arguments);\n      }\n      return handleRegistrationWithFees;\n    }()\n  }, {\n    key: \"setMaxLicenseTokens\",\n    value: function () {\n      var _setMaxLicenseTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee29(_ref6) {\n        var maxLicenseTokensData, licensorIpId, licenseTermsIds, licenseTermsMaxLimitTxHashes, i, maxLicenseTokens, txHash;\n        return _regenerator().w(function (_context29) {\n          while (1) switch (_context29.n) {\n            case 0:\n              maxLicenseTokensData = _ref6.maxLicenseTokensData, licensorIpId = _ref6.licensorIpId, licenseTermsIds = _ref6.licenseTermsIds;\n              licenseTermsMaxLimitTxHashes = [];\n              i = 0;\n            case 1:\n              if (!(i < maxLicenseTokensData.length)) {\n                _context29.n = 5;\n                break;\n              }\n              maxLicenseTokens = maxLicenseTokensData[i].maxLicenseTokens;\n              if (!(maxLicenseTokens === undefined || maxLicenseTokens < 0n)) {\n                _context29.n = 2;\n                break;\n              }\n              return _context29.a(3, 4);\n            case 2:\n              _context29.n = 3;\n              return this.totalLicenseTokenLimitHookClient.setTotalLicenseTokenLimit({\n                licensorIpId: licensorIpId,\n                // The contract now directly writes the `licenseTemplate` address internally,\n                // so we no longer need to pass it as a parameter\n                licenseTemplate: this.licenseTemplateClient.address,\n                licenseTermsId: licenseTermsIds[i],\n                limit: BigInt(maxLicenseTokens)\n              });\n            case 3:\n              txHash = _context29.v;\n              if (txHash) {\n                licenseTermsMaxLimitTxHashes.push(txHash);\n              }\n            case 4:\n              i++;\n              _context29.n = 1;\n              break;\n            case 5:\n              return _context29.a(2, licenseTermsMaxLimitTxHashes);\n          }\n        }, _callee29, this);\n      }));\n      function setMaxLicenseTokens(_x27) {\n        return _setMaxLicenseTokens.apply(this, arguments);\n      }\n      return setMaxLicenseTokens;\n    }()\n    /**\n     * Process the `LicenseTermsIds` and `maxLicenseTokensTxHashes` for each IP asset.\n     */\n  }, {\n    key: \"processResponses\",\n    value: (function () {\n      var _processResponses = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee30(responses, aggregateRegistrationRequest, useMulticall) {\n        var _iterator0, _step0, _step0$value, responseIndex, response, _iterator1, _step1, _Object$values$respon, _step1$value, assetIndex, ipAsset, extraData, result, _extraData, i, _response, extraDataItem, _ipAsset, _t34, _t35;\n        return _regenerator().w(function (_context30) {\n          while (1) switch (_context30.p = _context30.n) {\n            case 0:\n              if (!useMulticall) {\n                _context30.n = 15;\n                break;\n              }\n              _iterator0 = _createForOfIteratorHelper(responses.entries());\n              _context30.p = 1;\n              _iterator0.s();\n            case 2:\n              if ((_step0 = _iterator0.n()).done) {\n                _context30.n = 11;\n                break;\n              }\n              _step0$value = _slicedToArray(_step0.value, 2), responseIndex = _step0$value[0], response = _step0$value[1];\n              _iterator1 = _createForOfIteratorHelper(response.ipAssetsWithLicenseTerms.entries());\n              _context30.p = 3;\n              _iterator1.s();\n            case 4:\n              if ((_step1 = _iterator1.n()).done) {\n                _context30.n = 7;\n                break;\n              }\n              _step1$value = _slicedToArray(_step1.value, 2), assetIndex = _step1$value[0], ipAsset = _step1$value[1];\n              extraData = (_Object$values$respon = Object.values(aggregateRegistrationRequest)[responseIndex]) === null || _Object$values$respon === void 0 || (_Object$values$respon = _Object$values$respon.extraData) === null || _Object$values$respon === void 0 ? void 0 : _Object$values$respon[assetIndex];\n              _context30.n = 5;\n              return this.processIpAssetLicenseTerms(ipAsset, extraData);\n            case 5:\n              result = _context30.v;\n              responses[responseIndex].ipAssetsWithLicenseTerms[assetIndex] = result;\n            case 6:\n              _context30.n = 4;\n              break;\n            case 7:\n              _context30.n = 9;\n              break;\n            case 8:\n              _context30.p = 8;\n              _t34 = _context30.v;\n              _iterator1.e(_t34);\n            case 9:\n              _context30.p = 9;\n              _iterator1.f();\n              return _context30.f(9);\n            case 10:\n              _context30.n = 2;\n              break;\n            case 11:\n              _context30.n = 13;\n              break;\n            case 12:\n              _context30.p = 12;\n              _t35 = _context30.v;\n              _iterator0.e(_t35);\n            case 13:\n              _context30.p = 13;\n              _iterator0.f();\n              return _context30.f(13);\n            case 14:\n              _context30.n = 19;\n              break;\n            case 15:\n              _extraData = [];\n              Object.values(aggregateRegistrationRequest).map(function (item) {\n                var _item$extraData;\n                _extraData.push.apply(_extraData, _toConsumableArray((_item$extraData = item.extraData) !== null && _item$extraData !== void 0 ? _item$extraData : undefined));\n              });\n              i = 0;\n            case 16:\n              if (!(i < responses.length)) {\n                _context30.n = 19;\n                break;\n              }\n              _response = responses[i];\n              extraDataItem = _extraData[i];\n              _context30.n = 17;\n              return this.processIpAssetLicenseTerms(_response.ipAssetsWithLicenseTerms[0], extraDataItem);\n            case 17:\n              _ipAsset = _context30.v;\n              responses[i].ipAssetsWithLicenseTerms[0] = _ipAsset;\n            case 18:\n              i++;\n              _context30.n = 16;\n              break;\n            case 19:\n              return _context30.a(2, responses);\n          }\n        }, _callee30, this, [[3, 8, 9, 10], [1, 12, 13, 14]]);\n      }));\n      function processResponses(_x28, _x29, _x30) {\n        return _processResponses.apply(this, arguments);\n      }\n      return processResponses;\n    }())\n  }, {\n    key: \"processIpAssetLicenseTerms\",\n    value: function () {\n      var _processIpAssetLicenseTerms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee31(ipAsset, extraData) {\n        var _extraData$licenseTer;\n        var licenseTermsIds, maxLicenseTokens, maxLicenseTokensData, maxLicenseTokensTxHashes;\n        return _regenerator().w(function (_context31) {\n          while (1) switch (_context31.n) {\n            case 0:\n              if (extraData !== null && extraData !== void 0 && (_extraData$licenseTer = extraData.licenseTermsData) !== null && _extraData$licenseTer !== void 0 && _extraData$licenseTer.length) {\n                _context31.n = 1;\n                break;\n              }\n              return _context31.a(2, ipAsset);\n            case 1:\n              _context31.n = 2;\n              return this.getLicenseTermsId(extraData.licenseTermsData.map(function (item) {\n                return item.terms;\n              }));\n            case 2:\n              licenseTermsIds = _context31.v;\n              ipAsset.licenseTermsIds = licenseTermsIds;\n              maxLicenseTokens = extraData.maxLicenseTokens;\n              if (maxLicenseTokens !== null && maxLicenseTokens !== void 0 && maxLicenseTokens.length) {\n                _context31.n = 3;\n                break;\n              }\n              return _context31.a(2, ipAsset);\n            case 3:\n              maxLicenseTokensData = maxLicenseTokens.filter(function (maxLicenseToken) {\n                return maxLicenseToken !== undefined;\n              }).map(function (maxLicenseToken) {\n                return {\n                  maxLicenseTokens: maxLicenseToken\n                };\n              });\n              _context31.n = 4;\n              return this.setMaxLicenseTokens({\n                maxLicenseTokensData: maxLicenseTokensData,\n                licensorIpId: ipAsset.ipId,\n                licenseTermsIds: licenseTermsIds\n              });\n            case 4:\n              maxLicenseTokensTxHashes = _context31.v;\n              if (maxLicenseTokensTxHashes !== null && maxLicenseTokensTxHashes !== void 0 && maxLicenseTokensTxHashes.length) {\n                ipAsset.maxLicenseTokensTxHashes = maxLicenseTokensTxHashes;\n              }\n              return _context31.a(2, ipAsset);\n          }\n        }, _callee31, this);\n      }));\n      function processIpAssetLicenseTerms(_x31, _x32) {\n        return _processIpAssetLicenseTerms.apply(this, arguments);\n      }\n      return processIpAssetLicenseTerms;\n    }()\n  }]);\n}();\n\nvar LicenseClient = /*#__PURE__*/function () {\n  function LicenseClient(rpcClient, wallet, chainId) {\n    _classCallCheck(this, LicenseClient);\n    this.licensingModuleClient = new LicensingModuleClient(rpcClient, wallet);\n    this.piLicenseTemplateReadOnlyClient = new PiLicenseTemplateReadOnlyClient(rpcClient);\n    this.licenseTemplateClient = new PiLicenseTemplateClient(rpcClient, wallet);\n    this.licenseRegistryReadOnlyClient = new LicenseRegistryReadOnlyClient(rpcClient);\n    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);\n    this.moduleRegistryReadOnlyClient = new ModuleRegistryReadOnlyClient(rpcClient);\n    this.multicall3Client = new Multicall3Client(rpcClient, wallet);\n    this.wipClient = new WrappedIpClient(rpcClient, wallet);\n    this.totalLicenseTokenLimitHookClient = new TotalLicenseTokenLimitHookClient(rpcClient, wallet);\n    this.rpcClient = rpcClient;\n    this.wallet = wallet;\n    this.chainId = chainId;\n    this.walletAddress = wallet.account.address;\n  }\n\n  /**\n   * Registers new license terms and return the ID of the newly registered license terms.\n   *\n   * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.\n   */\n  return _createClass(LicenseClient, [{\n    key: \"registerPILTerms\",\n    value: (function () {\n      var _registerPILTerms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request) {\n        var object, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              object = PILFlavor.validateLicenseTerms(request, this.chainId);\n              _context.n = 1;\n              return this.registerPILTermsHelper(object, request.txOptions);\n            case 1:\n              return _context.a(2, _context.v);\n            case 2:\n              _context.p = 2;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to register license terms\"));\n          }\n        }, _callee, this, [[0, 2]]);\n      }));\n      function registerPILTerms(_x) {\n        return _registerPILTerms.apply(this, arguments);\n      }\n      return registerPILTerms;\n    }()\n    /**\n     * @deprecated Use {@link PILFlavor.nonCommercialSocialRemixing} with {@link LicenseClient.registerPILTerms} instead.\n     *  The method will be removed in the `v1.4.0`.\n     *\n     * Convenient function to register a PIL non commercial social remix license to the registry\n     *\n     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%231%3A-non-commercial-social-remixing | Non Commercial Social Remixing}.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerNonComSocialRemixingPIL\",\n    value: (function () {\n      var _registerNonComSocialRemixingPIL = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request) {\n        var licenseTerms, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              _context2.p = 0;\n              licenseTerms = PILFlavor.nonCommercialSocialRemixing();\n              _context2.n = 1;\n              return this.registerPILTermsHelper(licenseTerms, request === null || request === void 0 ? void 0 : request.txOptions);\n            case 1:\n              return _context2.a(2, _context2.v);\n            case 2:\n              _context2.p = 2;\n              _t2 = _context2.v;\n              return _context2.a(2, handleError(_t2, \"Failed to register non commercial social remixing PIL\"));\n          }\n        }, _callee2, this, [[0, 2]]);\n      }));\n      function registerNonComSocialRemixingPIL(_x2) {\n        return _registerNonComSocialRemixingPIL.apply(this, arguments);\n      }\n      return registerNonComSocialRemixingPIL;\n    }()\n    /**\n     * @deprecated Use {@link PILFlavor.commercialUse} with {@link LicenseClient.registerPILTerms} instead.\n     *  The method will be removed in the `v1.4.0`.\n     *\n     * Convenient function to register a PIL commercial use license to the registry.\n     *\n     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%232%3A-commercial-use | Commercial Use}.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerCommercialUsePIL\",\n    value: (function () {\n      var _registerCommercialUsePIL = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(request) {\n        var licenseTerms, _t3;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              licenseTerms = PILFlavor.commercialUse({\n                defaultMintingFee: Number(request.defaultMintingFee),\n                currency: request.currency,\n                royaltyPolicy: request.royaltyPolicyAddress\n              });\n              _context3.n = 1;\n              return this.registerPILTermsHelper(licenseTerms, request.txOptions);\n            case 1:\n              return _context3.a(2, _context3.v);\n            case 2:\n              _context3.p = 2;\n              _t3 = _context3.v;\n              return _context3.a(2, handleError(_t3, \"Failed to register commercial use PIL\"));\n          }\n        }, _callee3, this, [[0, 2]]);\n      }));\n      function registerCommercialUsePIL(_x3) {\n        return _registerCommercialUsePIL.apply(this, arguments);\n      }\n      return registerCommercialUsePIL;\n    }()\n    /**\n     * @deprecated Use {@link PILFlavor.commercialRemix} with {@link LicenseClient.registerPILTerms} instead.\n     *  The method will be removed in the v1.4.0.\n     *\n     * Convenient function to register a PIL commercial Remix license to the registry.\n     *\n     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%233%3A-commercial-remix | Commercial Remix }.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerCommercialRemixPIL\",\n    value: (function () {\n      var _registerCommercialRemixPIL = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(_ref) {\n        var defaultMintingFee, currency, royaltyPolicyAddress, commercialRevShare, txOptions, licenseTerms, _t4;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              defaultMintingFee = _ref.defaultMintingFee, currency = _ref.currency, royaltyPolicyAddress = _ref.royaltyPolicyAddress, commercialRevShare = _ref.commercialRevShare, txOptions = _ref.txOptions;\n              _context4.p = 1;\n              licenseTerms = PILFlavor.commercialRemix({\n                defaultMintingFee: Number(defaultMintingFee),\n                currency: currency,\n                royaltyPolicy: royaltyPolicyAddress,\n                commercialRevShare: commercialRevShare\n              });\n              _context4.n = 2;\n              return this.registerPILTermsHelper(licenseTerms, txOptions);\n            case 2:\n              return _context4.a(2, _context4.v);\n            case 3:\n              _context4.p = 3;\n              _t4 = _context4.v;\n              return _context4.a(2, handleError(_t4, \"Failed to register commercial remix PIL\"));\n          }\n        }, _callee4, this, [[1, 3]]);\n      }));\n      function registerCommercialRemixPIL(_x4) {\n        return _registerCommercialRemixPIL.apply(this, arguments);\n      }\n      return registerCommercialRemixPIL;\n    }()\n    /**\n     * @deprecated Use {@link PILFlavor.creativeCommonsAttribution} with {@link LicenseClient.registerPILTerms} instead.\n     *  The method will be removed in the `v1.4.0`.\n     *\n     * Convenient function to register a PIL creative commons attribution license to the registry.\n     * Creates a Creative Commons Attribution (CC-BY) license terms flavor.\n     *\n     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%234%3A-creative-commons-attribution | Creative Commons Attribution}.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.\n     */\n    )\n  }, {\n    key: \"registerCreativeCommonsAttributionPIL\",\n    value: (function () {\n      var _registerCreativeCommonsAttributionPIL = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(_ref2) {\n        var currency, royaltyPolicyAddress, txOptions, _t5;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              currency = _ref2.currency, royaltyPolicyAddress = _ref2.royaltyPolicyAddress, txOptions = _ref2.txOptions;\n              _context5.p = 1;\n              _context5.n = 2;\n              return this.registerPILTermsHelper(PILFlavor.creativeCommonsAttribution({\n                currency: currency,\n                royaltyPolicy: royaltyPolicyAddress\n              }), txOptions);\n            case 2:\n              return _context5.a(2, _context5.v);\n            case 3:\n              _context5.p = 3;\n              _t5 = _context5.v;\n              return _context5.a(2, handleError(_t5, \"Failed to register creative commons attribution PIL\"));\n          }\n        }, _callee5, this, [[1, 3]]);\n      }));\n      function registerCreativeCommonsAttributionPIL(_x5) {\n        return _registerCreativeCommonsAttributionPIL.apply(this, arguments);\n      }\n      return registerCreativeCommonsAttributionPIL;\n    }()\n    /**\n     * Attaches license terms to an IP.\n     */\n    )\n  }, {\n    key: \"attachLicenseTerms\",\n    value: (function () {\n      var _attachLicenseTerms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(request) {\n        var _request$txOptions, isRegistered, isExisted, isAttachedLicenseTerms, req, txHash, _t6;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.p = _context6.n) {\n            case 0:\n              _context6.p = 0;\n              request.licenseTermsId = BigInt(request.licenseTermsId);\n              _context6.n = 1;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(request.ipId)\n              });\n            case 1:\n              isRegistered = _context6.v;\n              if (isRegistered) {\n                _context6.n = 2;\n                break;\n              }\n              throw new Error(\"The IP with id \".concat(request.ipId, \" is not registered.\"));\n            case 2:\n              _context6.n = 3;\n              return this.piLicenseTemplateReadOnlyClient.exists({\n                licenseTermsId: request.licenseTermsId\n              });\n            case 3:\n              isExisted = _context6.v;\n              if (isExisted) {\n                _context6.n = 4;\n                break;\n              }\n              throw new Error(\"License terms id \".concat(request.licenseTermsId, \" do not exist.\"));\n            case 4:\n              _context6.n = 5;\n              return this.licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({\n                ipId: request.ipId,\n                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),\n                licenseTermsId: request.licenseTermsId\n              });\n            case 5:\n              isAttachedLicenseTerms = _context6.v;\n              if (!isAttachedLicenseTerms) {\n                _context6.n = 6;\n                break;\n              }\n              return _context6.a(2, {\n                success: false\n              });\n            case 6:\n              req = {\n                ipId: request.ipId,\n                licenseTemplate: request.licenseTemplate || this.licenseTemplateClient.address,\n                licenseTermsId: request.licenseTermsId\n              };\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context6.n = 7;\n                break;\n              }\n              return _context6.a(2, {\n                encodedTxData: this.licensingModuleClient.attachLicenseTermsEncode(req)\n              });\n            case 7:\n              _context6.n = 8;\n              return this.licensingModuleClient.attachLicenseTerms(req);\n            case 8:\n              txHash = _context6.v;\n              _context6.n = 9;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 9:\n              return _context6.a(2, {\n                txHash: txHash,\n                success: true\n              });\n            case 10:\n              _context6.n = 12;\n              break;\n            case 11:\n              _context6.p = 11;\n              _t6 = _context6.v;\n              return _context6.a(2, handleError(_t6, \"Failed to attach license terms\"));\n            case 12:\n              return _context6.a(2);\n          }\n        }, _callee6, this, [[0, 11]]);\n      }));\n      function attachLicenseTerms(_x6) {\n        return _attachLicenseTerms.apply(this, arguments);\n      }\n      return attachLicenseTerms;\n    }()\n    /**\n     * Mints license tokens for the license terms attached to an IP.\n     * It might require the caller pay the minting fee, depending on the license terms or configured by the iP owner.\n     * The minting fee is paid in the minting fee token specified in the license terms or configured by the IP owner.\n     * IP owners can configure the minting fee of their IPs or configure the minting fee module to determine the minting fee.\n     *\n     * @remarks\n     * Before minting license tokens, the license terms must be attached to the IP, with two exceptions:\n     * 1. Default license terms can be minted without explicit attachment since they are automatically\n     *    attached to all IPs by default\n     * 2. IP owners have special privileges and can mint license tokens for their own IPs using any\n     *    license terms, even if those terms are not explicitly attached\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L34 | `LicenseTokensMinted`} event.\n     */\n    )\n  }, {\n    key: \"mintLicenseTokens\",\n    value: (function () {\n      var _mintLicenseTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(request) {\n        var _this = this;\n        var _request$txOptions2, _request$options, receiver, req, isLicenseIpIdRegistered, isExisted, ipAccount, ipOwner, isAttachedLicenseTerms, encodedTxData, licenseMintingFee, wipSpenders, _yield$contractCallWi, txHash, receipt, targetLogs, startLicenseTokenId, licenseTokenIds, i, _t7;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.p = _context7.n) {\n            case 0:\n              _context7.p = 0;\n              receiver = validateAddress(request.receiver || this.walletAddress);\n              req = {\n                licensorIpId: validateAddress(request.licensorIpId),\n                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),\n                licenseTermsId: BigInt(request.licenseTermsId),\n                amount: BigInt(request.amount === undefined ? 1 : request.amount),\n                receiver: receiver,\n                royaltyContext: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n                maxMintingFee: BigInt(request.maxMintingFee),\n                maxRevenueShare: getRevenueShare(request.maxRevenueShare, RevShareType.MAX_REVENUE_SHARE)\n              };\n              if (!(req.maxMintingFee < 0)) {\n                _context7.n = 1;\n                break;\n              }\n              throw new Error(\"The maxMintingFee must be greater than 0.\");\n            case 1:\n              _context7.n = 2;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(request.licensorIpId)\n              });\n            case 2:\n              isLicenseIpIdRegistered = _context7.v;\n              if (isLicenseIpIdRegistered) {\n                _context7.n = 3;\n                break;\n              }\n              throw new Error(\"The licensor IP with id \".concat(request.licensorIpId, \" is not registered.\"));\n            case 3:\n              _context7.n = 4;\n              return this.piLicenseTemplateReadOnlyClient.exists({\n                licenseTermsId: req.licenseTermsId\n              });\n            case 4:\n              isExisted = _context7.v;\n              if (isExisted) {\n                _context7.n = 5;\n                break;\n              }\n              throw new Error(\"License terms id \".concat(request.licenseTermsId, \" do not exist.\"));\n            case 5:\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, req.licensorIpId);\n              _context7.n = 6;\n              return ipAccount.owner();\n            case 6:\n              ipOwner = _context7.v;\n              if (!(ipOwner !== this.walletAddress)) {\n                _context7.n = 8;\n                break;\n              }\n              _context7.n = 7;\n              return this.licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({\n                ipId: req.licensorIpId,\n                licenseTemplate: req.licenseTemplate,\n                licenseTermsId: req.licenseTermsId\n              });\n            case 7:\n              isAttachedLicenseTerms = _context7.v;\n              if (isAttachedLicenseTerms) {\n                _context7.n = 8;\n                break;\n              }\n              throw new Error(\"License terms id \".concat(req.licenseTermsId, \" is not attached to the IP with id \").concat(req.licensorIpId, \".\"));\n            case 8:\n              encodedTxData = this.licensingModuleClient.mintLicenseTokensEncode(req);\n              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {\n                _context7.n = 9;\n                break;\n              }\n              return _context7.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 9:\n              _context7.n = 10;\n              return calculateLicenseWipMintFee({\n                predictMintingFeeRequest: req,\n                rpcClient: this.rpcClient,\n                chainId: this.chainId,\n                walletAddress: this.walletAddress\n              });\n            case 10:\n              licenseMintingFee = _context7.v;\n              wipSpenders = [];\n              if (licenseMintingFee > 0n) {\n                wipSpenders.push({\n                  address: royaltyModuleAddress[this.chainId],\n                  amount: licenseMintingFee\n                });\n              }\n              _context7.n = 11;\n              return contractCallWithFees({\n                totalFees: licenseMintingFee,\n                options: {\n                  wipOptions: (_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.wipOptions\n                },\n                multicall3Address: this.multicall3Client.address,\n                rpcClient: this.rpcClient,\n                tokenSpenders: wipSpenders,\n                contractCall: function contractCall() {\n                  return _this.licensingModuleClient.mintLicenseTokens(req);\n                },\n                wallet: this.wallet,\n                sender: this.walletAddress,\n                txOptions: request.txOptions,\n                encodedTxs: [encodedTxData]\n              });\n            case 11:\n              _yield$contractCallWi = _context7.v;\n              txHash = _yield$contractCallWi.txHash;\n              receipt = _yield$contractCallWi.receipt;\n              targetLogs = this.licensingModuleClient.parseTxLicenseTokensMintedEvent(receipt);\n              startLicenseTokenId = targetLogs[0].startLicenseTokenId;\n              licenseTokenIds = [];\n              for (i = 0; i < req.amount; i++) {\n                licenseTokenIds.push(startLicenseTokenId + BigInt(i));\n              }\n              return _context7.a(2, {\n                txHash: txHash,\n                licenseTokenIds: licenseTokenIds,\n                receipt: receipt\n              });\n            case 12:\n              _context7.p = 12;\n              _t7 = _context7.v;\n              return _context7.a(2, handleError(_t7, \"Failed to mint license tokens\"));\n          }\n        }, _callee7, this, [[0, 12]]);\n      }));\n      function mintLicenseTokens(_x7) {\n        return _mintLicenseTokens.apply(this, arguments);\n      }\n      return mintLicenseTokens;\n    }()\n    /**\n     * Gets license terms of the given ID.\n     */\n    )\n  }, {\n    key: \"getLicenseTerms\",\n    value: (function () {\n      var _getLicenseTerms = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(selectedLicenseTermsId) {\n        var _t8;\n        return _regenerator().w(function (_context8) {\n          while (1) switch (_context8.p = _context8.n) {\n            case 0:\n              _context8.p = 0;\n              _context8.n = 1;\n              return this.piLicenseTemplateReadOnlyClient.getLicenseTerms({\n                selectedLicenseTermsId: BigInt(selectedLicenseTermsId)\n              });\n            case 1:\n              return _context8.a(2, _context8.v);\n            case 2:\n              _context8.p = 2;\n              _t8 = _context8.v;\n              return _context8.a(2, handleError(_t8, \"Failed to get license terms\"));\n          }\n        }, _callee8, this, [[0, 2]]);\n      }));\n      function getLicenseTerms(_x8) {\n        return _getLicenseTerms.apply(this, arguments);\n      }\n      return getLicenseTerms;\n    }()\n    /**\n     * Pre-compute the minting license fee for the given IP and license terms. The function can be used to calculate the minting license fee before minting license tokens.\n     */\n    )\n  }, {\n    key: \"predictMintingLicenseFee\",\n    value: (function () {\n      var _predictMintingLicenseFee2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(request) {\n        var isLicenseIpIdRegistered, licenseTermsId, isExisted, object, _t9;\n        return _regenerator().w(function (_context9) {\n          while (1) switch (_context9.p = _context9.n) {\n            case 0:\n              _context9.p = 0;\n              _context9.n = 1;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(request.licensorIpId)\n              });\n            case 1:\n              isLicenseIpIdRegistered = _context9.v;\n              if (isLicenseIpIdRegistered) {\n                _context9.n = 2;\n                break;\n              }\n              throw new Error(\"The licensor IP with id \".concat(request.licensorIpId, \" is not registered.\"));\n            case 2:\n              licenseTermsId = BigInt(request.licenseTermsId);\n              _context9.n = 3;\n              return this.piLicenseTemplateReadOnlyClient.exists({\n                licenseTermsId: licenseTermsId\n              });\n            case 3:\n              isExisted = _context9.v;\n              if (isExisted) {\n                _context9.n = 4;\n                break;\n              }\n              throw new Error(\"License terms id \".concat(request.licenseTermsId, \" do not exist.\"));\n            case 4:\n              object = _objectSpread2(_objectSpread2({}, request), {}, {\n                receiver: validateAddress(request.receiver || this.walletAddress),\n                amount: BigInt(request.amount),\n                royaltyContext: viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),\n                licenseTermsId: licenseTermsId\n              });\n              _context9.n = 5;\n              return predictMintingLicenseFee({\n                predictMintingFeeRequest: object,\n                rpcClient: this.rpcClient,\n                chainId: this.chainId,\n                walletAddress: this.walletAddress\n              });\n            case 5:\n              return _context9.a(2, _context9.v);\n            case 6:\n              _context9.p = 6;\n              _t9 = _context9.v;\n              return _context9.a(2, handleError(_t9, \"Failed to predict minting license fee\"));\n          }\n        }, _callee9, this, [[0, 6]]);\n      }));\n      function predictMintingLicenseFee$1(_x9) {\n        return _predictMintingLicenseFee2.apply(this, arguments);\n      }\n      return predictMintingLicenseFee$1;\n    }()\n    /**\n     * Sets the licensing configuration for a specific license terms of an IP. If both licenseTemplate and licenseTermsId are not specified then the licensing config apply to all licenses of given IP.\n     */\n    )\n  }, {\n    key: \"setLicensingConfig\",\n    value: (function () {\n      var _setLicensingConfig = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0(request) {\n        var _request$txOptions3, req, isLicenseIpIdRegistered, isExisted, isRegistered, txHash, _t0;\n        return _regenerator().w(function (_context0) {\n          while (1) switch (_context0.p = _context0.n) {\n            case 0:\n              _context0.p = 0;\n              req = {\n                ipId: request.ipId,\n                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),\n                licenseTermsId: BigInt(request.licenseTermsId),\n                licensingConfig: validateLicenseConfig(request.licensingConfig)\n              };\n              if (!(req.licenseTemplate === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress && req.licensingConfig.commercialRevShare !== 0)) {\n                _context0.n = 1;\n                break;\n              }\n              throw new Error(\"The license template cannot be zero address if commercial revenue share is not zero.\");\n            case 1:\n              _context0.n = 2;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(req.ipId)\n              });\n            case 2:\n              isLicenseIpIdRegistered = _context0.v;\n              if (isLicenseIpIdRegistered) {\n                _context0.n = 3;\n                break;\n              }\n              throw new Error(\"The licensor IP with id \".concat(req.ipId, \" is not registered.\"));\n            case 3:\n              _context0.n = 4;\n              return this.piLicenseTemplateReadOnlyClient.exists({\n                licenseTermsId: req.licenseTermsId\n              });\n            case 4:\n              isExisted = _context0.v;\n              if (isExisted) {\n                _context0.n = 5;\n                break;\n              }\n              throw new Error(\"License terms id \".concat(req.licenseTermsId, \" do not exist.\"));\n            case 5:\n              if (!(req.licensingConfig.licensingHook !== viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress)) {\n                _context0.n = 7;\n                break;\n              }\n              _context0.n = 6;\n              return this.moduleRegistryReadOnlyClient.isRegistered({\n                moduleAddress: req.licensingConfig.licensingHook\n              });\n            case 6:\n              isRegistered = _context0.v;\n              if (isRegistered) {\n                _context0.n = 7;\n                break;\n              }\n              throw new Error(\"The licensing hook is not registered.\");\n            case 7:\n              if (!(req.licenseTemplate === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress && req.licenseTermsId !== 0n)) {\n                _context0.n = 8;\n                break;\n              }\n              throw new Error(\"The license template is zero address but license terms id is not zero.\");\n            case 8:\n              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {\n                _context0.n = 9;\n                break;\n              }\n              return _context0.a(2, {\n                encodedTxData: this.licensingModuleClient.setLicensingConfigEncode(req)\n              });\n            case 9:\n              _context0.n = 10;\n              return this.licensingModuleClient.setLicensingConfig(req);\n            case 10:\n              txHash = _context0.v;\n              _context0.n = 11;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 11:\n              return _context0.a(2, {\n                txHash: txHash,\n                success: true\n              });\n            case 12:\n              _context0.n = 14;\n              break;\n            case 13:\n              _context0.p = 13;\n              _t0 = _context0.v;\n              return _context0.a(2, handleError(_t0, \"Failed to set licensing config\"));\n            case 14:\n              return _context0.a(2);\n          }\n        }, _callee0, this, [[0, 13]]);\n      }));\n      function setLicensingConfig(_x0) {\n        return _setLicensingConfig.apply(this, arguments);\n      }\n      return setLicensingConfig;\n    }()\n    /**\n     * Set the max license token limit for a specific license.\n     *\n     * @remarks\n     * This method automatically configures the licensing hook to use the\n     * {@link https://github.com/storyprotocol/protocol-periphery-v1/blob/release/1.3/contracts/hooks/TotalLicenseTokenLimitHook.sol | TotalLicenseTokenLimitHook} contract\n     * if the current licensing hook is not set to `TotalLicenseTokenLimitHook`, and sets the max license tokens\n     * to the specified limit.\n     */\n    )\n  }, {\n    key: \"setMaxLicenseTokens\",\n    value: (function () {\n      var _setMaxLicenseTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(_ref3) {\n        var ipId, licenseTermsId, maxLicenseTokens, licenseTemplate, txOptions, newLicenseTermsId, newLicenseTemplate, licensingConfig, txHash, _t1;\n        return _regenerator().w(function (_context1) {\n          while (1) switch (_context1.p = _context1.n) {\n            case 0:\n              ipId = _ref3.ipId, licenseTermsId = _ref3.licenseTermsId, maxLicenseTokens = _ref3.maxLicenseTokens, licenseTemplate = _ref3.licenseTemplate, txOptions = _ref3.txOptions;\n              _context1.p = 1;\n              if (!(maxLicenseTokens < 0)) {\n                _context1.n = 2;\n                break;\n              }\n              throw new Error(\"The max license tokens must be greater than 0.\");\n            case 2:\n              newLicenseTermsId = BigInt(licenseTermsId);\n              newLicenseTemplate = validateAddress(licenseTemplate || this.licenseTemplateClient.address);\n              _context1.n = 3;\n              return this.getLicensingConfig({\n                ipId: ipId,\n                licenseTermsId: newLicenseTermsId,\n                licenseTemplate: newLicenseTemplate\n              });\n            case 3:\n              licensingConfig = _context1.v;\n              if (!(licensingConfig.licensingHook !== this.totalLicenseTokenLimitHookClient.address)) {\n                _context1.n = 4;\n                break;\n              }\n              _context1.n = 4;\n              return this.setLicensingConfig({\n                ipId: ipId,\n                licenseTermsId: newLicenseTermsId,\n                licenseTemplate: newLicenseTemplate,\n                licensingConfig: _objectSpread2(_objectSpread2({}, licensingConfig), {}, {\n                  licensingHook: this.totalLicenseTokenLimitHookClient.address,\n                  expectMinimumGroupRewardShare: licensingConfig.expectMinimumGroupRewardShare / 1000000\n                })\n              });\n            case 4:\n              _context1.n = 5;\n              return this.totalLicenseTokenLimitHookClient.setTotalLicenseTokenLimit({\n                licensorIpId: ipId,\n                licenseTemplate: newLicenseTemplate,\n                licenseTermsId: newLicenseTermsId,\n                limit: BigInt(maxLicenseTokens)\n              });\n            case 5:\n              txHash = _context1.v;\n              return _context1.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 6:\n              _context1.p = 6;\n              _t1 = _context1.v;\n              return _context1.a(2, handleError(_t1, \"Failed to set max license tokens\"));\n          }\n        }, _callee1, this, [[1, 6]]);\n      }));\n      function setMaxLicenseTokens(_x1) {\n        return _setMaxLicenseTokens.apply(this, arguments);\n      }\n      return setMaxLicenseTokens;\n    }())\n  }, {\n    key: \"getLicensingConfig\",\n    value: function () {\n      var _getLicensingConfig = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10(request) {\n        var licensingConfigParam, _t10;\n        return _regenerator().w(function (_context10) {\n          while (1) switch (_context10.p = _context10.n) {\n            case 0:\n              _context10.p = 0;\n              licensingConfigParam = {\n                ipId: validateAddress(request.ipId),\n                licenseTemplate: validateAddress(request.licenseTemplate || this.licenseTemplateClient.address),\n                licenseTermsId: BigInt(request.licenseTermsId)\n              };\n              _context10.n = 1;\n              return this.licenseRegistryReadOnlyClient.getLicensingConfig(licensingConfigParam);\n            case 1:\n              return _context10.a(2, _context10.v);\n            case 2:\n              _context10.p = 2;\n              _t10 = _context10.v;\n              return _context10.a(2, handleError(_t10, \"Failed to get licensing config\"));\n          }\n        }, _callee10, this, [[0, 2]]);\n      }));\n      function getLicensingConfig(_x10) {\n        return _getLicensingConfig.apply(this, arguments);\n      }\n      return getLicensingConfig;\n    }()\n  }, {\n    key: \"getLicenseTermsId\",\n    value: function () {\n      var _getLicenseTermsId = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11(request) {\n        var licenseRes;\n        return _regenerator().w(function (_context11) {\n          while (1) switch (_context11.n) {\n            case 0:\n              _context11.n = 1;\n              return this.licenseTemplateClient.getLicenseTermsId({\n                terms: request\n              });\n            case 1:\n              licenseRes = _context11.v;\n              return _context11.a(2, licenseRes.selectedLicenseTermsId);\n          }\n        }, _callee11, this);\n      }));\n      function getLicenseTermsId(_x11) {\n        return _getLicenseTermsId.apply(this, arguments);\n      }\n      return getLicenseTermsId;\n    }()\n  }, {\n    key: \"registerPILTermsHelper\",\n    value: function () {\n      var _registerPILTermsHelper = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12(licenseTerms, txOptions) {\n        var licenseTermsId, txHash, _yield$waitForTxRecei, receipt, targetLogs;\n        return _regenerator().w(function (_context12) {\n          while (1) switch (_context12.n) {\n            case 0:\n              if (!(txOptions !== null && txOptions !== void 0 && txOptions.encodedTxDataOnly)) {\n                _context12.n = 1;\n                break;\n              }\n              return _context12.a(2, {\n                encodedTxData: this.licenseTemplateClient.registerLicenseTermsEncode({\n                  terms: licenseTerms\n                })\n              });\n            case 1:\n              _context12.n = 2;\n              return this.getLicenseTermsId(licenseTerms);\n            case 2:\n              licenseTermsId = _context12.v;\n              if (!(licenseTermsId !== 0n)) {\n                _context12.n = 3;\n                break;\n              }\n              return _context12.a(2, {\n                licenseTermsId: licenseTermsId\n              });\n            case 3:\n              _context12.n = 4;\n              return this.licenseTemplateClient.registerLicenseTerms({\n                terms: licenseTerms\n              });\n            case 4:\n              txHash = _context12.v;\n              _context12.n = 5;\n              return waitForTxReceipt({\n                txOptions: txOptions,\n                rpcClient: this.rpcClient,\n                txHash: txHash\n              });\n            case 5:\n              _yield$waitForTxRecei = _context12.v;\n              receipt = _yield$waitForTxRecei.receipt;\n              targetLogs = this.licenseTemplateClient.parseTxLicenseTermsRegisteredEvent(receipt);\n              return _context12.a(2, {\n                txHash: txHash,\n                licenseTermsId: targetLogs[0].licenseTermsId\n              });\n            case 6:\n              return _context12.a(2);\n          }\n        }, _callee12, this);\n      }));\n      function registerPILTermsHelper(_x12, _x13) {\n        return _registerPILTermsHelper.apply(this, arguments);\n      }\n      return registerPILTermsHelper;\n    }()\n  }]);\n}();\n\nvar NftClient = /*#__PURE__*/function () {\n  function NftClient(rpcClient, wallet) {\n    _classCallCheck(this, NftClient);\n    this.rpcClient = rpcClient;\n    this.wallet = wallet;\n    this.registrationWorkflowsClient = new RegistrationWorkflowsClient(rpcClient, wallet);\n  }\n\n  /**\n   * Creates a new SPG NFT Collection.\n   *\n   * Emits an on-chain `CollectionCreated` event.\n   * @see {@link https://github.com/storyprotocol/protocol-periphery-v1/blob/v1.3.1/contracts/interfaces/workflows/IRegistrationWorkflows.sol#L12 | IRegistrationWorkflows}\n   */\n  return _createClass(NftClient, [{\n    key: \"createNFTCollection\",\n    value: (function () {\n      var _createNFTCollection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request) {\n        var _request$baseURI, _request$maxSupply, _request$mintFee, _request$mintFeeToken, _request$txOptions, object, txHash, txReceipt, targetLogs, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              if (!(request.mintFee !== undefined && (request.mintFee < 0n || request.mintFeeToken === viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress || !(0,viem__WEBPACK_IMPORTED_MODULE_7__.isAddress)(request.mintFeeToken || \"\")))) {\n                _context.n = 1;\n                break;\n              }\n              throw new Error(\"Invalid mint fee token address, mint fee is greater than 0.\");\n            case 1:\n              object = {\n                spgNftInitParams: {\n                  name: request.name,\n                  symbol: request.symbol,\n                  baseURI: (_request$baseURI = request.baseURI) !== null && _request$baseURI !== void 0 ? _request$baseURI : \"\",\n                  maxSupply: (_request$maxSupply = request.maxSupply) !== null && _request$maxSupply !== void 0 ? _request$maxSupply : Number(viem__WEBPACK_IMPORTED_MODULE_9__.maxUint32),\n                  mintFee: (_request$mintFee = request.mintFee) !== null && _request$mintFee !== void 0 ? _request$mintFee : 0n,\n                  mintFeeToken: (_request$mintFeeToken = request.mintFeeToken) !== null && _request$mintFeeToken !== void 0 ? _request$mintFeeToken : viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress,\n                  owner: validateAddress(request.owner || this.wallet.account.address),\n                  mintFeeRecipient: validateAddress(request.mintFeeRecipient),\n                  mintOpen: request.mintOpen,\n                  isPublicMinting: request.isPublicMinting,\n                  contractURI: request.contractURI\n                }\n              };\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context.n = 2;\n                break;\n              }\n              return _context.a(2, {\n                encodedTxData: this.registrationWorkflowsClient.createCollectionEncode(object)\n              });\n            case 2:\n              _context.n = 3;\n              return this.registrationWorkflowsClient.createCollection(object);\n            case 3:\n              txHash = _context.v;\n              _context.n = 4;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 4:\n              txReceipt = _context.v;\n              targetLogs = this.registrationWorkflowsClient.parseTxCollectionCreatedEvent(txReceipt);\n              return _context.a(2, {\n                txHash: txHash,\n                spgNftContract: targetLogs[0].spgNftContract\n              });\n            case 5:\n              _context.n = 7;\n              break;\n            case 6:\n              _context.p = 6;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to create an SPG NFT collection\"));\n            case 7:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n      function createNFTCollection(_x) {\n        return _createNFTCollection.apply(this, arguments);\n      }\n      return createNFTCollection;\n    }()\n    /**\n     * Returns the current mint token of the collection.\n     */\n    )\n  }, {\n    key: \"getMintFeeToken\",\n    value: (function () {\n      var _getMintFeeToken = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(spgNftContract) {\n        var spgNftClient;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              spgNftClient = new SpgnftImplReadOnlyClient(this.rpcClient, validateAddress(spgNftContract));\n              return _context2.a(2, spgNftClient.mintFeeToken());\n          }\n        }, _callee2, this);\n      }));\n      function getMintFeeToken(_x2) {\n        return _getMintFeeToken.apply(this, arguments);\n      }\n      return getMintFeeToken;\n    }()\n    /**\n     * Returns the current mint fee of the collection.\n     */\n    )\n  }, {\n    key: \"getMintFee\",\n    value: (function () {\n      var _getMintFee = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(spgNftContract) {\n        var spgNftClient;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              spgNftClient = new SpgnftImplReadOnlyClient(this.rpcClient, validateAddress(spgNftContract));\n              return _context3.a(2, spgNftClient.mintFee());\n          }\n        }, _callee3, this);\n      }));\n      function getMintFee(_x3) {\n        return _getMintFee.apply(this, arguments);\n      }\n      return getMintFee;\n    }()\n    /**\n     * Sets the token URI for a specific token id.\n     *\n     * @remarks\n     * Only callable by the owner of the token.\n     */\n    )\n  }, {\n    key: \"setTokenURI\",\n    value: (function () {\n      var _setTokenURI = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(_ref) {\n        var tokenId, tokenURI, spgNftContract, txOptions, spgNftClient, txHash, _t2;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              tokenId = _ref.tokenId, tokenURI = _ref.tokenURI, spgNftContract = _ref.spgNftContract, txOptions = _ref.txOptions;\n              _context4.p = 1;\n              spgNftClient = new SpgnftImplClient(this.rpcClient, this.wallet, validateAddress(spgNftContract));\n              _context4.n = 2;\n              return spgNftClient.setTokenUri({\n                tokenId: BigInt(tokenId),\n                tokenUri: tokenURI\n              });\n            case 2:\n              txHash = _context4.v;\n              return _context4.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 3:\n              _context4.p = 3;\n              _t2 = _context4.v;\n              return _context4.a(2, handleError(_t2, \"Failed to set token URI\"));\n          }\n        }, _callee4, this, [[1, 3]]);\n      }));\n      function setTokenURI(_x4) {\n        return _setTokenURI.apply(this, arguments);\n      }\n      return setTokenURI;\n    }()\n    /**\n     * Returns the token URI for a specific token id.\n     */\n    )\n  }, {\n    key: \"getTokenURI\",\n    value: (function () {\n      var _getTokenURI = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(_ref2) {\n        var tokenId, spgNftContract, spgNftClient;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              tokenId = _ref2.tokenId, spgNftContract = _ref2.spgNftContract;\n              spgNftClient = new SpgnftImplReadOnlyClient(this.rpcClient, spgNftContract);\n              _context5.n = 1;\n              return spgNftClient.tokenUri({\n                tokenId: BigInt(tokenId)\n              });\n            case 1:\n              return _context5.a(2, _context5.v);\n          }\n        }, _callee5, this);\n      }));\n      function getTokenURI(_x5) {\n        return _getTokenURI.apply(this, arguments);\n      }\n      return getTokenURI;\n    }())\n  }]);\n}();\n\nvar PermissionClient = /*#__PURE__*/function () {\n  function PermissionClient(rpcClient, wallet, chainId) {\n    _classCallCheck(this, PermissionClient);\n    this.rpcClient = rpcClient;\n    this.wallet = wallet;\n    this.chainId = chainId;\n    this.accessControllerClient = new AccessControllerClient(this.rpcClient, this.wallet);\n    this.ipAssetRegistryClient = new IpAssetRegistryClient(this.rpcClient, this.wallet);\n    this.coreMetadataModuleClient = new CoreMetadataModuleClient(this.rpcClient, this.wallet);\n  }\n\n  /**\n   * Sets the permission for a specific function call.\n   * Each policy is represented as a mapping from an IP account address to a signer address to a recipient\n   * address to a function selector to a permission level. The permission level is an enum of `AccessPermission`.\n   * By default, all policies are set to ABSTAIN, which means that the permission is not set.\n   * The owner of ipAccount by default has all permission.\n   *\n   * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.\n   */\n  return _createClass(PermissionClient, [{\n    key: \"setPermission\",\n    value: (function () {\n      var _setPermission = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(request) {\n        var _request$txOptions, req, txHash, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              _context.n = 1;\n              return this.checkIsRegistered(request.ipId);\n            case 1:\n              req = {\n                ipAccount: request.ipId,\n                signer: request.signer,\n                to: request.to,\n                func: request.func ? (0,viem__WEBPACK_IMPORTED_MODULE_17__.toFunctionSelector)(request.func) : defaultFunctionSelector,\n                permission: request.permission\n              };\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context.n = 2;\n                break;\n              }\n              return _context.a(2, {\n                encodedTxData: this.accessControllerClient.setPermissionEncode(req)\n              });\n            case 2:\n              _context.n = 3;\n              return this.accessControllerClient.setPermission(req);\n            case 3:\n              txHash = _context.v;\n              _context.n = 4;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 4:\n              return _context.a(2, {\n                txHash: txHash,\n                success: true\n              });\n            case 5:\n              _context.n = 7;\n              break;\n            case 6:\n              _context.p = 6;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to set permissions\"));\n            case 7:\n              return _context.a(2);\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n      function setPermission(_x) {\n        return _setPermission.apply(this, arguments);\n      }\n      return setPermission;\n    }()\n    /**\n     * Specific permission overrides wildcard permission with signature.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.\n     */\n    )\n  }, {\n    key: \"createSetPermissionSignature\",\n    value: (function () {\n      var _createSetPermissionSignature = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request) {\n        var _request$txOptions2, ipId, signer, to, txOptions, func, permission, deadline, ipAccountClient, data, _yield$ipAccountClien, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS, signature, req, txHash, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              _context2.p = 0;\n              ipId = request.ipId, signer = request.signer, to = request.to, txOptions = request.txOptions, func = request.func, permission = request.permission, deadline = request.deadline;\n              _context2.n = 1;\n              return this.checkIsRegistered(ipId);\n            case 1:\n              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, ipId);\n              data = (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: accessControllerAbi,\n                functionName: \"setTransientPermission\",\n                args: [ipId, validateAddress(signer), validateAddress(to), func ? (0,viem__WEBPACK_IMPORTED_MODULE_17__.toFunctionSelector)(func) : defaultFunctionSelector, permission]\n              });\n              _context2.n = 2;\n              return ipAccountClient.state();\n            case 2:\n              _yield$ipAccountClien = _context2.v;\n              state = _yield$ipAccountClien.result;\n              _context2.n = 3;\n              return this.rpcClient.getBlock();\n            case 3:\n              blockTimestamp = _context2.v.timestamp;\n              calculatedDeadline = getDeadline(blockTimestamp, deadline);\n              _context2.n = 4;\n              return getPermissionSignature({\n                ipId: ipId,\n                deadline: calculatedDeadline,\n                state: state,\n                permissions: [{\n                  ipId: ipId,\n                  signer: signer,\n                  to: to,\n                  permission: permission,\n                  func: func\n                }],\n                chainId: this.chainId,\n                wallet: this.wallet\n              });\n            case 4:\n              _yield$getPermissionS = _context2.v;\n              signature = _yield$getPermissionS.signature;\n              req = {\n                to: validateAddress(this.accessControllerClient.address),\n                value: BigInt(0),\n                data: data,\n                signer: signer,\n                deadline: calculatedDeadline,\n                signature: signature\n              };\n              if (!((_request$txOptions2 = request.txOptions) !== null && _request$txOptions2 !== void 0 && _request$txOptions2.encodedTxDataOnly)) {\n                _context2.n = 5;\n                break;\n              }\n              return _context2.a(2, {\n                encodedTxData: ipAccountClient.executeWithSigEncode(req)\n              });\n            case 5:\n              _context2.n = 6;\n              return ipAccountClient.executeWithSig(req);\n            case 6:\n              txHash = _context2.v;\n              _context2.n = 7;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {\n                hash: txHash\n              }));\n            case 7:\n              return _context2.a(2, {\n                txHash: txHash,\n                success: true\n              });\n            case 8:\n              _context2.n = 10;\n              break;\n            case 9:\n              _context2.p = 9;\n              _t2 = _context2.v;\n              return _context2.a(2, handleError(_t2, \"Failed to create set permission signature\"));\n            case 10:\n              return _context2.a(2);\n          }\n        }, _callee2, this, [[0, 9]]);\n      }));\n      function createSetPermissionSignature(_x2) {\n        return _createSetPermissionSignature.apply(this, arguments);\n      }\n      return createSetPermissionSignature;\n    }()\n    /**\n     * Sets permission to a signer for all functions across all modules.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.\n     */\n    )\n  }, {\n    key: \"setAllPermissions\",\n    value: (function () {\n      var _setAllPermissions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(request) {\n        var _request$txOptions3, req, txHash, _t3;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              _context3.n = 1;\n              return this.checkIsRegistered(request.ipId);\n            case 1:\n              req = {\n                ipAccount: request.ipId,\n                signer: request.signer,\n                permission: request.permission\n              };\n              if (!((_request$txOptions3 = request.txOptions) !== null && _request$txOptions3 !== void 0 && _request$txOptions3.encodedTxDataOnly)) {\n                _context3.n = 2;\n                break;\n              }\n              return _context3.a(2, {\n                encodedTxData: this.accessControllerClient.setAllPermissionsEncode(req)\n              });\n            case 2:\n              _context3.n = 3;\n              return this.accessControllerClient.setAllPermissions(req);\n            case 3:\n              txHash = _context3.v;\n              _context3.n = 4;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, request.txOptions), {}, {\n                hash: txHash\n              }));\n            case 4:\n              return _context3.a(2, {\n                txHash: txHash,\n                success: true\n              });\n            case 5:\n              _context3.n = 7;\n              break;\n            case 6:\n              _context3.p = 6;\n              _t3 = _context3.v;\n              return _context3.a(2, handleError(_t3, \"Failed to set all permissions\"));\n            case 7:\n              return _context3.a(2);\n          }\n        }, _callee3, this, [[0, 6]]);\n      }));\n      function setAllPermissions(_x3) {\n        return _setAllPermissions.apply(this, arguments);\n      }\n      return setAllPermissions;\n    }()\n    /**\n     * Sets a batch of permissions in a single transaction.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.\n     */\n    )\n  }, {\n    key: \"setBatchPermissions\",\n    value: (function () {\n      var _setBatchPermissions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(request) {\n        var _request$txOptions4, permissions, txOptions, _iterator, _step, permission, req, txHash, _t4, _t5;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              _context4.p = 0;\n              permissions = request.permissions, txOptions = request.txOptions;\n              _iterator = _createForOfIteratorHelper(permissions);\n              _context4.p = 1;\n              _iterator.s();\n            case 2:\n              if ((_step = _iterator.n()).done) {\n                _context4.n = 4;\n                break;\n              }\n              permission = _step.value;\n              _context4.n = 3;\n              return this.checkIsRegistered(permission.ipId);\n            case 3:\n              _context4.n = 2;\n              break;\n            case 4:\n              _context4.n = 6;\n              break;\n            case 5:\n              _context4.p = 5;\n              _t4 = _context4.v;\n              _iterator.e(_t4);\n            case 6:\n              _context4.p = 6;\n              _iterator.f();\n              return _context4.f(6);\n            case 7:\n              req = {\n                permissions: permissions.map(function (permission) {\n                  return {\n                    ipAccount: permission.ipId,\n                    signer: permission.signer,\n                    to: permission.to,\n                    func: permission.func ? (0,viem__WEBPACK_IMPORTED_MODULE_17__.toFunctionSelector)(permission.func) : defaultFunctionSelector,\n                    permission: permission.permission\n                  };\n                })\n              };\n              if (!((_request$txOptions4 = request.txOptions) !== null && _request$txOptions4 !== void 0 && _request$txOptions4.encodedTxDataOnly)) {\n                _context4.n = 8;\n                break;\n              }\n              return _context4.a(2, {\n                encodedTxData: this.accessControllerClient.setBatchPermissionsEncode(req)\n              });\n            case 8:\n              _context4.n = 9;\n              return this.accessControllerClient.setBatchPermissions(req);\n            case 9:\n              txHash = _context4.v;\n              _context4.n = 10;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {\n                hash: txHash\n              }));\n            case 10:\n              return _context4.a(2, {\n                txHash: txHash,\n                success: true\n              });\n            case 11:\n              _context4.n = 13;\n              break;\n            case 12:\n              _context4.p = 12;\n              _t5 = _context4.v;\n              return _context4.a(2, handleError(_t5, \"Failed to set batch permissions\"));\n            case 13:\n              return _context4.a(2);\n          }\n        }, _callee4, this, [[1, 5, 6, 7], [0, 12]]);\n      }));\n      function setBatchPermissions(_x4) {\n        return _setBatchPermissions.apply(this, arguments);\n      }\n      return setBatchPermissions;\n    }()\n    /**\n     * Sets a batch of permissions in a single transaction with signature.\n     *\n     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.\n     */\n    )\n  }, {\n    key: \"createBatchPermissionSignature\",\n    value: (function () {\n      var _createBatchPermissionSignature = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(request) {\n        var _request$txOptions5, permissions, deadline, ipId, txOptions, _iterator2, _step2, permission, ipAccountClient, data, _yield$ipAccountClien2, state, blockTimestamp, calculatedDeadline, _yield$getPermissionS2, signature, req, txHash, _t6, _t7;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              permissions = request.permissions, deadline = request.deadline, ipId = request.ipId, txOptions = request.txOptions;\n              _iterator2 = _createForOfIteratorHelper(permissions);\n              _context5.p = 1;\n              _iterator2.s();\n            case 2:\n              if ((_step2 = _iterator2.n()).done) {\n                _context5.n = 4;\n                break;\n              }\n              permission = _step2.value;\n              _context5.n = 3;\n              return this.checkIsRegistered(permission.ipId);\n            case 3:\n              _context5.n = 2;\n              break;\n            case 4:\n              _context5.n = 6;\n              break;\n            case 5:\n              _context5.p = 5;\n              _t6 = _context5.v;\n              _iterator2.e(_t6);\n            case 6:\n              _context5.p = 6;\n              _iterator2.f();\n              return _context5.f(6);\n            case 7:\n              ipAccountClient = new IpAccountImplClient(this.rpcClient, this.wallet, ipId);\n              data = (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                abi: accessControllerAbi,\n                functionName: \"setBatchTransientPermissions\",\n                args: [permissions.map(function (permission) {\n                  return {\n                    ipAccount: permission.ipId,\n                    signer: permission.signer,\n                    to: permission.to,\n                    func: permission.func ? (0,viem__WEBPACK_IMPORTED_MODULE_17__.toFunctionSelector)(permission.func) : defaultFunctionSelector,\n                    permission: permission.permission\n                  };\n                })]\n              });\n              _context5.n = 8;\n              return ipAccountClient.state();\n            case 8:\n              _yield$ipAccountClien2 = _context5.v;\n              state = _yield$ipAccountClien2.result;\n              _context5.n = 9;\n              return this.rpcClient.getBlock();\n            case 9:\n              blockTimestamp = _context5.v.timestamp;\n              calculatedDeadline = getDeadline(blockTimestamp, deadline);\n              _context5.n = 10;\n              return getPermissionSignature({\n                ipId: ipId,\n                deadline: calculatedDeadline,\n                state: state,\n                permissions: permissions,\n                chainId: this.chainId,\n                wallet: this.wallet\n              });\n            case 10:\n              _yield$getPermissionS2 = _context5.v;\n              signature = _yield$getPermissionS2.signature;\n              req = {\n                to: validateAddress(this.accessControllerClient.address),\n                value: BigInt(0),\n                data: data,\n                signer: validateAddress(this.wallet.account.address),\n                deadline: calculatedDeadline,\n                signature: signature\n              };\n              if (!((_request$txOptions5 = request.txOptions) !== null && _request$txOptions5 !== void 0 && _request$txOptions5.encodedTxDataOnly)) {\n                _context5.n = 11;\n                break;\n              }\n              return _context5.a(2, {\n                encodedTxData: ipAccountClient.executeWithSigEncode(req)\n              });\n            case 11:\n              _context5.n = 12;\n              return ipAccountClient.executeWithSig(req);\n            case 12:\n              txHash = _context5.v;\n              _context5.n = 13;\n              return this.rpcClient.waitForTransactionReceipt(_objectSpread2(_objectSpread2({}, txOptions), {}, {\n                hash: txHash\n              }));\n            case 13:\n              return _context5.a(2, {\n                txHash: txHash,\n                success: true\n              });\n            case 14:\n              _context5.n = 16;\n              break;\n            case 15:\n              _context5.p = 15;\n              _t7 = _context5.v;\n              return _context5.a(2, handleError(_t7, \"Failed to create batch permission signature\"));\n            case 16:\n              return _context5.a(2);\n          }\n        }, _callee5, this, [[1, 5, 6, 7], [0, 15]]);\n      }));\n      function createBatchPermissionSignature(_x5) {\n        return _createBatchPermissionSignature.apply(this, arguments);\n      }\n      return createBatchPermissionSignature;\n    }())\n  }, {\n    key: \"checkIsRegistered\",\n    value: function () {\n      var _checkIsRegistered = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(ipId) {\n        var isRegistered;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              _context6.n = 1;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(ipId)\n              });\n            case 1:\n              isRegistered = _context6.v;\n              if (isRegistered) {\n                _context6.n = 2;\n                break;\n              }\n              throw new Error(\"IP id with \".concat(ipId, \" is not registered.\"));\n            case 2:\n              return _context6.a(2);\n          }\n        }, _callee6, this);\n      }));\n      function checkIsRegistered(_x6) {\n        return _checkIsRegistered.apply(this, arguments);\n      }\n      return checkIsRegistered;\n    }()\n  }]);\n}();\n\nvar RoyaltyClient = /*#__PURE__*/function () {\n  function RoyaltyClient(rpcClient, wallet, chainId) {\n    _classCallCheck(this, RoyaltyClient);\n    this.royaltyModuleClient = new RoyaltyModuleClient(rpcClient, wallet);\n    this.ipAssetRegistryClient = new IpAssetRegistryClient(rpcClient, wallet);\n    this.ipRoyaltyVaultImplReadOnlyClient = new IpRoyaltyVaultImplReadOnlyClient(rpcClient);\n    this.ipRoyaltyVaultImplEventClient = new IpRoyaltyVaultImplEventClient(rpcClient);\n    this.royaltyWorkflowsClient = new RoyaltyWorkflowsClient(rpcClient, wallet);\n    this.multicall3Client = new Multicall3Client(rpcClient, wallet);\n    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet);\n    this.rpcClient = rpcClient;\n    this.wallet = wallet;\n    this.chainId = chainId;\n    this.walletAddress = wallet.account.address;\n  }\n\n  /**\n   * Claims all revenue from the child IPs of an ancestor IP, then transfer\n   * all claimed tokens to the wallet if the wallet owns the IP or is the claimer.\n   * If claimed token is WIP, it will also be converted back to IP.\n   *\n   * @remarks\n   * Even if there are no child IPs, you must still populate {@link ClaimAllRevenueRequest.currencyTokens} with\n   * the token addresses you wish to claim. This is required for the claim operation to know which\n   * token balances to process.\n   */\n  return _createClass(RoyaltyClient, [{\n    key: \"claimAllRevenue\",\n    value: (function () {\n      var _claimAllRevenue = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(req) {\n        var _req$claimOptions, _req$claimOptions2, ancestorIpId, claimer, childIpIds, royaltyPolicies, currencyTokens, txHashes, txHash, receipt, _yield$this$getClaime, ownsClaimer, isClaimerIp, ipAccount, claimedTokens, autoTransfer, autoUnwrapIp, hashes, _hashes, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              ancestorIpId = validateAddress(req.ancestorIpId);\n              claimer = validateAddress(req.claimer);\n              childIpIds = validateAddresses(req.childIpIds);\n              royaltyPolicies = validateAddresses(req.royaltyPolicies);\n              currencyTokens = validateAddresses(req.currencyTokens);\n              txHashes = [];\n              _context.n = 1;\n              return this.royaltyWorkflowsClient.claimAllRevenue({\n                ancestorIpId: ancestorIpId,\n                claimer: claimer,\n                childIpIds: childIpIds,\n                royaltyPolicies: royaltyPolicies,\n                currencyTokens: currencyTokens\n              });\n            case 1:\n              txHash = _context.v;\n              _context.n = 2;\n              return this.rpcClient.waitForTransactionReceipt({\n                hash: txHash\n              });\n            case 2:\n              receipt = _context.v;\n              txHashes.push(txHash);\n\n              // determine if the claimer is an IP owned by the wallet\n              _context.n = 3;\n              return this.getClaimerInfo(claimer);\n            case 3:\n              _yield$this$getClaime = _context.v;\n              ownsClaimer = _yield$this$getClaime.ownsClaimer;\n              isClaimerIp = _yield$this$getClaime.isClaimerIp;\n              ipAccount = _yield$this$getClaime.ipAccount;\n              claimedTokens = this.ipRoyaltyVaultImplEventClient.parseTxRevenueTokenClaimedEvent(receipt);\n              autoTransfer = ((_req$claimOptions = req.claimOptions) === null || _req$claimOptions === void 0 ? void 0 : _req$claimOptions.autoTransferAllClaimedTokensFromIp) !== false;\n              autoUnwrapIp = ((_req$claimOptions2 = req.claimOptions) === null || _req$claimOptions2 === void 0 ? void 0 : _req$claimOptions2.autoUnwrapIpTokens) !== false; // transfer claimed tokens from IP to wallet if wallet owns IP\n              if (!(autoTransfer && isClaimerIp && ownsClaimer)) {\n                _context.n = 5;\n                break;\n              }\n              _context.n = 4;\n              return this.transferClaimedTokensFromIpToWallet({\n                ipAccount: ipAccount,\n                claimedTokens: claimedTokens\n              });\n            case 4:\n              hashes = _context.v;\n              txHashes.push.apply(txHashes, _toConsumableArray(hashes));\n            case 5:\n              if (!(autoUnwrapIp && ownsClaimer)) {\n                _context.n = 7;\n                break;\n              }\n              _context.n = 6;\n              return this.unwrapWipTokens(claimedTokens);\n            case 6:\n              _hashes = _context.v;\n              if (_hashes) {\n                txHashes.push(_hashes);\n              }\n            case 7:\n              return _context.a(2, {\n                receipt: receipt,\n                claimedTokens: claimedTokens,\n                txHashes: txHashes\n              });\n            case 8:\n              _context.p = 8;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to claim all revenue\"));\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n      function claimAllRevenue(_x) {\n        return _claimAllRevenue.apply(this, arguments);\n      }\n      return claimAllRevenue;\n    }()\n    /**\n     * Automatically batch claims all revenue from the child IPs of multiple ancestor IPs.\n     * if multicall is disabled, it will call @link{claimAllRevenue} for each ancestor IP.\n     * Then transfer all claimed tokens to the wallet if the wallet owns the IP or is the claimer.\n     * If claimed token is WIP, it will also be converted back to IP.\n     *\n     * @remarks\n     * Even if there are no child IPs, you must still populate `currencyTokens` in each ancestor IP\n     * with the token addresses you wish to claim. This is required for the claim operation to know which\n     * token balances to process.\n     */\n    )\n  }, {\n    key: \"batchClaimAllRevenue\",\n    value: (function () {\n      var _batchClaimAllRevenue = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request) {\n        var _this = this;\n        var _request$options, _request$claimOptions, _request$claimOptions2, txHashes, receipts, claimedTokens, useMulticallWhenPossible, _iterator, _step, ancestorIp, result, encodedTxs, txHash, receipt, claimedTokenLogs, aggregatedClaimedTokens, claimers, autoTransfer, autoUnwrapIp, wipClaimableAmounts, _iterator2, _step2, _loop, hash, _t2, _t3, _t4;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              txHashes = [];\n              receipts = [];\n              claimedTokens = []; // if the number of ancestor IPs is 1 or if multicall is disabled, then just call claimAllRevenue.\n              useMulticallWhenPossible = ((_request$options = request.options) === null || _request$options === void 0 ? void 0 : _request$options.useMulticallWhenPossible) !== false;\n              if (!(request.ancestorIps.length === 1 || !useMulticallWhenPossible)) {\n                _context3.n = 9;\n                break;\n              }\n              _iterator = _createForOfIteratorHelper(request.ancestorIps);\n              _context3.p = 1;\n              _iterator.s();\n            case 2:\n              if ((_step = _iterator.n()).done) {\n                _context3.n = 5;\n                break;\n              }\n              ancestorIp = _step.value;\n              _context3.n = 3;\n              return this.claimAllRevenue(_objectSpread2(_objectSpread2({}, ancestorIp), {}, {\n                ancestorIpId: ancestorIp.ipId,\n                claimOptions: {\n                  autoTransferAllClaimedTokensFromIp: false,\n                  autoUnwrapIpTokens: false\n                }\n              }));\n            case 3:\n              result = _context3.v;\n              txHashes.push.apply(txHashes, _toConsumableArray(result.txHashes));\n              receipts.push(result.receipt);\n              if (result.claimedTokens) {\n                claimedTokens.push.apply(claimedTokens, _toConsumableArray(result.claimedTokens));\n              }\n            case 4:\n              _context3.n = 2;\n              break;\n            case 5:\n              _context3.n = 7;\n              break;\n            case 6:\n              _context3.p = 6;\n              _t2 = _context3.v;\n              _iterator.e(_t2);\n            case 7:\n              _context3.p = 7;\n              _iterator.f();\n              return _context3.f(7);\n            case 8:\n              _context3.n = 12;\n              break;\n            case 9:\n              // Batch claimAllRevenue the calls into a single multicall\n              encodedTxs = request.ancestorIps.map(function (_ref) {\n                var ipId = _ref.ipId,\n                  claimer = _ref.claimer,\n                  childIpIds = _ref.childIpIds,\n                  royaltyPolicies = _ref.royaltyPolicies,\n                  currencyTokens = _ref.currencyTokens;\n                var claim = {\n                  ancestorIpId: validateAddress(ipId),\n                  claimer: validateAddress(claimer),\n                  childIpIds: validateAddresses(childIpIds),\n                  royaltyPolicies: validateAddresses(royaltyPolicies),\n                  currencyTokens: validateAddresses(currencyTokens)\n                };\n                return _this.royaltyWorkflowsClient.claimAllRevenueEncode(claim).data;\n              });\n              _context3.n = 10;\n              return this.royaltyWorkflowsClient.multicall({\n                data: encodedTxs\n              });\n            case 10:\n              txHash = _context3.v;\n              _context3.n = 11;\n              return this.rpcClient.waitForTransactionReceipt({\n                hash: txHash\n              });\n            case 11:\n              receipt = _context3.v;\n              txHashes.push(txHash);\n              receipts.push(receipt);\n              claimedTokenLogs = this.ipRoyaltyVaultImplEventClient.parseTxRevenueTokenClaimedEvent(receipt);\n              claimedTokens.push.apply(claimedTokens, _toConsumableArray(claimedTokenLogs));\n            case 12:\n              // Aggregate claimed tokens by claimer and token address\n              aggregatedClaimedTokens = Object.values(claimedTokens.reduce(function (acc, curr) {\n                var key = \"\".concat(curr.claimer, \"_\").concat(curr.token);\n                if (!acc[key]) {\n                  acc[key] = _objectSpread2({}, curr);\n                } else {\n                  acc[key].amount += curr.amount;\n                }\n                return acc;\n              }, {}));\n              claimers = _toConsumableArray(new Set(request.ancestorIps.map(function (_ref2) {\n                var claimer = _ref2.claimer;\n                return claimer;\n              })));\n              autoTransfer = ((_request$claimOptions = request.claimOptions) === null || _request$claimOptions === void 0 ? void 0 : _request$claimOptions.autoTransferAllClaimedTokensFromIp) !== false;\n              autoUnwrapIp = ((_request$claimOptions2 = request.claimOptions) === null || _request$claimOptions2 === void 0 ? void 0 : _request$claimOptions2.autoUnwrapIpTokens) !== false;\n              wipClaimableAmounts = 0n;\n              _iterator2 = _createForOfIteratorHelper(claimers);\n              _context3.p = 13;\n              _loop = /*#__PURE__*/_regenerator().m(function _loop() {\n                var claimer, _yield$_this$getClaim, ownsClaimer, isClaimerIp, ipAccount, filterClaimedTokens, hashes;\n                return _regenerator().w(function (_context2) {\n                  while (1) switch (_context2.n) {\n                    case 0:\n                      claimer = _step2.value;\n                      _context2.n = 1;\n                      return _this.getClaimerInfo(claimer);\n                    case 1:\n                      _yield$_this$getClaim = _context2.v;\n                      ownsClaimer = _yield$_this$getClaim.ownsClaimer;\n                      isClaimerIp = _yield$_this$getClaim.isClaimerIp;\n                      ipAccount = _yield$_this$getClaim.ipAccount;\n                      if (ownsClaimer) {\n                        _context2.n = 2;\n                        break;\n                      }\n                      return _context2.a(2, 1);\n                    case 2:\n                      filterClaimedTokens = aggregatedClaimedTokens.filter(function (item) {\n                        return item.claimer === claimer;\n                      }); // transfer claimed tokens from IP to wallet if wallet owns IP\n                      if (!(autoTransfer && isClaimerIp && ownsClaimer)) {\n                        _context2.n = 4;\n                        break;\n                      }\n                      _context2.n = 3;\n                      return _this.transferClaimedTokensFromIpToWallet({\n                        ipAccount: ipAccount,\n                        claimedTokens: filterClaimedTokens\n                      });\n                    case 3:\n                      hashes = _context2.v;\n                      txHashes.push.apply(txHashes, _toConsumableArray(hashes));\n                    case 4:\n                      // Sum up the amount of WIP tokens claimed\n                      wipClaimableAmounts += filterClaimedTokens.reduce(function (acc, curr) {\n                        if (curr.token === WIP_TOKEN_ADDRESS) {\n                          return acc + curr.amount;\n                        }\n                        return acc;\n                      }, 0n);\n                    case 5:\n                      return _context2.a(2);\n                  }\n                }, _loop);\n              });\n              _iterator2.s();\n            case 14:\n              if ((_step2 = _iterator2.n()).done) {\n                _context3.n = 17;\n                break;\n              }\n              return _context3.d(_regeneratorValues(_loop()), 15);\n            case 15:\n              if (!_context3.v) {\n                _context3.n = 16;\n                break;\n              }\n              return _context3.a(3, 16);\n            case 16:\n              _context3.n = 14;\n              break;\n            case 17:\n              _context3.n = 19;\n              break;\n            case 18:\n              _context3.p = 18;\n              _t3 = _context3.v;\n              _iterator2.e(_t3);\n            case 19:\n              _context3.p = 19;\n              _iterator2.f();\n              return _context3.f(19);\n            case 20:\n              if (!(wipClaimableAmounts > 0n && autoUnwrapIp)) {\n                _context3.n = 22;\n                break;\n              }\n              _context3.n = 21;\n              return this.unwrapWipTokens([{\n                token: WIP_TOKEN_ADDRESS,\n                amount: wipClaimableAmounts,\n                claimer: this.walletAddress\n              }]);\n            case 21:\n              hash = _context3.v;\n              if (hash) {\n                txHashes.push(hash);\n              }\n            case 22:\n              return _context3.a(2, {\n                receipts: receipts,\n                claimedTokens: aggregatedClaimedTokens,\n                txHashes: txHashes\n              });\n            case 23:\n              _context3.p = 23;\n              _t4 = _context3.v;\n              return _context3.a(2, handleError(new Error(_t4.message.replace(\"Failed to claim all revenue: \", \"\").trim()), \"Failed to batch claim all revenue\"));\n          }\n        }, _callee2, this, [[13, 18, 19, 20], [1, 6, 7, 8], [0, 23]]);\n      }));\n      function batchClaimAllRevenue(_x2) {\n        return _batchClaimAllRevenue.apply(this, arguments);\n      }\n      return batchClaimAllRevenue;\n    }()\n    /**\n     * Allows the function caller to pay royalties to the receiver IP asset on behalf of the payer IP asset.\n     */\n    )\n  }, {\n    key: \"payRoyaltyOnBehalf\",\n    value: (function () {\n      var _payRoyaltyOnBehalf = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(request) {\n        var _this2 = this;\n        var _request$txOptions, receiverIpId, payerIpId, token, amount, _request$options2, _request$options3, erc20Options, wipOptions, txOptions, sender, payAmount, isReceiverRegistered, isPayerRegistered, req, encodedTxData, contractCall, tokenSpenders, _t5;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              _context4.p = 0;\n              receiverIpId = request.receiverIpId, payerIpId = request.payerIpId, token = request.token, amount = request.amount, _request$options2 = request.options, _request$options3 = _request$options2 === void 0 ? {} : _request$options2, erc20Options = _request$options3.erc20Options, wipOptions = _request$options3.wipOptions, txOptions = request.txOptions;\n              sender = this.wallet.account.address;\n              payAmount = BigInt(amount);\n              if (!(payAmount <= 0n)) {\n                _context4.n = 1;\n                break;\n              }\n              throw new Error(\"The amount to pay must be number greater than 0.\");\n            case 1:\n              _context4.n = 2;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(receiverIpId)\n              });\n            case 2:\n              isReceiverRegistered = _context4.v;\n              if (isReceiverRegistered) {\n                _context4.n = 3;\n                break;\n              }\n              throw new Error(\"The receiver IP with id \".concat(receiverIpId, \" is not registered.\"));\n            case 3:\n              if (!(validateAddress(payerIpId) && payerIpId !== viem__WEBPACK_IMPORTED_MODULE_19__.zeroAddress)) {\n                _context4.n = 5;\n                break;\n              }\n              _context4.n = 4;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: payerIpId\n              });\n            case 4:\n              isPayerRegistered = _context4.v;\n              if (isPayerRegistered) {\n                _context4.n = 5;\n                break;\n              }\n              throw new Error(\"The payer IP with id \".concat(request.payerIpId, \" is not registered.\"));\n            case 5:\n              req = {\n                receiverIpId: receiverIpId,\n                payerIpId: payerIpId,\n                token: validateAddress(token),\n                amount: BigInt(amount)\n              };\n              encodedTxData = this.royaltyModuleClient.payRoyaltyOnBehalfEncode(req);\n              if (!((_request$txOptions = request.txOptions) !== null && _request$txOptions !== void 0 && _request$txOptions.encodedTxDataOnly)) {\n                _context4.n = 6;\n                break;\n              }\n              return _context4.a(2, {\n                encodedTxData: encodedTxData\n              });\n            case 6:\n              contractCall = function contractCall() {\n                return _this2.royaltyModuleClient.payRoyaltyOnBehalf(req);\n              };\n              tokenSpenders = [{\n                address: this.royaltyModuleClient.address,\n                amount: payAmount\n              }];\n              _context4.n = 7;\n              return contractCallWithFees({\n                totalFees: payAmount,\n                options: {\n                  erc20Options: erc20Options,\n                  wipOptions: wipOptions\n                },\n                multicall3Address: this.multicall3Client.address,\n                rpcClient: this.rpcClient,\n                tokenSpenders: tokenSpenders,\n                contractCall: contractCall,\n                sender: sender,\n                token: token,\n                wallet: this.wallet,\n                txOptions: txOptions,\n                encodedTxs: [encodedTxData]\n              });\n            case 7:\n              return _context4.a(2, _context4.v);\n            case 8:\n              _context4.p = 8;\n              _t5 = _context4.v;\n              return _context4.a(2, handleError(_t5, \"Failed to pay royalty on behalf\"));\n          }\n        }, _callee3, this, [[0, 8]]);\n      }));\n      function payRoyaltyOnBehalf(_x3) {\n        return _payRoyaltyOnBehalf.apply(this, arguments);\n      }\n      return payRoyaltyOnBehalf;\n    }()\n    /**\n     * Get total amount of revenue token claimable by a royalty token holder.\n     * Returns the amount of revenue token claimable by the claimer.\n     */\n    )\n  }, {\n    key: \"claimableRevenue\",\n    value: (function () {\n      var _claimableRevenue = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(request) {\n        var proxyAddress, ipRoyaltyVault, _t6;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              _context5.n = 1;\n              return this.getRoyaltyVaultAddress(validateAddress(request.ipId));\n            case 1:\n              proxyAddress = _context5.v;\n              ipRoyaltyVault = new IpRoyaltyVaultImplReadOnlyClient(this.rpcClient, proxyAddress);\n              _context5.n = 2;\n              return ipRoyaltyVault.claimableRevenue({\n                claimer: validateAddress(request.claimer),\n                token: validateAddress(request.token)\n              });\n            case 2:\n              return _context5.a(2, _context5.v);\n            case 3:\n              _context5.p = 3;\n              _t6 = _context5.v;\n              return _context5.a(2, handleError(_t6, \"Failed to calculate claimable revenue\"));\n          }\n        }, _callee4, this, [[0, 3]]);\n      }));\n      function claimableRevenue(_x4) {\n        return _claimableRevenue.apply(this, arguments);\n      }\n      return claimableRevenue;\n    }()\n    /**\n     * Get the royalty vault proxy address of given ip id of the royalty vault.\n     */\n    )\n  }, {\n    key: \"getRoyaltyVaultAddress\",\n    value: (function () {\n      var _getRoyaltyVaultAddress = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(ipId) {\n        var isRoyaltyVaultIpIdRegistered;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              _context6.n = 1;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: validateAddress(ipId)\n              });\n            case 1:\n              isRoyaltyVaultIpIdRegistered = _context6.v;\n              if (isRoyaltyVaultIpIdRegistered) {\n                _context6.n = 2;\n                break;\n              }\n              throw new Error(\"The royalty vault IP with id \".concat(ipId, \" is not registered.\"));\n            case 2:\n              _context6.n = 3;\n              return this.royaltyModuleClient.ipRoyaltyVaults({\n                ipId: ipId\n              });\n            case 3:\n              return _context6.a(2, _context6.v);\n          }\n        }, _callee5, this);\n      }));\n      function getRoyaltyVaultAddress(_x5) {\n        return _getRoyaltyVaultAddress.apply(this, arguments);\n      }\n      return getRoyaltyVaultAddress;\n    }()\n    /**\n     * Transfers to vault an amount of revenue tokens claimable via a royalty policy.\n     */\n    )\n  }, {\n    key: \"transferToVault\",\n    value: (function () {\n      var _transferToVault = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(_ref3) {\n        var txOptions, ipId, royaltyPolicy, ancestorIpId, token, royaltyPolicyAddress, protocolArgs, _yield$this$rpcClient, call, txHash;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              txOptions = _ref3.txOptions, ipId = _ref3.ipId, royaltyPolicy = _ref3.royaltyPolicy, ancestorIpId = _ref3.ancestorIpId, token = _ref3.token;\n              royaltyPolicyAddress = royaltyPolicyInputToAddress(royaltyPolicy, this.chainId);\n              protocolArgs = [validateAddress(ipId), validateAddress(ancestorIpId), validateAddress(token)];\n              _context7.n = 1;\n              return this.rpcClient.simulateContract({\n                abi: royaltyPolicyLrpAbi,\n                // same abi for all royalty policies\n                address: royaltyPolicyAddress,\n                functionName: \"transferToVault\",\n                account: this.wallet.account,\n                args: protocolArgs\n              });\n            case 1:\n              _yield$this$rpcClient = _context7.v;\n              call = _yield$this$rpcClient.request;\n              _context7.n = 2;\n              return this.wallet.writeContract(call);\n            case 2:\n              txHash = _context7.v;\n              return _context7.a(2, waitForTxReceipt({\n                txHash: txHash,\n                rpcClient: this.rpcClient,\n                txOptions: txOptions\n              }));\n          }\n        }, _callee6, this);\n      }));\n      function transferToVault(_x6) {\n        return _transferToVault.apply(this, arguments);\n      }\n      return transferToVault;\n    }())\n  }, {\n    key: \"transferClaimedTokensFromIpToWallet\",\n    value: function () {\n      var _transferClaimedTokensFromIpToWallet = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(_ref4) {\n        var ipAccount, claimedTokens, txHashes, calls, _iterator3, _step3, _step3$value, token, amount, hash;\n        return _regenerator().w(function (_context8) {\n          while (1) switch (_context8.n) {\n            case 0:\n              ipAccount = _ref4.ipAccount, claimedTokens = _ref4.claimedTokens;\n              txHashes = [];\n              calls = [];\n              _iterator3 = _createForOfIteratorHelper(claimedTokens);\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  _step3$value = _step3.value, token = _step3$value.token, amount = _step3$value.amount;\n                  calls.push({\n                    target: token,\n                    value: BigInt(0),\n                    data: (0,viem__WEBPACK_IMPORTED_MODULE_5__.encodeFunctionData)({\n                      abi: viem__WEBPACK_IMPORTED_MODULE_20__.erc20Abi,\n                      functionName: \"transfer\",\n                      args: [this.walletAddress, amount]\n                    })\n                  });\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n              _context8.n = 1;\n              return ipAccount.executeBatch({\n                calls: calls,\n                operation: 0\n              });\n            case 1:\n              hash = _context8.v;\n              _context8.n = 2;\n              return this.rpcClient.waitForTransactionReceipt({\n                hash: hash\n              });\n            case 2:\n              txHashes.push(hash);\n              return _context8.a(2, txHashes);\n          }\n        }, _callee7, this);\n      }));\n      function transferClaimedTokensFromIpToWallet(_x7) {\n        return _transferClaimedTokensFromIpToWallet.apply(this, arguments);\n      }\n      return transferClaimedTokensFromIpToWallet;\n    }()\n  }, {\n    key: \"getClaimerInfo\",\n    value: function () {\n      var _getClaimerInfo = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(claimer) {\n        var isClaimerIp, ipAccount, ownsClaimer, ipOwner;\n        return _regenerator().w(function (_context9) {\n          while (1) switch (_context9.n) {\n            case 0:\n              _context9.n = 1;\n              return this.ipAssetRegistryClient.isRegistered({\n                id: claimer\n              });\n            case 1:\n              isClaimerIp = _context9.v;\n              ipAccount = new IpAccountImplClient(this.rpcClient, this.wallet, claimer);\n              ownsClaimer = claimer === this.walletAddress;\n              if (!isClaimerIp) {\n                _context9.n = 3;\n                break;\n              }\n              _context9.n = 2;\n              return ipAccount.owner();\n            case 2:\n              ipOwner = _context9.v;\n              ownsClaimer = ipOwner === this.walletAddress;\n            case 3:\n              return _context9.a(2, {\n                ownsClaimer: ownsClaimer,\n                isClaimerIp: isClaimerIp,\n                ipAccount: ipAccount\n              });\n          }\n        }, _callee8, this);\n      }));\n      function getClaimerInfo(_x8) {\n        return _getClaimerInfo.apply(this, arguments);\n      }\n      return getClaimerInfo;\n    }()\n    /**\n     * Unwraps WIP tokens back to their underlying IP tokens. Only accepts a single WIP token entry\n     * in the claimed tokens array. Throws an error if multiple WIP tokens are found.\n     */\n  }, {\n    key: \"unwrapWipTokens\",\n    value: (function () {\n      var _unwrapWipTokens = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(claimedTokens) {\n        var wipTokens, wipToken, hash;\n        return _regenerator().w(function (_context0) {\n          while (1) switch (_context0.n) {\n            case 0:\n              wipTokens = claimedTokens.filter(function (token) {\n                return token.token === WIP_TOKEN_ADDRESS;\n              });\n              if (!(wipTokens.length > 1)) {\n                _context0.n = 1;\n                break;\n              }\n              throw new Error(\"Multiple WIP tokens found in the claimed tokens.\");\n            case 1:\n              wipToken = wipTokens[0];\n              if (!(!wipToken || wipToken.amount <= 0n)) {\n                _context0.n = 2;\n                break;\n              }\n              return _context0.a(2);\n            case 2:\n              _context0.n = 3;\n              return this.wrappedIpClient.withdraw({\n                value: wipToken.amount\n              });\n            case 3:\n              hash = _context0.v;\n              _context0.n = 4;\n              return this.rpcClient.waitForTransactionReceipt({\n                hash: hash\n              });\n            case 4:\n              return _context0.a(2, hash);\n          }\n        }, _callee9, this);\n      }));\n      function unwrapWipTokens(_x9) {\n        return _unwrapWipTokens.apply(this, arguments);\n      }\n      return unwrapWipTokens;\n    }())\n  }]);\n}();\n\nvar WipClient = /*#__PURE__*/function () {\n  function WipClient(rpcClient, wallet) {\n    _classCallCheck(this, WipClient);\n    this.wrappedIpClient = new WrappedIpClient(rpcClient, wallet, WIP_TOKEN_ADDRESS);\n    this.rpcClient = rpcClient;\n    this.wallet = wallet;\n  }\n\n  /**\n   * Wraps the selected amount of IP to WIP.\n   * The WIP will be deposited to the wallet that transferred the IP.\n   */\n  return _createClass(WipClient, [{\n    key: \"deposit\",\n    value: (function () {\n      var _deposit = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(_ref) {\n        var amount, txOptions, _yield$this$rpcClient, call, txHash, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              amount = _ref.amount, txOptions = _ref.txOptions;\n              _context.p = 1;\n              if (!(amount <= 0)) {\n                _context.n = 2;\n                break;\n              }\n              throw new Error(\"WIP deposit amount must be greater than 0.\");\n            case 2:\n              _context.n = 3;\n              return this.rpcClient.simulateContract({\n                abi: wrappedIpAbi,\n                address: WIP_TOKEN_ADDRESS,\n                functionName: \"deposit\",\n                account: this.wallet.account,\n                value: BigInt(amount)\n              });\n            case 3:\n              _yield$this$rpcClient = _context.v;\n              call = _yield$this$rpcClient.request;\n              _context.n = 4;\n              return this.wallet.writeContract(call);\n            case 4:\n              txHash = _context.v;\n              return _context.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 5:\n              _context.p = 5;\n              _t = _context.v;\n              return _context.a(2, handleError(_t, \"Failed to deposit IP for WIP\"));\n          }\n        }, _callee, this, [[1, 5]]);\n      }));\n      function deposit(_x) {\n        return _deposit.apply(this, arguments);\n      }\n      return deposit;\n    }()\n    /**\n     * Unwraps the selected amount of WIP to IP.\n     */\n    )\n  }, {\n    key: \"withdraw\",\n    value: (function () {\n      var _withdraw = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(_ref2) {\n        var amount, txOptions, targetAmt, txHash, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.p = _context2.n) {\n            case 0:\n              amount = _ref2.amount, txOptions = _ref2.txOptions;\n              _context2.p = 1;\n              targetAmt = BigInt(amount);\n              if (!(targetAmt <= 0)) {\n                _context2.n = 2;\n                break;\n              }\n              throw new Error(\"WIP withdraw amount must be greater than 0.\");\n            case 2:\n              _context2.n = 3;\n              return this.wrappedIpClient.withdraw({\n                value: targetAmt\n              });\n            case 3:\n              txHash = _context2.v;\n              return _context2.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 4:\n              _context2.p = 4;\n              _t2 = _context2.v;\n              return _context2.a(2, handleError(_t2, \"Failed to withdraw WIP\"));\n          }\n        }, _callee2, this, [[1, 4]]);\n      }));\n      function withdraw(_x2) {\n        return _withdraw.apply(this, arguments);\n      }\n      return withdraw;\n    }()\n    /**\n     * Approve a spender to use the wallet's WIP balance.\n     */\n    )\n  }, {\n    key: \"approve\",\n    value: (function () {\n      var _approve = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(req) {\n        var amount, spender, txHash, _t3;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              _context3.p = 0;\n              amount = BigInt(req.amount);\n              if (!(amount <= 0)) {\n                _context3.n = 1;\n                break;\n              }\n              throw new Error(\"WIP approve amount must be greater than 0.\");\n            case 1:\n              spender = validateAddress(req.spender);\n              _context3.n = 2;\n              return this.wrappedIpClient.approve({\n                spender: spender,\n                amount: amount\n              });\n            case 2:\n              txHash = _context3.v;\n              return _context3.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: req.txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 3:\n              _context3.p = 3;\n              _t3 = _context3.v;\n              return _context3.a(2, handleError(_t3, \"Failed to approve WIP\"));\n          }\n        }, _callee3, this, [[0, 3]]);\n      }));\n      function approve(_x3) {\n        return _approve.apply(this, arguments);\n      }\n      return approve;\n    }()\n    /**\n     * Returns the balance of WIP for an address.\n     */\n    )\n  }, {\n    key: \"balanceOf\",\n    value: (function () {\n      var _balanceOf = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(addr) {\n        var owner, ret;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              owner = validateAddress(addr);\n              _context4.n = 1;\n              return this.wrappedIpClient.balanceOf({\n                owner: owner\n              });\n            case 1:\n              ret = _context4.v;\n              return _context4.a(2, ret.result);\n          }\n        }, _callee4, this);\n      }));\n      function balanceOf(_x4) {\n        return _balanceOf.apply(this, arguments);\n      }\n      return balanceOf;\n    }()\n    /**\n     * Transfers `amount` of WIP to a recipient `to`.\n     */\n    )\n  }, {\n    key: \"transfer\",\n    value: (function () {\n      var _transfer = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(request) {\n        var amount, txHash, _t4;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              amount = BigInt(request.amount);\n              if (!(amount <= 0)) {\n                _context5.n = 1;\n                break;\n              }\n              throw new Error(\"WIP transfer amount must be greater than 0.\");\n            case 1:\n              _context5.n = 2;\n              return this.wrappedIpClient.transfer({\n                to: validateAddress(request.to),\n                amount: amount\n              });\n            case 2:\n              txHash = _context5.v;\n              return _context5.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: request.txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 3:\n              _context5.p = 3;\n              _t4 = _context5.v;\n              return _context5.a(2, handleError(_t4, \"Failed to transfer WIP\"));\n          }\n        }, _callee5, this, [[0, 3]]);\n      }));\n      function transfer(_x5) {\n        return _transfer.apply(this, arguments);\n      }\n      return transfer;\n    }()\n    /**\n     * Transfers `amount` of WIP from `from` to a recipient `to`.\n     */\n    )\n  }, {\n    key: \"transferFrom\",\n    value: (function () {\n      var _transferFrom = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(request) {\n        var amount, txHash, _t5;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.p = _context6.n) {\n            case 0:\n              _context6.p = 0;\n              amount = BigInt(request.amount);\n              if (!(amount <= 0)) {\n                _context6.n = 1;\n                break;\n              }\n              throw new Error(\"WIP transfer amount must be greater than 0.\");\n            case 1:\n              _context6.n = 2;\n              return this.wrappedIpClient.transferFrom({\n                to: validateAddress(request.to),\n                amount: amount,\n                from: validateAddress(request.from)\n              });\n            case 2:\n              txHash = _context6.v;\n              return _context6.a(2, waitForTxReceipt({\n                txHash: txHash,\n                txOptions: request.txOptions,\n                rpcClient: this.rpcClient\n              }));\n            case 3:\n              _context6.p = 3;\n              _t5 = _context6.v;\n              return _context6.a(2, handleError(_t5, \"Failed to transfer WIP\"));\n          }\n        }, _callee6, this, [[0, 3]]);\n      }));\n      function transferFrom(_x6) {\n        return _transferFrom.apply(this, arguments);\n      }\n      return transferFrom;\n    }())\n  }]);\n}();\n\nif (typeof process !== \"undefined\") {\n  dotenv__WEBPACK_IMPORTED_MODULE_0__.config();\n}\n/**\n * The StoryClient is the main entry point for the SDK.\n */\nvar StoryClient = /*#__PURE__*/function () {\n  function StoryClient(config) {\n    _classCallCheck(this, StoryClient);\n    _defineProperty(this, \"_ipAsset\", null);\n    _defineProperty(this, \"_permission\", null);\n    _defineProperty(this, \"_license\", null);\n    _defineProperty(this, \"_dispute\", null);\n    _defineProperty(this, \"_ipAccount\", null);\n    _defineProperty(this, \"_royalty\", null);\n    _defineProperty(this, \"_nftClient\", null);\n    _defineProperty(this, \"_group\", null);\n    _defineProperty(this, \"_wip\", null);\n    this.config = _objectSpread2(_objectSpread2({}, config), {}, {\n      chainId: chain[config.chainId || 1315]\n    });\n    if (!this.config.transport) {\n      throw new Error(\"transport is null, please pass in a valid RPC Provider URL as the transport.\");\n    }\n    var clientConfig = {\n      chain: chainStringToViemChain(this.chainId),\n      transport: this.config.transport\n    };\n    this.rpcClient = (0,viem__WEBPACK_IMPORTED_MODULE_11__.createPublicClient)(clientConfig);\n    if (this.config.wallet) {\n      this.wallet = this.config.wallet;\n    } else if (this.config.account) {\n      var account = this.config.account;\n      this.wallet = (0,viem__WEBPACK_IMPORTED_MODULE_12__.createWalletClient)(_objectSpread2(_objectSpread2({}, clientConfig), {}, {\n        account: account\n      }));\n    } else {\n      throw new Error(\"must specify a wallet or account\");\n    }\n  }\n  return _createClass(StoryClient, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.config.chainId;\n    }\n\n    /**\n     * Factory method for creating an SDK client with a signer.\n     *\n     */\n  }, {\n    key: \"ipAsset\",\n    get:\n    /**\n     * Getter for the ip asset client. The client is lazily created when\n     * this method is called.\n     */\n    function get() {\n      if (this._ipAsset === null) {\n        this._ipAsset = new IPAssetClient(this.rpcClient, this.wallet, this.chainId);\n      }\n      return this._ipAsset;\n    }\n\n    /**\n     * Getter for the permission client. The client is lazily created when\n     * this method is called.\n     */\n  }, {\n    key: \"permission\",\n    get: function get() {\n      if (this._permission === null) {\n        this._permission = new PermissionClient(this.rpcClient, this.wallet, this.chainId);\n      }\n      return this._permission;\n    }\n\n    /**\n     * Getter for the license client. The client is lazily created when\n     * this method is called.\n     */\n  }, {\n    key: \"license\",\n    get: function get() {\n      if (this._license === null) {\n        this._license = new LicenseClient(this.rpcClient, this.wallet, this.chainId);\n      }\n      return this._license;\n    }\n\n    /**\n     * Getter for the dispute client. The client is lazily created when\n     * this method is called.\n     */\n  }, {\n    key: \"dispute\",\n    get: function get() {\n      if (this._dispute === null) {\n        this._dispute = new DisputeClient(this.rpcClient, this.wallet, this.chainId);\n      }\n      return this._dispute;\n    }\n\n    /**\n     * Getter for the ip account client. The client is lazily created when\n     * this method is called.\n     */\n  }, {\n    key: \"ipAccount\",\n    get: function get() {\n      if (this._ipAccount === null) {\n        this._ipAccount = new IPAccountClient(this.rpcClient, this.wallet, this.chainId);\n      }\n      return this._ipAccount;\n    }\n\n    /**\n     * Getter for the royalty client. The client is lazily created when\n     * this method is called.\n     */\n  }, {\n    key: \"royalty\",\n    get: function get() {\n      if (this._royalty === null) {\n        this._royalty = new RoyaltyClient(this.rpcClient, this.wallet, this.chainId);\n      }\n      return this._royalty;\n    }\n\n    /**\n     * Getter for the NFT client. The client is lazily created when\n     * this method is called.\n     */\n  }, {\n    key: \"nftClient\",\n    get: function get() {\n      if (this._nftClient === null) {\n        this._nftClient = new NftClient(this.rpcClient, this.wallet);\n      }\n      return this._nftClient;\n    }\n\n    /**\n     * Getter for the group client. The client is lazily created when\n     * this method is called.\n     */\n  }, {\n    key: \"groupClient\",\n    get: function get() {\n      if (this._group === null) {\n        this._group = new GroupClient(this.rpcClient, this.wallet, this.chainId);\n      }\n      return this._group;\n    }\n  }, {\n    key: \"wipClient\",\n    get: function get() {\n      if (this._wip === null) {\n        this._wip = new WipClient(this.rpcClient, this.wallet);\n      }\n      return this._wip;\n    }\n  }, {\n    key: \"getWalletBalance\",\n    value: function () {\n      var _getWalletBalance = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              if (this.wallet.account) {\n                _context.n = 1;\n                break;\n              }\n              throw new Error(\"No account found in wallet\");\n            case 1:\n              _context.n = 2;\n              return this.getBalance(this.wallet.account.address);\n            case 2:\n              return _context.a(2, _context.v);\n          }\n        }, _callee, this);\n      }));\n      function getWalletBalance() {\n        return _getWalletBalance.apply(this, arguments);\n      }\n      return getWalletBalance;\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(address) {\n        var validAddress;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              validAddress = validateAddress(address);\n              _context2.n = 1;\n              return this.rpcClient.getBalance({\n                address: validAddress\n              });\n            case 1:\n              return _context2.a(2, _context2.v);\n          }\n        }, _callee2, this);\n      }));\n      function getBalance(_x) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n  }], [{\n    key: \"newClient\",\n    value: function newClient(config) {\n      return new StoryClient(config);\n    }\n\n    /**\n     * Factory method for creating an SDK client with a signer.\n     */\n  }, {\n    key: \"newClientUseWallet\",\n    value: function newClientUseWallet(config) {\n      return new StoryClient({\n        chainId: config.chainId,\n        transport: config.transport,\n        wallet: config.wallet\n      });\n    }\n\n    /**\n     * Factory method for creating an SDK client with a signer.\n     */\n  }, {\n    key: \"newClientUseAccount\",\n    value: function newClientUseAccount(config) {\n      return new StoryClient({\n        account: config.account,\n        chainId: config.chainId,\n        transport: config.transport\n      });\n    }\n  }]);\n}();\n\n/**\n * IPA Metadata Standard Parameters\n *\n * This is the metadata that is associated with an IP Asset,\n * and gets stored inside of an IP Account.\n *\n * @see {@link https://docs.story.foundation/docs/ipa-metadata-standard|IPA Metadata Standard Docs}\n */\n\n/**\n * Experimental ip metadata fields that are not required but may be\n * considered for future use.\n */\n\n/**\n * Enum representing the various relationship types in a story narrative.\n */\nvar StoryRelationship = /*#__PURE__*/function (StoryRelationship) {\n  /** A character appears in a chapter. */\n  StoryRelationship[\"APPEARS_IN\"] = \"APPEARS_IN\";\n  /** A chapter belongs to a book. */\n  StoryRelationship[\"BELONGS_TO\"] = \"BELONGS_TO\";\n  /** A book is part of a series. */\n  StoryRelationship[\"PART_OF\"] = \"PART_OF\";\n  /** A chapter continues from the previous one. */\n  StoryRelationship[\"CONTINUES_FROM\"] = \"CONTINUES_FROM\";\n  /** An event leads to a consequence. */\n  StoryRelationship[\"LEADS_TO\"] = \"LEADS_TO\";\n  /** An event foreshadows future developments. */\n  StoryRelationship[\"FORESHADOWS\"] = \"FORESHADOWS\";\n  /** A character conflicts with another character. */\n  StoryRelationship[\"CONFLICTS_WITH\"] = \"CONFLICTS_WITH\";\n  /** A decision results in a significant change. */\n  StoryRelationship[\"RESULTS_IN\"] = \"RESULTS_IN\";\n  /** A subplot depends on the main plot. */\n  StoryRelationship[\"DEPENDS_ON\"] = \"DEPENDS_ON\";\n  /** A prologue sets up the story. */\n  StoryRelationship[\"SETS_UP\"] = \"SETS_UP\";\n  /** A chapter follows from the previous one. */\n  StoryRelationship[\"FOLLOWS_FROM\"] = \"FOLLOWS_FROM\";\n  /** A twist reveals that something unexpected occurred. */\n  StoryRelationship[\"REVEALS_THAT\"] = \"REVEALS_THAT\";\n  /** A character develops over the course of the story. */\n  StoryRelationship[\"DEVELOPS_OVER\"] = \"DEVELOPS_OVER\";\n  /** A chapter introduces a new character or element. */\n  StoryRelationship[\"INTRODUCES\"] = \"INTRODUCES\";\n  /** A conflict resolves in a particular outcome. */\n  StoryRelationship[\"RESOLVES_IN\"] = \"RESOLVES_IN\";\n  /** A theme connects to the main narrative. */\n  StoryRelationship[\"CONNECTS_TO\"] = \"CONNECTS_TO\";\n  /** A subplot relates to the central theme. */\n  StoryRelationship[\"RELATES_TO\"] = \"RELATES_TO\";\n  /** A scene transitions from one setting to another. */\n  StoryRelationship[\"TRANSITIONS_FROM\"] = \"TRANSITIONS_FROM\";\n  /** A character interacted with another character. */\n  StoryRelationship[\"INTERACTED_WITH\"] = \"INTERACTED_WITH\";\n  /** An event leads into the climax. */\n  StoryRelationship[\"LEADS_INTO\"] = \"LEADS_INTO\";\n  /** Story happening in parallel or around the same timeframe. */\n  StoryRelationship[\"PARALLEL\"] = \"PARALLEL\";\n  return StoryRelationship;\n}({});\n\n/**\n * Enum representing the different relationship types for AI-related metadata.\n */\nvar AIRelationship = /*#__PURE__*/function (AIRelationship) {\n  /** A model is trained on a dataset. */\n  AIRelationship[\"TRAINED_ON\"] = \"TRAINED_ON\";\n  /** A model is finetuned from a base model. */\n  AIRelationship[\"FINETUNED_FROM\"] = \"FINETUNED_FROM\";\n  /** An image is generated from a fine-tuned model. */\n  AIRelationship[\"GENERATED_FROM\"] = \"GENERATED_FROM\";\n  /** A model requires data for training. */\n  AIRelationship[\"REQUIRES_DATA\"] = \"REQUIRES_DATA\";\n  /** A remix is based on a specific workflow. */\n  AIRelationship[\"BASED_ON\"] = \"BASED_ON\";\n  /** Sample data influences model output. */\n  AIRelationship[\"INFLUENCES\"] = \"INFLUENCES\";\n  /** A pipeline creates a fine-tuned model. */\n  AIRelationship[\"CREATES\"] = \"CREATES\";\n  /** A workflow utilizes a base model. */\n  AIRelationship[\"UTILIZES\"] = \"UTILIZES\";\n  /** A fine-tuned model is derived from a base model. */\n  AIRelationship[\"DERIVED_FROM\"] = \"DERIVED_FROM\";\n  /** A model produces generated images. */\n  AIRelationship[\"PRODUCES\"] = \"PRODUCES\";\n  /** A remix modifies the base workflow. */\n  AIRelationship[\"MODIFIES\"] = \"MODIFIES\";\n  /** An AI-generated image references original data. */\n  AIRelationship[\"REFERENCES\"] = \"REFERENCES\";\n  /** A model is optimized by specific algorithms. */\n  AIRelationship[\"OPTIMIZED_BY\"] = \"OPTIMIZED_BY\";\n  /** A fine-tuned model inherits features from the base model. */\n  AIRelationship[\"INHERITS\"] = \"INHERITS\";\n  /** A fine-tuning process applies to a model. */\n  AIRelationship[\"APPLIES_TO\"] = \"APPLIES_TO\";\n  /** A remix combines elements from multiple datasets. */\n  AIRelationship[\"COMBINES\"] = \"COMBINES\";\n  /** A model generates variants of an image. */\n  AIRelationship[\"GENERATES_VARIANTS\"] = \"GENERATES_VARIANTS\";\n  /** A fine-tuning process expands on base capabilities. */\n  AIRelationship[\"EXPANDS_ON\"] = \"EXPANDS_ON\";\n  /** A workflow configures a model’s parameters. */\n  AIRelationship[\"CONFIGURES\"] = \"CONFIGURES\";\n  /** A fine-tuned model adapts to new data. */\n  AIRelationship[\"ADAPTS_TO\"] = \"ADAPTS_TO\";\n  return AIRelationship;\n}({});\n\n/**\n * This structure defines the terms for a Programmable IP License (PIL).\n * These terms can be attached to IP Assets.\n *\n * For more information, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-terms | PIL}.\n **/\n\n/**\n * @deprecated Use `PILFlavor.nonCommercialSocialRemixing`, `PILFlavor.commercialUse`, `PILFlavor.commercialRemix`, or `PILFlavor.creativeCommonsAttribution` instead.\n *\n * The type of PIL.\n */\nvar PIL_TYPE = /*#__PURE__*/function (PIL_TYPE) {\n  PIL_TYPE[PIL_TYPE[\"NON_COMMERCIAL_REMIX\"] = 0] = \"NON_COMMERCIAL_REMIX\";\n  PIL_TYPE[PIL_TYPE[\"COMMERCIAL_USE\"] = 1] = \"COMMERCIAL_USE\";\n  PIL_TYPE[PIL_TYPE[\"COMMERCIAL_REMIX\"] = 2] = \"COMMERCIAL_REMIX\";\n  PIL_TYPE[PIL_TYPE[\"CREATIVE_COMMONS_ATTRIBUTION\"] = 3] = \"CREATIVE_COMMONS_ATTRIBUTION\";\n  return PIL_TYPE;\n}({});\n\n/**\n * Tags refer to the “labels” that can be applied to IP Assets in the protocol when raising a dispute.\n * Tags must be whitelisted by protocol governance to be used in a dispute.\n * @see {@link https://docs.story.foundation/docs/dispute-module#dispute-tags | Dispute Tags}\n */\nvar DisputeTargetTag = /*#__PURE__*/function (DisputeTargetTag) {\n  /** Refers to registration of IP that already exists. */\n  DisputeTargetTag[\"IMPROPER_REGISTRATION\"] = \"IMPROPER_REGISTRATION\";\n  /**\n   * Refers to improper use of an IP Asset across multiple items.\n   * For more details, @see {@link https://docs.story.foundation/concepts/programmable-ip-license/overview | Programmable IP License (PIL)} documentation.\n   */\n  DisputeTargetTag[\"IMPROPER_USAGE\"] = \"IMPROPER_USAGE\";\n  /** Refers to missing payments associated with an IP. */\n  DisputeTargetTag[\"IMPROPER_PAYMENT\"] = \"IMPROPER_PAYMENT\";\n  /**\n   * Refers to “No-Hate”, “Suitable-for-All-Ages”, “No-Drugs-or-Weapons” and “No-Pornography”.\n   * These items can be found in more detail in the {@link https://docs.story.foundation/concepts/programmable-ip-license/overview  | 💊 Programmable IP License (PIL) } legal document.\n   */\n  DisputeTargetTag[\"CONTENT_STANDARDS_VIOLATION\"] = \"CONTENT_STANDARDS_VIOLATION\";\n  /**\n   * Different from the other 4, this is a temporary tag that goes away\n   * at the end of a dispute and is replaced by “0x” in case of no infringement or is replaced by one of the other tags.\n   */\n  DisputeTargetTag[\"IN_DISPUTE\"] = \"IN_DISPUTE\";\n  return DisputeTargetTag;\n}({});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@story-protocol/core-sdk/dist/story-protocol-core-sdk.esm.js\n");

/***/ })

};
;